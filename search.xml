<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>solidity函数修改器Modifiers本质</title>
      <link href="/hexoT.github.io/posts/53900.html"/>
      <url>/hexoT.github.io/posts/53900.html</url>
      
        <content type="html"><![CDATA[<h2 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h2><p>solidity中函数修改器Modifiers，其语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">modifier <span class="function"><span class="title">theOwner</span></span>() &#123;</span><br><span class="line">  require(msg.sender == owner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数修饰符看起来跟函数没什么不同，不过关键字modifier 告诉编译器，这是个modifier(修饰符)，而不是个function(函数)。它在实际执行中并不能像函数那样被直接调用，只能被添加到函数定义的末尾，用以改变函数的行为。</p><h2 id="用法本质"><a href="#用法本质" class="headerlink" title="用法本质"></a>用法本质</h2><p>使用函数修改器Modifiers代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">contract Contract is Ownable &#123;</span><br><span class="line">  event DAOcall(string laughter);</span><br><span class="line">  //注意 `theOwner`用上场 :</span><br><span class="line">  <span class="keyword">function</span> isDAO() external theOwner &#123;</span><br><span class="line">    DAOcall(<span class="string">"kk"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 isDAO 函数上的 theOwner 修饰符。 当你调用 isDAO 时，首先执行 theOwner 中的代码， 执行到 theOwner 中的 (msg.sender == owner); 语句时，程序再返回并执行 isDAO  中的代码。</p><p>可见，尽管函数修饰符也可以应用到各种场合，但最常见的还是放在函数执行之前添加快速的 require检查。</p>]]></content>
      
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HQ20合约中完整民主系统的基础</title>
      <link href="/hexoT.github.io/posts/21247.html"/>
      <url>/hexoT.github.io/posts/21247.html</url>
      
        <content type="html"><![CDATA[<p>可以使用 Democratic.sol 和 OneTokenOneVote.sol 作为[完整民主系统的基础]。</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts" target="_blank" rel="noopener">https://github.com/OpenZeppelin/openzeppelin-contracts</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kk</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HQ20简介</title>
      <link href="/hexoT.github.io/posts/3173.html"/>
      <url>/hexoT.github.io/posts/3173.html</url>
      
        <content type="html"><![CDATA[<p>HQ20是一个包含契约、库和示例的Solidity项目，可帮助您为真实世界构建功能齐全的分布式应用程序。<br>合同将被用作智能合同模式，供您从中汲取灵感，并使其易于理解，它们一直刻意保持简单。如果您决定重用合同，或者复制并粘贴其中的代码，请确保查找并关闭这些漏洞。如果你打算去主网，请进行第三方审核。</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><a href="https://github.com/HQ20/contracts" target="_blank" rel="noopener">https://github.com/HQ20/contracts</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kk</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenZeppelin简介</title>
      <link href="/hexoT.github.io/posts/18744.html"/>
      <url>/hexoT.github.io/posts/18744.html</url>
      
        <content type="html"><![CDATA[<p>OpenZeppelin合同通过使用以太坊和其他区块链的智能合约库帮助您将风险降至最低。<br>它包括最常用的ERC标准实现。</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts" target="_blank" rel="noopener">https://github.com/OpenZeppelin/openzeppelin-contracts</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kk</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ethereum.sendAsync() - 异步发送交易</title>
      <link href="/hexoT.github.io/posts/10422.html"/>
      <url>/hexoT.github.io/posts/10422.html</url>
      
        <content type="html"><![CDATA[<p>ethereum.sendAsync()方法采用异步形式向web3浏览器发送消息。 消息格式与以太坊JSON-RPC API的格式向对应，RPC API的响应结果在回调函数 中获得。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>下面的示例展示了如何使用ethereum.send()方法来发送以太币、调用智能合约：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ethereum.sendAsync(&#123;</span><br><span class="line">    method,</span><br><span class="line">    params,</span><br><span class="line">    from,</span><br><span class="line">  &#125;, <span class="keyword">function</span> (err, result) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">return</span> console.dir(err)</span><br><span class="line">    <span class="keyword">if</span> (result.error) &#123;</span><br><span class="line">      alert(result.error.message)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result.error) <span class="built_in">return</span> console.error(result)</span><br><span class="line">    $(<span class="string">"#msg"</span>).html(<span class="string">"User wants to vote for "</span> + candidateName + <span class="string">". Any one can now submit the vote to the blockchain on behalf of this user. Use the below values to submit the vote to the blockchain"</span>);</span><br><span class="line">    $(<span class="string">"#vote-for"</span>).html(<span class="string">"Candidate: "</span> + candidateName);</span><br><span class="line">    $(<span class="string">"#addr"</span>).html(<span class="string">"Address: "</span> + from);</span><br><span class="line">    $(<span class="string">"#signature"</span>).html(<span class="string">"Signature: "</span> + result.result);</span><br><span class="line">    console.log(<span class="string">'PERSONAL SIGNED:'</span> + JSON.stringify(result.result))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solidity语法之函数修改器Modifiers</title>
      <link href="/hexoT.github.io/posts/48254.html"/>
      <url>/hexoT.github.io/posts/48254.html</url>
      
        <content type="html"><![CDATA[<p>solidity中修改器(Modifiers)可以用来轻易的改变一个函数的行为。<br>比如用于在函数执行前检查某种前置条件。修改器是一种合约属性，可被继承，同时还可被派生的合约重写(override)。下面我们来看一段示例代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.0;</span><br><span class="line"></span><br><span class="line">contract owned &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">owned</span></span>() &#123; owner = msg.sender; &#125;</span><br><span class="line">    address owner;</span><br><span class="line">    modifier onlyOwner &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.sender != owner)</span><br><span class="line">            throw;</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //修改器可以被继承。</span><br><span class="line">contract mortal is owned &#123;</span><br><span class="line">    <span class="keyword">function</span> close() onlyOwner &#123;</span><br><span class="line">        selfdestruct(owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract priced &#123;</span><br><span class="line">    modifier costs(uint price) &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.value &gt;= price) &#123;</span><br><span class="line">            _;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Register is priced, owned &#123;</span><br><span class="line">    mapping (address =&gt; bool) registeredAddresses;</span><br><span class="line">    uint price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> Register(uint initialPrice) &#123; price = initialPrice; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> register() payable costs(price) &#123;</span><br><span class="line">        registeredAddresses[msg.sender] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> changePrice(uint _price) onlyOwner &#123;</span><br><span class="line">        price = _price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改器可以被继承。<br>特殊_表示使用修改符的函数体的替换位置。<br>从合约Register可以看出合约可以多继承，通过,号分隔两个被继承的对象。<br>修改器也是可以接收参数的，如priced的costs。</p><p>另外，使用修改器可以实现防重复进入，例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.0;</span><br><span class="line">contract Mutex &#123;</span><br><span class="line">    bool locked;</span><br><span class="line">    modifier <span class="function"><span class="title">noReentrancy</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (locked) throw;</span><br><span class="line">        locked = <span class="literal">true</span>;</span><br><span class="line">        _;</span><br><span class="line">        locked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> f() noReentrancy returns (uint) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!msg.sender.call()) throw;</span><br><span class="line">        <span class="built_in">return</span> 7;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子中，由于call()方法有可能会调回当前方法，修改器实现了防重入的检查。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊JSON RPC的eth_signTypedData方法</title>
      <link href="/hexoT.github.io/posts/39360.html"/>
      <url>/hexoT.github.io/posts/39360.html</url>
      
        <content type="html"><![CDATA[<p>eth_signTypedData方法已经添加进了Ethereum JSON-RPC中。这个方法与`eth_sign相似。</p><h2 id="eth-signTypedData"><a href="#eth-signTypedData" class="headerlink" title="eth_signTypedData"></a>eth_signTypedData</h2><p>这个签名方法用sign(keccak256(“\x19Ethereum Signed Message:\n” + len(message) + message))计算一个以太坊特定的签名。</p><p>通过给消息加上前缀，可以将计算出的签名识别为以太坊特定的签名。这可以防止恶意DApp签署任意数据（例如交易），并使用签名来冒充受害者的情况。</p><p>注意：用来签名的地址必须解锁。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1，Address - 20字节 - 对消息签名的账户地址</span><br><span class="line">2，TypedData - 需要被签名的类型化的结构数据。</span><br></pre></td></tr></table></figure><p>类型化的数据是一个JSON对象，它包含类型信息，域名分割参数和消息对象。以下是一个TypedData参数的JSON-schema定义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">'object'</span>,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    types: &#123;</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">'object'</span>,</span><br><span class="line">      additionalProperties: &#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'array'</span>,</span><br><span class="line">        items: &#123;</span><br><span class="line">          <span class="built_in">type</span>: <span class="string">'object'</span>,</span><br><span class="line">          properties: &#123;</span><br><span class="line">            name: &#123;<span class="built_in">type</span>: <span class="string">'string'</span>&#125;,</span><br><span class="line">            <span class="built_in">type</span>: &#123;<span class="built_in">type</span>: <span class="string">'string'</span>&#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          required: [<span class="string">'name'</span>, <span class="string">'type'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    primaryType: &#123;<span class="built_in">type</span>: <span class="string">'string'</span>&#125;,</span><br><span class="line">    domain: &#123;<span class="built_in">type</span>: <span class="string">'object'</span>&#125;,</span><br><span class="line">    message: &#123;<span class="built_in">type</span>: <span class="string">'object'</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>DATA：签名。<br>就像在eth_sign里一样，它是一个以0x开头的16进制的129字节数组。<br>它以大端模式编码了r，s，v参数（黄皮书附录F）。<br>字节0-64字节包含了参数r，字节64-128字节是参数s，最后一个字节是参数v。注意到参数v包含了链id，这在EIP-155有详细说明。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>###请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST --data <span class="string">'&#123;"jsonrpc":"2.0","method":"eth_signTypedData","params":["0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826", &#123;"types":&#123;"EIP712Domain":[&#123;"name":"name","type":"string"&#125;,&#123;"name":"version","type":"string"&#125;,&#123;"name":"chainId","type":"uint256"&#125;,&#123;"name":"verifyingContract","type":"address"&#125;],"Person":[&#123;"name":"name","type":"string"&#125;,&#123;"name":"wallet","type":"address"&#125;],"Mail":[&#123;"name":"from","type":"Person"&#125;,&#123;"name":"to","type":"Person"&#125;,&#123;"name":"contents","type":"string"&#125;]&#125;,"primaryType":"Mail","domain":&#123;"name":"Ether Mail","version":"1","chainId":1,"verifyingContract":"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"&#125;,"message":&#123;"from":&#123;"name":"Cow","wallet":"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"&#125;,"to":&#123;"name":"Bob","wallet":"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"&#125;,"contents":"Hello, Bob!"&#125;&#125;],"id":1&#125;'</span></span><br></pre></td></tr></table></figure><p>###返回值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>:1,</span><br><span class="line">  <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</span><br><span class="line">  <span class="string">"result"</span>: <span class="string">"0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b915621c"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，返回值”result”是一个以0x开头的16进制的129字节数组。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊JSON RPC</title>
      <link href="/hexoT.github.io/posts/25397.html"/>
      <url>/hexoT.github.io/posts/25397.html</url>
      
        <content type="html"><![CDATA[<p>JSON是一种轻量级数据交换格式。它可以表示数值、字符串、序列及名/值对集合。</p><p>JSON-RPC是一种无状态轻量级远程过程调用（RPC）协议。本规范定义了数据结构及 相应的处理规则。规范本身是传输无关的，可以用于进程内通信、socket套接字、HTTP 或各种消息通信环境。规范使用JSON（RFC 4627）数据格式。</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><p>可以使用–rpc选项启动HTTP JSON-RPC。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --rpc</span><br></pre></td></tr></table></figure><p>使用–rpcaddr和–rpcport选项修改默认的监听端口(8545)和监听地址(localhost)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --rpc --rpcaddr &lt;ip&gt; --rpcport &lt;portnumber&gt;</span><br></pre></td></tr></table></figure><p>如果从浏览器中访问RPC，需要正确设置CORS，否则由于同源策略的限制，javascript调用将失败：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --rpc --rpccorsdomain <span class="string">"http://localhost:3000"</span></span><br></pre></td></tr></table></figure><p>也可以在geth控制台使用admin.startRPC(addr,port)命令来启动JSON RPC。</p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>可以使用-j选项启动RPC：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./eth -j</span><br></pre></td></tr></table></figure><p>同样，可以使用–json-rpc-port选项指定监听端口，默认值为8545:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./eth -j --json-rpc-port 8079</span><br></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>在Python实现中，默认会启动JSONRPC服务，监听地址和端口为127.0.0.1:4000。</p><p>可以使用-c选项设置监听地址和监听端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyethapp -c jsonrpc.listen_port=4002 -c jsonrpc.listen_host=127.0.0.2 run</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECRecovery.sol简介</title>
      <link href="/hexoT.github.io/posts/22727.html"/>
      <url>/hexoT.github.io/posts/22727.html</url>
      
        <content type="html"><![CDATA[<p>首先来看一下ECRecovery.sol代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.18;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title Eliptic curve signature operations//椭圆曲线签名操作</span><br><span class="line"> *</span><br><span class="line"> * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d</span><br><span class="line"> * //一旦solidity支持向ecrec传递签名，就删除此库</span><br><span class="line"> * TODO Remove this library once solidity supports passing a signature to ecrecover.</span><br><span class="line"> * See https://github.com/ethereum/solidity/issues/864</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">library ECRecovery &#123;</span><br><span class="line"></span><br><span class="line">  /**//使用签名从信息中恢复签名者地址</span><br><span class="line">   * @dev Recover signer address from a message by using their signature</span><br><span class="line">   * //哈希字节32消息，哈希是签名消息。恢复的是签名者地址。</span><br><span class="line">   * @param <span class="built_in">hash</span> bytes32 message, the <span class="built_in">hash</span> is the signed message. What is recovered is the signer address.</span><br><span class="line">   * //sig字节签名，签名是使用web3.eth.sign()生成的。</span><br><span class="line">   * @param sig bytes signature, the signature is generated using web3.eth.sign()</span><br><span class="line">   */</span><br><span class="line">  <span class="keyword">function</span> recover(bytes32 <span class="built_in">hash</span>, bytes sig) internal pure returns (address) &#123;</span><br><span class="line">    bytes32 r;</span><br><span class="line">    bytes32 s;</span><br><span class="line">    uint8 v;</span><br><span class="line"></span><br><span class="line">    //Check the signature length</span><br><span class="line">    <span class="keyword">if</span> (sig.length != 65) &#123;</span><br><span class="line">      <span class="built_in">return</span> (address(0));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 将签名除以r、s和v变量</span><br><span class="line">    // Divide the signature <span class="keyword">in</span> r, s and v variables  </span><br><span class="line">    // ecrecover获取签名参数，也是获取这些参数的唯一方法</span><br><span class="line">    // ecrecover takes the signature parameters, and the only way to get them </span><br><span class="line">    // currently is to use assembly.</span><br><span class="line">    // solium-disable-next-line security/no-inline-assembly</span><br><span class="line">    assembly &#123;</span><br><span class="line">      r := mload(add(sig, 32))</span><br><span class="line">      s := mload(add(sig, 64))</span><br><span class="line">      v := byte(0, mload(add(sig, 96)))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions</span><br><span class="line">    <span class="keyword">if</span> (v &lt; 27) &#123;</span><br><span class="line">      v += 27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // If the version is correct <span class="built_in">return</span> the signer address</span><br><span class="line">    <span class="keyword">if</span> (v != 27 &amp;&amp; v != 28) &#123;</span><br><span class="line">      <span class="built_in">return</span> (address(0));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">return</span> ecrecover(<span class="built_in">hash</span>, v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个库library ECRecovery的思想就是可以计算对应于用于创建ECDSA签名的私钥的公钥，这两个额外的字节通常是由签名提供的。签名本身是椭圆曲线点R和S的两个（编码），而V是恢复公钥所需的两个附加位。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity语法之库Libraries</title>
      <link href="/hexoT.github.io/posts/17075.html"/>
      <url>/hexoT.github.io/posts/17075.html</url>
      
        <content type="html"><![CDATA[<p>库(Libraries)，与合约类似，但它的目的是在一个指定的地址，且仅部署一次，然后通过EVM的特性DELEGATECALL(Homestead之前是用CALLCODE)来复用代码。</p><h2 id="库函数运行的上下文"><a href="#库函数运行的上下文" class="headerlink" title="库函数运行的上下文"></a>库函数运行的上下文</h2><p>DELEGATECALL指令意味着，代码是在发起调用合约的context中被执行的，因此this将指向到发起调用的合约。我们来看看下面的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.0; </span><br><span class="line">library DelegateCalledLibary&#123; </span><br><span class="line"><span class="keyword">function</span> relatedVar() returns (address, address, uint)&#123; </span><br><span class="line"><span class="built_in">return</span> (this, msg.sender, msg.value); </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract CalledContract&#123; </span><br><span class="line"><span class="keyword">function</span> calling() returns(address, address, address, address, uint, uint)&#123; </span><br><span class="line">//库函数使用时，不需要实例化，就可以通过库.函数的方式直接访问。</span><br><span class="line">var (libAddr, libSender, libVal) = DelegateCalledLibary.relatedVar(); </span><br><span class="line">//库里的this，msg.sender，msg.value与调用合约中的完全一致。</span><br><span class="line">var (contractAddr, contractSender, contractVal) = (this, msg.sender, msg.value); </span><br><span class="line"><span class="built_in">return</span> (libAddr, contractAddr, libSender, contractSender, libVal, contractVal); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中，调用CalledContract中的calling()方法，我们会发现库里的this，msg.sender，msg.value与调用合约中的完全一致。<br>虽然如此，但需要注意的是，对于库的调用，实际会被编译为DELEGATECALL的向外部合约或库的调用，如果使用库函数，实际意味着你正在发起一个external的函数调用（在Homestead版本之前，由于底层是使用的CALLCODE实现的，所以msg.sender和msg.value值会变）。</p><h2 id="Using-For"><a href="#Using-For" class="headerlink" title="Using For"></a>Using For</h2><p>我们可以使用指令using A for B来附着库A里定义的函数来任意的类型B。A库里的函数允许一种惯例。这些库函数可以接收调用函数的实例对象作为第一个参数（类似Python中的特殊self变量）。使用这种语法，我们可以让上一个例子的实现更加简单。<br>下面来看例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.0; </span><br><span class="line">library Set&#123; </span><br><span class="line">//这里只是定义了一个结构体 </span><br><span class="line">struct Data&#123; mapping(uint =&gt; bool) flags; &#125; </span><br><span class="line">//访问传进来的状态变量 </span><br><span class="line"><span class="keyword">function</span> contains(Data storage self, uint val) returns(bool)</span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">return</span> self.flags[val]; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">contract LibraryUsingFor&#123; </span><br><span class="line">//将库Set附着到了库的数据结构Set.Data上</span><br><span class="line">using Set <span class="keyword">for</span> Set.Data; </span><br><span class="line">Set.Data data; </span><br><span class="line"><span class="keyword">function</span> call() returns(bool, bool)</span><br><span class="line">&#123; </span><br><span class="line">//对应的对象上被附着了库函数，可以直接调用 </span><br><span class="line">bool contain1 = data.contains(1); </span><br><span class="line">data.flags[2] = <span class="literal">true</span>; </span><br><span class="line">bool contain2 = data.contains(2); </span><br><span class="line"><span class="built_in">return</span> (contain1, contain2); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子，我们将库Set附着到了库的数据结构Set.Data上，这样，这个数据结构的实例就有了对应函数。附着带来另一个好处是，能将调用对象自动做为第一个参数，比如data.contains(1);，会将data做为第一个参数，再拼上参数1作为第二个参数，一起传入contains()方法，这样写起来更自然和简捷。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>使用库合约的合约，可以将库合约视为隐式的父合约(base contracts)，当然它们不会显式的出现在继承关系中。<br>但调用库函数的方式非常类似，如库L有函数f()，使用L.f()即可访问。此外，internal的库函数对所有合约可见，如果把库想像成一个父合约就能说得通了。当然调用内部函数使用的是internal的调用惯例，这意味着所有internal类型可以传进去，memory类型则通过引用传递，而不是拷贝的方式。为了在EVM中实现这一点，internal的库函数的代码和从其中调用的所有函数将被拉取(pull into)到调用合约中，然后执行一个普通的JUMP来代替DELEGATECALL。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ethereumjs-util</title>
      <link href="/hexoT.github.io/posts/42997.html"/>
      <url>/hexoT.github.io/posts/42997.html</url>
      
        <content type="html"><![CDATA[<p>ethereumjs-util，以太坊的实用函数集合。它可以在node.js使用，和在浏览器中使用browserify。<br>Browserify：提供在浏览器环境下require()npm模块的支持。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>切换到项目工程所在根目录，然后在终端中键入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install ethereumjs-util</span><br></pre></td></tr></table></figure><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><p>使用例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import assert from <span class="string">'assert'</span></span><br><span class="line">import &#123; isValidChecksumAddress, unpadBuffer, BN &#125; from <span class="string">'ethereumjs-util'</span></span><br><span class="line"> </span><br><span class="line">const address = <span class="string">'0x2F015C60E0be116B1f0CD534704Db9c92118FB6A'</span></span><br><span class="line">assert.ok(isValidChecksumAddress(address))</span><br><span class="line"> </span><br><span class="line">assert.equal(unpadBuffer(Buffer.from(<span class="string">'000000006600'</span>, <span class="string">'hex'</span>)), Buffer.from(<span class="string">'6600'</span>, <span class="string">'hex'</span>))</span><br><span class="line"> </span><br><span class="line">assert.equal(new BN(<span class="string">'dead'</span>, 16).add(new BN(<span class="string">'101010'</span>, 2)), 57047)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eth-sig-util验证签名地址</title>
      <link href="/hexoT.github.io/posts/15127.html"/>
      <url>/hexoT.github.io/posts/15127.html</url>
      
        <content type="html"><![CDATA[<p>eth-sig-util，以太坊签名函数的小集合，就是一个函数库。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>切换到项目工程所在根目录，然后在终端中键入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install eth-sig-util --save</span><br></pre></td></tr></table></figure><h2 id="函数集合"><a href="#函数集合" class="headerlink" title="函数集合"></a>函数集合</h2><h3 id="concatSig-v-r-s"><a href="#concatSig-v-r-s" class="headerlink" title="concatSig(v, r, s)"></a>concatSig(v, r, s)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">所有三个参数都应作为缓冲区提供。</span><br><span class="line">返回连续、十六进制前缀的十六进制值的签名，适合包含在JSON事务的数据字段中。</span><br></pre></td></tr></table></figure><h3 id="normalize-address"><a href="#normalize-address" class="headerlink" title="normalize(address)"></a>normalize(address)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接受大写或小写的地址（带或不带十六进制前缀），并返回一个全小写、十六进制前缀的地址，适合提交给以太坊提供商。</span><br></pre></td></tr></table></figure><h3 id="personalSign-privateKeyBuffer-msgParams"><a href="#personalSign-privateKeyBuffer-msgParams" class="headerlink" title="personalSign (privateKeyBuffer, msgParams)"></a>personalSign (privateKeyBuffer, msgParams)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msgParams应具有要签名的十六进制编码数据的数据密钥。</span><br><span class="line">返回调用所需的带前缀的签名个人签名。</span><br></pre></td></tr></table></figure><h3 id="recoverPersonalSignature-msgParams"><a href="#recoverPersonalSignature-msgParams" class="headerlink" title="recoverPersonalSignature (msgParams)"></a>recoverPersonalSignature (msgParams)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msgParams应该有一个十六进制编码的无符号数据密钥，以及一个十六进制编码并已签名的sig密钥。</span><br><span class="line">返回十六进制编码的发件人地址。</span><br></pre></td></tr></table></figure><h3 id="signTypedData-privateKeyBuffer-msgParams"><a href="#signTypedData-privateKeyBuffer-msgParams" class="headerlink" title="signTypedData (privateKeyBuffer, msgParams)"></a>signTypedData (privateKeyBuffer, msgParams)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根据EIP 712的早期草案，标记键入的数据。</span><br><span class="line">数据应在msgParams的数据键下。该方法返回带前缀的签名。</span><br></pre></td></tr></table></figure><h3 id="signTypedData-v3-privateKeyBuffer-msgParams"><a href="#signTypedData-v3-privateKeyBuffer-msgParams" class="headerlink" title="signTypedData_v3 (privateKeyBuffer, msgParams)"></a>signTypedData_v3 (privateKeyBuffer, msgParams)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根据EIP 712的发布版本标记键入的数据。</span><br><span class="line">数据应在msgParams的数据键下。该方法返回带前缀的签名。</span><br></pre></td></tr></table></figure><h3 id="signTypedData-v4-privateKeyBuffer-msgParams"><a href="#signTypedData-v4-privateKeyBuffer-msgParams" class="headerlink" title="signTypedData_v4 (privateKeyBuffer, msgParams)"></a>signTypedData_v4 (privateKeyBuffer, msgParams)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">根据已发布版本EIP 712的扩展标记键入的数据。</span><br><span class="line">这个扩展增加了对数组和递归数据类型的支持。</span><br><span class="line">数据应在msgParams的数据键下。该方法返回带前缀的签名。</span><br></pre></td></tr></table></figure><h3 id="recoverTypedSignature-data-sig"><a href="#recoverTypedSignature-data-sig" class="headerlink" title="recoverTypedSignature ({data, sig})"></a>recoverTypedSignature ({data, sig})</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行signTypedData的签名者的返回地址。</span><br><span class="line">期望与用于签名的数据相同。sig是一个前缀签名。</span><br></pre></td></tr></table></figure><h3 id="typedSignatureHash-typedData"><a href="#typedSignatureHash-typedData" class="headerlink" title="typedSignatureHash (typedData)"></a>typedSignatureHash (typedData)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据EIP712架构返回类型化数据参数的十六进制编码哈希。</span><br></pre></td></tr></table></figure><h3 id="extractPublicKey-msgParams"><a href="#extractPublicKey-msgParams" class="headerlink" title="extractPublicKey (msgParams)"></a>extractPublicKey (msgParams)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msgParams应该有一个十六进制编码的无符号数据密钥，以及一个十六进制编码并已签名的sig密钥。</span><br><span class="line">返回十六进制编码的公钥。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solidity的映射mappings</title>
      <link href="/hexoT.github.io/posts/7556.html"/>
      <url>/hexoT.github.io/posts/7556.html</url>
      
        <content type="html"><![CDATA[<p>映射mappings，一种键值对的映射关系存储结构。<br>它们被虚拟地初始化，使得每个可能的键都存在并被映射到其字节表示全为零的值：类型的默认值。<br>定义方式为mapping(_KeyType =&gt; _KeyValue)。<br>注意：键的类型_KeyType允许除映射外的所有类型，如数组，合约，枚举，结构体。值的类型无限制。</p><p>可以通过将映射标记为public，来让Solidity创建一个访问器。要想访问这样的映射，需要提供一个键值做为参数。<br>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">contract MappingExample&#123;</span><br><span class="line">    mapping(bytes32 =&gt; uint) public balances;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> update(bytes32 candidate,uint amount) returns (address addr)&#123;</span><br><span class="line">    balances[candidate] + = amount;//要想访问这样的映射，需要提供一个键值做为参数。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web3-合约实例的参数options</title>
      <link href="/hexoT.github.io/posts/27209.html"/>
      <url>/hexoT.github.io/posts/27209.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web3-发送合约方法交易send</title>
      <link href="/hexoT.github.io/posts/41060.html"/>
      <url>/hexoT.github.io/posts/41060.html</url>
      
        <content type="html"><![CDATA[<p>web3js中，send向合约发送交易来执行指定方法，将改变合约的状态。<br>web3js的send向合约发送交易来执行指定方法具体实现代码示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const networkId = web3.eth.net.getId();</span><br><span class="line">const deployedNetwork = votingArtifact.networks[networkId];</span><br><span class="line"> this.voting = new this.web3.eth.Contract(</span><br><span class="line">      votingArtifact.abi,</span><br><span class="line">      deployedNetwork.address,</span><br><span class="line">    );//创建合约对象</span><br><span class="line">const &#123; buy &#125; =  this.voting.methods;//为合约方法创建交易</span><br><span class="line">buy().send(options[, callback]);//发送交易来执行指定方法</span><br></pre></td></tr></table></figure><p>由上代码可以看出，web3js的call调用合约方法分三步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一，创建合约对象；</span><br><span class="line">第二，为合约方法创建交易；</span><br><span class="line">第三，发送交易来执行指定方法；</span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">options - Object : 选项，包含如下字段：</span><br><span class="line">   from - String: 交易发送方地址</span><br><span class="line">   gasPrice - String : 可选，用于本次交易的gas价格，单位：wei</span><br><span class="line">   gas - Number : 可选，本次交易的gas用量上限，即gas <span class="built_in">limit</span></span><br><span class="line">   value - Number|String|BN|BigNumber: 可选，交易转账金额，单位：wei</span><br><span class="line">callback - Function: 可选的回调参数，其参数为交易哈希值和错误对象</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">回调函数中将返回32字节长的交易哈希值。</span><br></pre></td></tr></table></figure><p>各种方法示例代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 使用回调函数接收合约方法执行结果</span><br><span class="line">buy().send(&#123;gas: 140000, from: this.account&#125;, <span class="keyword">function</span>(error, transactionHash)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 使用Promise接收合约方法执行结果</span><br><span class="line">buy().send(&#123;gas: 140000, from: this.account&#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(receipt)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 使用事件触发接收合约方法执行结果</span><br><span class="line">buy().send(&#123;gas: 140000, from: this.account&#125;).on(<span class="string">'transactionHash'</span>, <span class="keyword">function</span>(<span class="built_in">hash</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web3js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle migrate部署测试网络报错&quot; invalid bytes32 value&quot;</title>
      <link href="/hexoT.github.io/posts/37173.html"/>
      <url>/hexoT.github.io/posts/37173.html</url>
      
        <content type="html"><![CDATA[<p>truffle migrate部署测试网络报错” invalid bytes32 value”。报错具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> truffle migrate --network ropsten  --reset</span><br><span class="line">2_deploy_contracts.js</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">   Replacing <span class="string">'Voting'</span></span><br><span class="line">   ------------------</span><br><span class="line"></span><br><span class="line">Error:  *** Deployment Failed ***</span><br><span class="line"></span><br><span class="line"><span class="string">"Voting"</span> -- invalid bytes32 value (arg=<span class="string">"candidateNames"</span>, coderType=<span class="string">"bytes32"</span>, value=<span class="string">"Rama"</span>).</span><br></pre></td></tr></table></figure><p>invalid bytes32 value,无效的bytes32，错误是出在2_deploy_contracts.js。我们打开migrations中的2_deploy_contracts.js，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var Voting = artifacts.require(<span class="string">"./Voting.sol"</span>);</span><br><span class="line"></span><br><span class="line">module.exports = <span class="keyword">function</span>(deployer) &#123;</span><br><span class="line">  deployer.deploy(Voting, 10000, web3.utils.toWei(<span class="string">'0.01'</span>, <span class="string">'ether'</span>),[<span class="string">'Rama'</span>, <span class="string">'Nick'</span>, <span class="string">'Jose'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再看下具体报错，invalid bytes32 value (arg=”candidateNames”, coderType=”bytes32”, value=”Rama”)，(arg=”candidateNames”, coderType=”bytes32”, value=”Rama”)。arg=”candidateNames”，参数是candidateNames，格式是bytes32，而我们的值value=”Rama”是一个字符串。<br>所以可以看到问题是格式冲突问题。<br>解决方法，可以将字符串转为bytes32。将代码[‘Rama’, ‘Nick’, ‘Jose’]改为：web3.utils.fromAscii(candidateNames)。<br>这样就不会出现报错了。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web3-call调用合约方法</title>
      <link href="/hexoT.github.io/posts/5067.html"/>
      <url>/hexoT.github.io/posts/5067.html</url>
      
        <content type="html"><![CDATA[<p>web3js调用合约是只读方法，并在EVM中直接执行方法，不需要发送任何交易。因此不会改变合约的状态。<br>web3js的call调用合约方法具体代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const networkId = web3.eth.net.getId();</span><br><span class="line">const deployedNetwork = votingArtifact.networks[networkId];</span><br><span class="line"> this.voting = new this.web3.eth.Contract(</span><br><span class="line">      votingArtifact.abi,</span><br><span class="line">      deployedNetwork.address,</span><br><span class="line">    );//创建合约对象</span><br><span class="line">const &#123; totalVotesFor &#125; = this.voting.methods;//为合约方法创建交易</span><br><span class="line">voteForCandidate(candidateName).call(options[, callback]);//调用合约</span><br></pre></td></tr></table></figure><p>由上代码可以看出，web3js的call调用合约方法分三步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一，创建合约对象；</span><br><span class="line">第二，为合约方法创建交易；</span><br><span class="line">第三，调用合约；</span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">options - Object : 选项，包含如下字段：</span><br><span class="line">   from - String (optional): The address the call “transaction” should be made from.</span><br><span class="line">   gasPrice - String (optional): The gas price <span class="keyword">in</span> wei to use <span class="keyword">for</span> this call “transaction”.</span><br><span class="line">   gas - Number (optional): The maximum gas provided <span class="keyword">for</span> this call “transaction” (gas <span class="built_in">limit</span>).</span><br><span class="line">callback - Function : 可选的回调函数，其第二个参数为合约方法的执行结果，第一个参数为错误对象</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个Promise对象，其解析值为合约方法的返回值，Mixed类型。如果合约方法返回多个值，则解析值为一个对象。</span><br></pre></td></tr></table></figure><p>各种方法示例代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 使用回调函数接收合约方法执行结果</span><br><span class="line">voteForCandidate(candidateName).call(&#123;gas: 140000, from: this.account&#125;, <span class="keyword">function</span>(error, result)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 使用Promise接收合约方法执行结果</span><br><span class="line">voteForCandidate(candidateName).call(&#123;gas: 140000, from: this.account&#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(result)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web3js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solidity智能合约中bytes32传参报错“Error  invalid arrayify value ”</title>
      <link href="/hexoT.github.io/posts/53754.html"/>
      <url>/hexoT.github.io/posts/53754.html</url>
      
        <content type="html"><![CDATA[<p>solidity智能合约中bytes32传参报错“Error  invalid arrayify value ”.<br>具体是这样的，web3js代码中调用智能合约中的函数，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> candidateName = <span class="string">'dexter'</span>;</span><br><span class="line">const networkId = await this.web3.eth.net.getId();</span><br><span class="line">const deployedNetwork = votingArtifact.networks[networkId];</span><br><span class="line">this.voting = new this.web3.eth.Contract(</span><br><span class="line">      votingArtifact.abi,</span><br><span class="line">      deployedNetwork.address,</span><br><span class="line">    );</span><br><span class="line">const &#123; voteForCandidate, totalVotesFor &#125; = this.voting.methods;</span><br><span class="line">await voteForCandidate(candidateName).call(&#123;gas: 140000, from: this.account&#125;);</span><br></pre></td></tr></table></figure><p>npm run dev运行DAPP后，在浏览器上报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: invalid arrayify value (argument=<span class="string">"value"</span>, value=<span class="string">"Rama000000000000000000000000000000000000000000000000000000000000"</span>, code=INVALID_ARGUMENT, version=bytes/5.0.3)</span><br></pre></td></tr></table></figure><p>其中voteForCandidate()是智能合约vote.sol中的函数，其代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> voteForCandidate(bytes32 candidate, uint votesInTokens) public &#123;</span><br><span class="line">uint index = indexOfCandidate(candidate);</span><br><span class="line">require(index != uint(-1));</span><br><span class="line"></span><br><span class="line">// msg.sender gives us the address of the account/voter who is trying</span><br><span class="line">// to call this <span class="keyword">function</span></span><br><span class="line"><span class="keyword">if</span> (voterInfo[msg.sender].tokensUsedPerCandidate.length == 0) &#123;</span><br><span class="line">  <span class="keyword">for</span>(uint i = 0; i &lt; candidateList.length; i++) &#123;</span><br><span class="line">    voterInfo[msg.sender].tokensUsedPerCandidate.push(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下报错invalid arrayify value，无效的值。我们得重点看下传入的参数值，<br>在web3js中voteForCandidate(candidateName, voteTokens)，let candidateName = ‘dexter’，传入的数值是一个字符串。<br>而在智能合约vote.sol中voteForCandidate(bytes32 candidate, uint votesInTokens)，首个参数要求的是bytes32，正是因为<br>传入的值格式不对才会造成上面报错。现在我们需要做的是在web3js代码中将字符串转为bytes32。通过web3.utils.fromAscii(candidateName)的方法就可以在web3js中将字符串转为bytes32。</p><p>我们将web3js中的await voteForCandidate(candidateName, voteTokens).call({gas: 140000, from: this.account})改为<br>await voteForCandidate(this.web3.utils.fromAscii(candidateName), voteTokens).call({gas: 140000, from: this.account})，就不会出现上面的错误了。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web3.js调用合约方法报错“ Error Invalid number of parameters for &quot;voteForCandidate&quot;. Got 1 expected 2! ”</title>
      <link href="/hexoT.github.io/posts/29285.html"/>
      <url>/hexoT.github.io/posts/29285.html</url>
      
        <content type="html"><![CDATA[<p>web3.js调用合约方法报错“Error Invalid number of parameters for “voteForCandidate”. Got 1 expected 2!”.具体是这样的，web3js代码中调用智能合约中的函数，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const networkId = await this.web3.eth.net.getId();</span><br><span class="line">const deployedNetwork = votingArtifact.networks[networkId];</span><br><span class="line">this.voting = new this.web3.eth.Contract(</span><br><span class="line">      votingArtifact.abi,</span><br><span class="line">      deployedNetwork.address,</span><br><span class="line">    );</span><br><span class="line">const &#123; voteForCandidate, totalVotesFor &#125; = this.voting.methods;</span><br><span class="line">await voteForCandidate(this.web3.utils.fromAscii(candidateName)).call(&#123;gas: 140, from: this.account&#125;);</span><br></pre></td></tr></table></figure><p>其中voteForCandidate(candidateName)是智能合约vote.sol中的函数，其代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> voteForCandidate(bytes32 candidate, uint votesInTokens) public &#123;</span><br><span class="line">uint index = indexOfCandidate(candidate);</span><br><span class="line">require(index != uint(-1));</span><br><span class="line"></span><br><span class="line">// msg.sender gives us the address of the account/voter who is trying</span><br><span class="line">// to call this <span class="keyword">function</span></span><br><span class="line"><span class="keyword">if</span> (voterInfo[msg.sender].tokensUsedPerCandidate.length == 0) &#123;</span><br><span class="line">  <span class="keyword">for</span>(uint i = 0; i &lt; candidateList.length; i++) &#123;</span><br><span class="line">    voterInfo[msg.sender].tokensUsedPerCandidate.push(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>npm run dev运行DAPP后，在浏览器上报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Invalid number of parameters <span class="keyword">for</span> <span class="string">"voteForCandidate"</span>. Got 1 expected 2!</span><br></pre></td></tr></table></figure><p>看下报错，Got 1 expected 2!只得到1个，期望2个。我们再看看web3js中voteForCandidate(this.web3.utils.fromAscii(candidateName))，<br>而vote.sol中voteForCandidate(bytes32 candidate, uint votesInTokens)，这很明显web3js传入参数只有一个，<br>而合约中要求参数是2个，所以会引发错误。</p><p>现在我们在web3js中voteForCandidate(this.web3.utils.fromAscii(candidateName))增加漏了的参数，<br>这样voteForCandidate(this.web3.utils.fromAscii(candidateName), voteTokens)就不会报错了。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web3.js智能合约之methods</title>
      <link href="/hexoT.github.io/posts/60636.html"/>
      <url>/hexoT.github.io/posts/60636.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web3.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊send发送合约方法交易报错“error invalid number value”</title>
      <link href="/hexoT.github.io/posts/31577.html"/>
      <url>/hexoT.github.io/posts/31577.html</url>
      
        <content type="html"><![CDATA[<p>send - 发送合约方法交易时出现报错：“error: invalid number value”。</p><p>其中发送合约方法交易的具体代码是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buy().send(&#123;value: this.web3.utils.fromWei(price.toString()), from: this.account&#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(receipt)&#123;</span><br><span class="line">  web3.eth.getBalance(this.account, <span class="keyword">function</span>(error, result) &#123;</span><br><span class="line">      $(<span class="string">"#contract-balance"</span>).html(this.web3.utils.toWei(result.toString()) + <span class="string">" Ether"</span>);</span><br><span class="line">        console.log(this.web3.utils.toWei(result.toString()));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>具体报错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.js:43236 Uncaught (<span class="keyword">in</span> promise) Error: [number-to-bn] <span class="keyword">while</span> converting number <span class="string">"0.01"</span> to BN.js instance, error: invalid number value. Value must be an <span class="built_in">integer</span>, hex string, BN or BigNumber instance. Note, decimals are not supported.</span><br><span class="line">    at numberToBN (app.js:43236)</span><br><span class="line">    at Object.fromWei (app.js:84706)</span><br><span class="line">    at Object.fromWei (app.js:4914)</span><br><span class="line">    at Object.buyTokens (app.js:53602)</span><br></pre></td></tr></table></figure><p>“error: invalid number value”，无效的数值，可以看到问题是出现在数值，数值value处。<br>查阅web3.js官网手册可知，send() - 发送合约方法交易的参数value：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value - Number|String|BN|BigNumber: 可选，交易转账金额，单位：wei</span><br></pre></td></tr></table></figure><p>也就是value的值单位是wei，而我们代码value: this.web3.utils.fromWei(price.toString())，其作用是将单位wei转换为eth。<br>所以，我们将代码改为value: this.web3.utils.toWei(price.toString())，将单位eth转换为wei。</p><p>这样就不会报错了。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle部署以太网络报错“Error The network id specified in the truffle config (3) does not match”</title>
      <link href="/hexoT.github.io/posts/58544.html"/>
      <url>/hexoT.github.io/posts/58544.html</url>
      
        <content type="html"><![CDATA[<p>truffle migrate部署以太网络报错“Error: The network id specified in the truffle config (3) does not match”，部署的是–network ropsten，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> truffle migrate --network ropsten  --reset</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br><span class="line"></span><br><span class="line">Error: The network id specified <span class="keyword">in</span> the truffle config (3) does not match the one returned by the network (1596613920994).  Ensure that both the network and the provider are properly configured.</span><br><span class="line">    at Object.detectAndSetNetworkId (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/packages/environment/environment.js:97:1)</span><br><span class="line">    at processTicksAndRejections (internal/process/task_queues.js:97:5)</span><br><span class="line">    at Object.detect (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/packages/environment/environment.js:24:1)</span><br><span class="line">    at /home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/packages/core/lib/commands/migrate.js:193:1</span><br><span class="line">Truffle v5.1.27 (core: 5.1.27)</span><br><span class="line">Node v12.16.3</span><br></pre></td></tr></table></figure><p>可以看到，Error: The network id specified in the truffle config (3) does not match the one returned by the network (1596613920994)。 network id ，not match。network id不匹配，查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">      host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">      port: 8545,</span><br><span class="line">      gas: 6700000,</span><br><span class="line">      network_id: <span class="string">'*'</span> // Match any network id</span><br><span class="line">    &#125;,</span><br><span class="line">    ropsten: &#123;</span><br><span class="line">      host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">      port: 8545,</span><br><span class="line">      gas: 4700000,</span><br><span class="line">      network_id: <span class="string">'3'</span> // Match any network id</span><br><span class="line">    &#125;,</span><br><span class="line">    kovan: &#123;</span><br><span class="line">      host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">      port: 8545,</span><br><span class="line">      gas: 4700000,</span><br><span class="line">      network_id: <span class="string">'5'</span> // Match any network id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署是–network ropsten，现在我们将ropsten网络的network_id: ‘3’改为network_id: ‘*’，意思是适配一切network id。这样我们重新sudo truffle migrate –network ropsten  –reset就不会再出现错误了。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle对Web3合约的封装</title>
      <link href="/hexoT.github.io/posts/12139.html"/>
      <url>/hexoT.github.io/posts/12139.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>abi-evm</title>
      <link href="/hexoT.github.io/posts/29658.html"/>
      <url>/hexoT.github.io/posts/29658.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>以太坊合约contract结合web3js调用实例</title>
      <link href="/hexoT.github.io/posts/1353.html"/>
      <url>/hexoT.github.io/posts/1353.html</url>
      
        <content type="html"><![CDATA[<h2 id="Web3概述"><a href="#Web3概述" class="headerlink" title="Web3概述"></a>Web3概述</h2><p>*与合约交互，最常用的方式就是使用web3.js library提供的web3。<br>*底层实现上，它通过RPC调用与本地节点通信。<br>*web3.js可以与任何暴露了RPC接口的以太坊节点连接。</p><h2 id="Web3调用合约"><a href="#Web3调用合约" class="headerlink" title="Web3调用合约"></a>Web3调用合约</h2><p>*web3.js封装了合约调用的方法。<br>*使用可以直接使用web3.eth.contract的里的sendTransaction来修改区块链数据。<br>*调用合约，可能需要from等参数，否则可能出现调用异常。</p><h2 id="Web3初始化"><a href="#Web3初始化" class="headerlink" title="Web3初始化"></a>Web3初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Web3 from &quot;web3&quot;;</span><br></pre></td></tr></table></figure><h2 id="Web3常用API"><a href="#Web3常用API" class="headerlink" title="Web3常用API"></a>Web3常用API</h2><h3 id="web3-eth-contract，-创建一个Solidity的合约对象，用来在某个地址上初始化合约。"><a href="#web3-eth-contract，-创建一个Solidity的合约对象，用来在某个地址上初始化合约。" class="headerlink" title="web3.eth.contract， 创建一个Solidity的合约对象，用来在某个地址上初始化合约。"></a>web3.eth.contract， 创建一个Solidity的合约对象，用来在某个地址上初始化合约。</h3><p>*参数：Array，一到多个描述合约的参数，事件的API对象。<br>*返回值：Object，一个合约对象。<br>*示例：var MyContract = new web3.eth.Contract(abiArray);</p><h3 id="合约对象的方法"><a href="#合约对象的方法" class="headerlink" title="合约对象的方法"></a>合约对象的方法</h3><p>*显示对象call。myContract.methods.myMethod([param1[,param2[,…]]]).call(options[,callback]);(不修改数据)<br>*显示调用send。myContract.methods.myMethod([param1[,params[,…]]]).send(options[,callback]);(修改数据，消耗gas)</p><h3 id="web3-eth-account，以太坊账号"><a href="#web3-eth-account，以太坊账号" class="headerlink" title="web3.eth.account，以太坊账号"></a>web3.eth.account，以太坊账号</h3><p>*示例：web3.eth.getAccounts([callback])<br>web3.eth.getBalance(address[,defaultBlock] [,callback])</p><h3 id="web3-toWei"><a href="#web3-toWei" class="headerlink" title="web3.toWei"></a>web3.toWei</h3><p>*按对应货币转为以wei为单位。最常用的单位为ether。<br>示例：var value = web3.toWei(‘1’,‘ether’);<br>console.log(value); // “10000000000000000000”</p><h2 id="Web3调用合约的例子"><a href="#Web3调用合约的例子" class="headerlink" title="Web3调用合约的例子"></a>Web3调用合约的例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Web3 from &quot;web3&quot;;</span><br><span class="line">import Artifact from &#39;..&#x2F;..&#x2F;build&#x2F;contracts&#x2F;Voting.json&#39;</span><br><span class="line"></span><br><span class="line">const App &#x3D; &#123;</span><br><span class="line">web3: null,</span><br><span class="line"></span><br><span class="line"> Data: async function() &#123;</span><br><span class="line">     const networkId &#x3D; await web3.eth.net.getId();</span><br><span class="line">     const deployedNetwork &#x3D; Artifact.networks[networkId];</span><br><span class="line"></span><br><span class="line">     this.voting &#x3D; new web3.eth.Contract(</span><br><span class="line">        Artifact.abi,</span><br><span class="line">        deployedNetwork.address,</span><br><span class="line">      );</span><br><span class="line">  &#x2F;&#x2F;Web3调用合约实例</span><br><span class="line">  const &#123; totalTokens &#125; &#x3D; this.voting.methods;</span><br><span class="line">  &#x2F;&#x2F;应用合约里的totalTokens()函数</span><br><span class="line">  var tokenstotal &#x3D; await totalTokens().call();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，Web3调用合约实例 ： const { totalTokens } = this.voting.methods; 应用合约里的totalTokens()函数：<br>var tokenstotal = await totalTokens().call()。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web3 eth contract </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 web3.utils.toWei报错“Please pass numbers as strings or BN objects to avoid precision errors.”</title>
      <link href="/hexoT.github.io/posts/62905.html"/>
      <url>/hexoT.github.io/posts/62905.html</url>
      
        <content type="html"><![CDATA[<p>使用 web3.utils.toWei报错“Please pass numbers as strings or BN objects to avoid precision errors.”，具体如下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Please pass numbers as strings or BN objects to avoid precision errors.</span><br></pre></td></tr></table></figure><p>我们在调用合约方法时，都可以传一些参数的，比如转账金额 value。<br>value 的单位是 wei，这是一个很小的单位，所以一般数值很大。<br>所以，我们在使用web3.utils.toWei时，注意先把 ether 的值转成字符串，不然就会报出标题中的错误。</p><p>比如我们要将 0.1 ether 转 wei（其中this.inputEther的值是0.1 ether） ，应该这样使用 web3.utils.toWei(this.inputEther.toString(), ‘ether’)。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MetaMask报错response has no error or result for request</title>
      <link href="/hexoT.github.io/posts/62905.html"/>
      <url>/hexoT.github.io/posts/62905.html</url>
      
        <content type="html"><![CDATA[<p>部署合约后运行npm run dev，在浏览器控制台出现MetaMask - RPC Error: Error: JsonRpcEngine - response has no error or result for request，具体如下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MetaMask - RPC Error: Error: JsonRpcEngine - response has no error or result <span class="keyword">for</span> request:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</span><br><span class="line">  <span class="string">"id"</span>: 2359889513,</span><br><span class="line">  <span class="string">"method"</span>: <span class="string">"net_version"</span>,</span><br><span class="line">  <span class="string">"params"</span>: [],</span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"localhost"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看报错response has no error or result for request，请求的响应没有错误或结果，可以知道原因，没请求。</p><p>在本地根目录，重启ganache-cli之后报错就不会出现。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DAPP运行后页面报错[WDS] Disconnected! app.js:15441:9</title>
      <link href="/hexoT.github.io/posts/60572.html"/>
      <url>/hexoT.github.io/posts/60572.html</url>
      
        <content type="html"><![CDATA[<p>DAPP成功编译部署后，一直没报错，打开浏览器的Console，出现：<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[WDS] Disconnected! app.js:15441:9</span><br><span class="line"> close http://localhost:8080/app.js:15441</span><br><span class="line"> onclose http://localhost:8080/app.js:43214</span><br><span class="line"> dispatchEvent http://localhost:8080/app.js:29342</span><br><span class="line"> _close http://localhost:8080/app.js:30141</span><br></pre></td></tr></table></figure><br>[WDS] Disconnected!</p><h2 id="truffle-config-js"><a href="#truffle-config-js" class="headerlink" title="truffle-config.js"></a>truffle-config.js</h2><p>其中，truffle-config.js配置是：<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> module.exports = &#123;</span><br><span class="line">networks: &#123;</span><br><span class="line">  development: &#123;</span><br><span class="line">    host: 'localhost',</span><br><span class="line">    port: 8545,</span><br><span class="line">    gas: 6700000,</span><br><span class="line">    network_id: '*' // Match any network id</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h2 id="修改truffle-config-js"><a href="#修改truffle-config-js" class="headerlink" title="修改truffle-config.js"></a>修改truffle-config.js</h2><p>网上查说是主要因为项目使用了代理服务软件解析问题，将host: ‘localhost’改为host: ‘127.0.0.1’就可以解决此问题。<br>修改后直接刷新页面就不会再报[WDS] Disconnected!的错误了。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle.js中使用babel-register</title>
      <link href="/hexoT.github.io/posts/17760.html"/>
      <url>/hexoT.github.io/posts/17760.html</url>
      
        <content type="html"><![CDATA[<h2 id="Babel-是什么"><a href="#Babel-是什么" class="headerlink" title="Babel 是什么?"></a>Babel 是什么?</h2><p>Babel 是一个 JavaScript 编译器,主要用于将 ECMAScript 2015+ 版本的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。下面列出的是 Babel 能为你做的事情：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*语法转换</span><br><span class="line">*通过 Polyfill 方式在目标环境中添加缺失的特性 (通过 @babel/polyfill 模块)</span><br><span class="line">*源码转换 (codemods)</span><br></pre></td></tr></table></figure><h2 id="babel-register"><a href="#babel-register" class="headerlink" title="babel-register"></a>babel-register</h2><p>使用 Babel 的方法是通过 require 钩子。 require 钩子会将自己绑定到 node 的 require 上并自动编译文件。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install babel-register --save-dev</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>在truffle.js中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ require(<span class="string">"babel-register"</span>);</span><br></pre></td></tr></table></figure><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>通过 node 引入的带 .es6, .es, .jsx 和 .js 后缀的所有后续文件都将会被 Babel 转译。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> truffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle migrate时报错&quot;Could not connect to your Ethereum client&quot;</title>
      <link href="/hexoT.github.io/posts/20102.html"/>
      <url>/hexoT.github.io/posts/20102.html</url>
      
        <content type="html"><![CDATA[<p>使用truffle框架编译solidity智能合约时，出现报错”Could not connect to your Ethereum client”。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ truffle migrate --network develop</span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br><span class="line"></span><br><span class="line">&gt; Something went wrong <span class="keyword">while</span> attempting to connect to the network. Check your network configuration.</span><br><span class="line"></span><br><span class="line">Could not connect to your Ethereum client with the following parameters:</span><br><span class="line">    - host       &gt; 127.0.0.1</span><br><span class="line">    - port       &gt; 7545</span><br><span class="line">    - network_id &gt; 5777</span><br><span class="line">Please check that your Ethereum client:</span><br><span class="line">    - is running</span><br><span class="line">    - is accepting RPC connections (i.e., <span class="string">"--rpc"</span> option is used <span class="keyword">in</span> geth)</span><br><span class="line">    - is accessible over the network</span><br><span class="line">    - is properly configured <span class="keyword">in</span> your Truffle configuration file (truffle-config.js)</span><br><span class="line"></span><br><span class="line">Truffle v5.1.27 (core: 5.1.27)</span><br><span class="line">Node v12.16.3</span><br></pre></td></tr></table></figure><p>其中，是已经打开ganache-cli的，按道理是Ethereum client以太服务器已经打开。看一下上面有一句：Everything is up to date, there is nothing to compile 意思是已经没东西更新了。</p><p>这就明白了，原来代码更新了无法重新编译。于是启用命令sudo truffle migrate –network develop  –reset ,强制重新编译:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ sudo truffle migrate --network develop  --reset</span><br><span class="line">[sudo] password <span class="keyword">for</span> dexter: </span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line">&gt; Network name:    <span class="string">'develop'</span></span><br><span class="line">&gt; Network id:      1595490216226</span><br><span class="line">&gt; Block gas <span class="built_in">limit</span>: 6721975 (0x6691b7)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Migrations'</span></span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; transaction <span class="built_in">hash</span>:    0x5118de6fe50deaba18665e4253e1e1cf6888417f68537d0761be5b3d86f425d6</span><br><span class="line">   &gt; Blocks: 0            Seconds: 0</span><br><span class="line">   &gt; contract address:    0xbEAe2c1d35d465B4B9DB156a2679EFE8128dC03e</span><br><span class="line">   &gt; block number:        1</span><br><span class="line">   &gt; block timestamp:     1595490251</span><br><span class="line">   &gt; account:             0xc3F946CDb146749a65Bc7C3d52690Cd504Ca08Be</span><br><span class="line">   &gt; balance:             99.99671218</span><br><span class="line">   &gt; gas used:            164391 (0x28227)</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00328782 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00328782 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_deploy_contracts.js</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Voting'</span></span><br><span class="line">   ------------------</span><br><span class="line">   &gt; transaction <span class="built_in">hash</span>:    0xd9c6dbb0e1d022d0b8ed7727e3b7d8e1dcabe9537829e761af3c72f6ba02e290</span><br><span class="line">   &gt; Blocks: 0            Seconds: 0</span><br><span class="line">   &gt; contract address:    0x8660A777fC7b1D61F49B18232833fD76fb1ADc3c</span><br><span class="line">   &gt; block number:        3</span><br><span class="line">   &gt; block timestamp:     1595490252</span><br><span class="line">   &gt; account:             0xc3F946CDb146749a65Bc7C3d52690Cd504Ca08Be</span><br><span class="line">   &gt; balance:             99.99001174</span><br><span class="line">   &gt; gas used:            292681 (0x47749)</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00585362 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00585362 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line">&gt; Total deployments:   2</span><br><span class="line">&gt; Final cost:          0.00914144 ETH</span><br></pre></td></tr></table></figure><p>这样就不会报错了。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solidity访问当前合约函数的方式</title>
      <link href="/hexoT.github.io/posts/21223.html"/>
      <url>/hexoT.github.io/posts/21223.html</url>
      
        <content type="html"><![CDATA[<p>solidity访问当前合约的函数,有2种方式。一种是直接用函数名f,此方法用于内部函数;一种是this.f， 此方法用于外部函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.0;</span><br><span class="line"></span><br><span class="line">contract funcTest&#123;</span><br><span class="line">    function f() internal&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;以&#96;internal&#96;的方式调用</span><br><span class="line">    function callInternally()&#123;</span><br><span class="line">        f();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;以&#96;external&#96;的方式调用</span><br><span class="line">    function callExternally()&#123;</span><br><span class="line">        this.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="直接用函数名f"><a href="#直接用函数名f" class="headerlink" title="直接用函数名f"></a>直接用函数名f</h2><p>直接用函数名f的方式,调用内部internal函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;以&#96;internal&#96;的方式调用</span><br><span class="line">function callInternally()&#123;</span><br><span class="line">    f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this-f"><a href="#this-f" class="headerlink" title="this.f"></a>this.f</h2><p>用this.f方式,调用外部external函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;以&#96;external&#96;的方式调用</span><br><span class="line">function callExternally()&#123;</span><br><span class="line">    this.f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Solidity 0.5中的address和address payable</title>
      <link href="/hexoT.github.io/posts/57575.html"/>
      <url>/hexoT.github.io/posts/57575.html</url>
      
        <content type="html"><![CDATA[<p>solidity 0.5将地址类型细分为address和address payable。<br>其目的在于，强制智能合约开发人员认真考虑一个地址是否应当接收以太币，如果该地址根本不需要接收以太币，那么就应当使用address类型。当地址被声明为address类型后，如果开发者试图向该地址转入以太币，就会导致编译时类型错误。如果该地址需要接收以太币，那么就应当使用address payable类型。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>address payable和address类型的变量都表示以太坊地址，都可以使用底层的.call()方法。<br>address payable表示可用于支付的地址，因此可以使用.transfer()和.send()方法，但是address类型的变量则不能使用这些方法。如果使用了，会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: <span class="string">"send"</span> and <span class="string">"transfer"</span> are only available <span class="keyword">for</span> objects of <span class="built_in">type</span> <span class="string">"address payable"</span>, not <span class="string">"address"</span>.</span><br></pre></td></tr></table></figure><h2 id="address和address-payable之间的转换"><a href="#address和address-payable之间的转换" class="headerlink" title="address和address payable之间的转换"></a>address和address payable之间的转换</h2><h3 id="address-payable转换为address"><a href="#address-payable转换为address" class="headerlink" title="address payable转换为address"></a>address payable转换为address</h3><p>address payable类型的变量可以显式或隐式地转换为address类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">address payable addr1 = msg.sender;</span><br><span class="line">address addr2 = addr1; // 隐式转换</span><br><span class="line">address addr3 = address(addr1); // 显式转换</span><br></pre></td></tr></table></figure><h3 id="address转换为address-payable"><a href="#address转换为address-payable" class="headerlink" title="address转换为address payable"></a>address转换为address payable</h3><p>address类型的变量只能显式地转换为address payable，需要首先转换为整数类型（例如uint160），然后再将该整型值转换为address类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">address addr1 = msg.sender;</span><br><span class="line">address payable addr3 = address(uint160(addr1)); // 正确，先转换为uint160，然后转换为address payable</span><br></pre></td></tr></table></figure><h2 id="solidity内置的变量类型"><a href="#solidity内置的变量类型" class="headerlink" title="solidity内置的变量类型"></a>solidity内置的变量类型</h2><p>在Solidity的内置变量中，以下几个变量的类型都是address payable：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*msg.sender</span><br><span class="line">*block.coinbase</span><br><span class="line">*tx.origin</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack中引入style-loader和css-loader</title>
      <link href="/hexoT.github.io/posts/34965.html"/>
      <url>/hexoT.github.io/posts/34965.html</url>
      
        <content type="html"><![CDATA[<p>webpack是用JavaScript写的，运行在node环境，所以默认webpack打包的时候只会处理JavaScript之间的依赖关系。<br>因为像 &lt; style &gt; 标签、 .css 这样的文件不是一个 JavaScript 模块，你需要配置 webpack 使用  style-loader 和css-loader 去处理它们。</p><h2 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h2><p>style-loader 的功能就是在 DOM 里插入一个 &lt; style &gt; 标签，并且将 css 写入这个标签内。</p><h2 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h2><p>css-loader 的功能就是让webpack打包的时候可以加载.css 文件。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先得先安装style-loader、css-loader模块。在项目根目录输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm install style-loader --save-dev</span><br><span class="line">+ style-loader@0.13.2</span><br><span class="line">added 1 package from 1 contributor <span class="keyword">in</span> 6.271s</span><br><span class="line"></span><br><span class="line">23 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  run `npm fund` <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm install css-loader --save-dev</span><br><span class="line">+ css-loader@0.26.4</span><br><span class="line">added 110 packages from 214 contributors <span class="keyword">in</span> 24.178s</span><br><span class="line"></span><br><span class="line">24 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  run `npm fund` <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><p>然后就是在 webpack.config.js 中使用style-loader和css-loader，use: [ ‘style-loader’, ‘css-loader’ ]如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">       <span class="built_in">test</span>: /\.css$/,</span><br><span class="line">       use: [ <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们就可以在webpack中加载&lt; style &gt;标签、 .css 这样的文件。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用webpack-dev-server实时渲染前端</title>
      <link href="/hexoT.github.io/posts/37089.html"/>
      <url>/hexoT.github.io/posts/37089.html</url>
      
        <content type="html"><![CDATA[<h2 id="webpack-dev-server概念"><a href="#webpack-dev-server概念" class="headerlink" title="webpack-dev-server概念"></a>webpack-dev-server概念</h2><p>Webpack-dev-server,一个轻量的node.js express服务器。 它会使用当前的路径作为请求的资源路径，使用 当前目录下的资源来处理静态资源的请求，如javascript、 css/ 图片等。</p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>Webpack是一个模块加载器，这里所谓模块其实就是项目中用到javascript、coffeescript、css、less、jsx以及图片等等资源，Webpack采用不同的loader将这些资源加载后打包，然后输出打包后的文件，打包后的文件可以是一个或多个js文件，也可以根据需要分别打包，比如将所有css文件单独输出。在webpack.config.js中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const path &#x3D; require(&quot;path&quot;);</span><br><span class="line">const CopyWebpackPlugin &#x3D; require(&quot;copy-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  mode: &#39;development&#39;,</span><br><span class="line">  entry: &quot;.&#x2F;src&#x2F;index.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &quot;index.js&quot;,</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new CopyWebpackPlugin([&#123; from: &quot;.&#x2F;src&#x2F;index.html&quot;, to: &quot;index.html&quot; &#125;]),</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123; contentBase: path.join(__dirname, &quot;dist&quot;), compress: true &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>entry: 为需要打包的资源，output:为需要输出的资源，path: path.resolve(__dirname, “dist”)设置输出路径为dist文件夹下。</p><h2 id="实时渲染前端"><a href="#实时渲染前端" class="headerlink" title="实时渲染前端"></a>实时渲染前端</h2><p>Webpack有一个很实用的功能叫做热替换（Hot-replace），开发过程中都不需要刷新浏览器，任何前端代码的更改都会实时的在浏览器中表现出来，这需要安装Webpack-dev-server才能实现此功能。首先我们得先安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install webpack</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><p>安装之后就可以任何前端代码的更改都会实时渲染前端。</p><p>在package.json中配置”scripts”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;app&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;copy-webpack-plugin&quot;: &quot;^5.0.5&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^4.41.2&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.3.10&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^3.9.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;web3&quot;: &quot;^1.2.4&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入命令npm run build，启动后端服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line">&gt; app@1.0.0 build &#x2F;home&#x2F;dexter&#x2F;chapter2&#x2F;app</span><br><span class="line">&gt; webpack</span><br><span class="line"></span><br><span class="line">Hash: 9bdecb5cc749ae50c065</span><br><span class="line">Version: webpack 4.41.2</span><br><span class="line">Time: 12830ms</span><br><span class="line">Built at: 07&#x2F;23&#x2F;2020 8:53:34 PM</span><br><span class="line">     Asset      Size  Chunks             Chunk Names</span><br><span class="line">index.html  1.09 KiB          [emitted]  </span><br><span class="line">  index.js  2.14 MiB    main  [emitted]  main</span><br><span class="line">Entrypoint main &#x3D; index.js</span><br><span class="line">[0] buffer (ignored) 15 bytes &#123;main&#125; [optional] [built]</span><br><span class="line">[1] util (ignored) 15 bytes &#123;main&#125; [built]</span><br><span class="line">[2] util (ignored) 15 bytes &#123;main&#125; [built]</span><br><span class="line">[3] crypto (ignored) 15 bytes &#123;main&#125; [optional] [built]</span><br><span class="line">[..&#x2F;build&#x2F;contracts&#x2F;Voting.json] 93.6 KiB &#123;main&#125; [built]</span><br><span class="line">[.&#x2F;node_modules&#x2F;webpack&#x2F;buildin&#x2F;amd-options.js] (webpack)&#x2F;buildin&#x2F;amd-options.js 80 bytes &#123;main&#125; [built]</span><br><span class="line">[.&#x2F;node_modules&#x2F;webpack&#x2F;buildin&#x2F;global.js] (webpack)&#x2F;buildin&#x2F;global.js 472 bytes &#123;main&#125; [built]</span><br><span class="line">[.&#x2F;node_modules&#x2F;webpack&#x2F;buildin&#x2F;module.js] (webpack)&#x2F;buildin&#x2F;module.js 497 bytes &#123;main&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;index.js] 2.8 KiB &#123;main&#125; [built]</span><br><span class="line">    + 333 hidden modules</span><br></pre></td></tr></table></figure><p>输入命令npm run dev，启用实时渲染前端功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install dev</span><br></pre></td></tr></table></figure><p>这样就可以实现更改任何前端代码都会实时渲染前端。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>npm的脚本命令</title>
      <link href="/hexoT.github.io/posts/10235.html"/>
      <url>/hexoT.github.io/posts/10235.html</url>
      
        <content type="html"><![CDATA[<h2 id="npm脚本"><a href="#npm脚本" class="headerlink" title="npm脚本"></a>npm脚本</h2><p>首先要理解的是npm脚本，npm脚本其实在package.json文件里面，使用scripts字段定义的脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"node index.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>{…}里面的scripts字段是一个对象。它的每一个属性，对应一段脚本。比如，start命令对应的脚本是./node_modules/.bin/testrpc。</p><h2 id="npm脚本命令"><a href="#npm脚本命令" class="headerlink" title="npm脚本命令"></a>npm脚本命令</h2><p>我们在项目的根目录下输入npm run start:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run start</span><br></pre></td></tr></table></figure><p>其中npm run start就是npm脚本命令,其作用就是执行start这个脚本。<br>其实等同于执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node index.js</span><br></pre></td></tr></table></figure><p>查看当前项目的所有 npm 脚本命令，可以使用不带任何参数的npm run命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle合约迁移的懒编译</title>
      <link href="/hexoT.github.io/posts/52968.html"/>
      <url>/hexoT.github.io/posts/52968.html</url>
      
        <content type="html"><![CDATA[<h2 id="Lazy-Compilation懒编译"><a href="#Lazy-Compilation懒编译" class="headerlink" title="Lazy Compilation懒编译"></a>Lazy Compilation懒编译</h2><p>truffle migrate如果发现已经发布过，且发布的版本号没有变化就不会再发布。</p><h2 id="强制重编译"><a href="#强制重编译" class="headerlink" title="强制重编译"></a>强制重编译</h2><p>我们要想编译更新后的合约，那么可以给它强制重新编译。使用truffle migrate –reset：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle migrate --reset</span><br></pre></td></tr></table></figure><p>运行truffle migrate前，需要确认本地节点处于运行状态。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> truffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web3js使用实例</title>
      <link href="/hexoT.github.io/posts/2268.html"/>
      <url>/hexoT.github.io/posts/2268.html</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>由于我们使用Node来集成web3.js模块，所以使用前确保安装有nodejs。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v12.16.3</span><br></pre></td></tr></table></figure><p>由于使用web3js需要一个虚拟机环境，所以在开始之前，我们要安装一个实现了以太坊虚拟机的节点。推荐轻量级的节点，ganache-cli。安装可以参考：<a href="https://dextertam008.github.io/hexoT.github.io/posts/42010.html">ubuntu环境下ganace-cli的安装</a>。<br>安装ganache-cli后我们就有了RPC API调用开发环境，就可以使用web3.js。</p><h2 id="启动ganache-cli"><a href="#启动ganache-cli" class="headerlink" title="启动ganache-cli"></a>启动ganache-cli</h2><p>启动ganache-cli：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$ ganache-cli</span><br><span class="line">Ganache CLI v6.9.1 (ganache-core: 2.10.2)</span><br><span class="line"></span><br><span class="line">Available Accounts</span><br><span class="line">==================</span><br><span class="line">(0) 0xe436f6A09d8D6FeE057277D94Bf01ECDf59Cc8Ad (100 ETH)</span><br><span class="line">(1) 0xF6D4fA54894A790277C36af5C6D9FdB7fFdf01c8 (100 ETH)</span><br><span class="line">(2) 0xa940C1Ef1853E04dd6A408fCc40393c6fC0085E9 (100 ETH)</span><br><span class="line">(3) 0x0618b37E1AF63b711B9803Ff88565b7b458B67C5 (100 ETH)</span><br><span class="line">(4) 0xb110cC194264445b175a4f10DEC65A03c5e15181 (100 ETH)</span><br><span class="line">(5) 0x0e4397A10594C4B70e18acA0331Bf11ad203d078 (100 ETH)</span><br><span class="line">(6) 0x1b2C04F67059830d7b3B27F0B1A110c3C482A53E (100 ETH)</span><br><span class="line">(7) 0xB02e2ccCD0fc2f3aD2f68753CC367678B176CC8c (100 ETH)</span><br><span class="line">(8) 0x13c973439Efc4cB6E7Fa63BEF63FC62349c76BD0 (100 ETH)</span><br><span class="line">(9) 0x7319f67d9396A6634F30A8d6AeCfE23E115Be05F (100 ETH)</span><br><span class="line"></span><br><span class="line">Private Keys</span><br><span class="line">==================</span><br><span class="line">(0) 0xc6d15fef4fb87ccb43bd7560e7e424b08545a4c881882c596fe7a58c0897e62f</span><br><span class="line">(1) 0x1e842805c95e8333caebc60b7921e56ca4760503b411a3f44a2611913622f5f8</span><br><span class="line">(2) 0xa69f26ecc1a30d950ea30b6ccdfa8d5473aafc3d363db6d12c8383192dab88c2</span><br><span class="line">(3) 0x34b3355b0ffe2ce64e464170e9690ad7a1e2339d80fabeeeef01f255726983c2</span><br><span class="line">(4) 0xeea5899f4c3242dd547b8e912406c8b081a13454d004f3f9b855f7220e3dc2a7</span><br><span class="line">(5) 0x31871507f762de69f76c675d86943c88b53ffa283cb3bf1577c2b316a9e4f1a4</span><br><span class="line">(6) 0xd01a71e00fdc657378fd2c7c17606cc4bd923c6393d81c2d2f06ff6b4ba5c1e6</span><br><span class="line">(7) 0x392d3bd92caa06ade18d5bd5d829718f317e8c76206998ccf2667cfb980352b6</span><br><span class="line">(8) 0xfc9d31d505ce1a0e6377f51db0f76bd539e39457b47ae98eb550ff18206d8670</span><br><span class="line">(9) 0x71e04fe2aa2b15e01bd42963af317bc4e62cfa836616b077d9193944a074e0fb</span><br><span class="line"></span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      foam upper act second damp useless gossip pluck unable crucial focus teach</span><br><span class="line">Base HD Path:  m/44<span class="string">'/60'</span>/0<span class="string">'/0/&#123;account_index&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gas Price</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">20000000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gas Limit</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">6721975</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Call Gas Limit</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">9007199254740991</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Listening on 127.0.0.1:8545</span></span><br></pre></td></tr></table></figure><h2 id="打开控制台开始使用web3js"><a href="#打开控制台开始使用web3js" class="headerlink" title="打开控制台开始使用web3js"></a>打开控制台开始使用web3js</h2><p>打开另外一个终端，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ geth attach http://localhost:8545</span><br><span class="line">Welcome to the Geth JavaScript console!</span><br><span class="line"></span><br><span class="line">instance: EthereumJS TestRPC/v2.10.2/ethereum-js</span><br><span class="line">coinbase: 0xe436f6a09d8d6fee057277d94bf01ecdf59cc8ad</span><br><span class="line">at block: 0 (Tue Jul 21 2020 21:49:31 GMT-0400 (EDT))</span><br><span class="line"> modules: eth:1.0 evm:1.0 net:1.0 personal:1.0 rpc:1.0 web3:1.0</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在控制台上输入web3.version.api:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; web3.version.api</span><br><span class="line"><span class="string">"0.20.1"</span></span><br></pre></td></tr></table></figure><p>返回以太坊js的api版本</p><p>在控制台上输入web3.eth.accounts:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; web3.eth.accounts</span><br><span class="line">[<span class="string">"0xe436f6a09d8d6fee057277d94bf01ecdf59cc8ad"</span>, <span class="string">"0xf6d4fa54894a790277c36af5c6d9fdb7ffdf01c8"</span>, <span class="string">"0xa940c1ef1853e04dd6a408fcc40393c6fc0085e9"</span>, <span class="string">"0x0618b37e1af63b711b9803ff88565b7b458b67c5"</span>, <span class="string">"0xb110cc194264445b175a4f10dec65a03c5e15181"</span>, <span class="string">"0x0e4397a10594c4b70e18aca0331bf11ad203d078"</span>, <span class="string">"0x1b2c04f67059830d7b3b27f0b1a110c3c482a53e"</span>, <span class="string">"0xb02e2cccd0fc2f3ad2f68753cc367678b176cc8c"</span>, <span class="string">"0x13c973439efc4cb6e7fa63bef63fc62349c76bd0"</span>, <span class="string">"0x7319f67d9396a6634f30a8d6aecfe23e115be05f"</span>]</span><br></pre></td></tr></table></figure><p>返回当前节点持有的帐户列表。</p><h2 id="新建js使用node"><a href="#新建js使用node" class="headerlink" title="新建js使用node"></a>新建js使用node</h2><p>新建一文件夹web3-test，文件夹里新建getWeb3.js，写上代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var Web3 = require(<span class="string">'web3'</span>);</span><br><span class="line"></span><br><span class="line">var web3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (typeof web3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    web3 = new Web3(web3.currentProvider);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    // <span class="built_in">set</span> the provider you want from Web3.providers</span><br><span class="line">    web3 = new Web3(new Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">module.exports = web3;</span><br></pre></td></tr></table></figure><p>然后在文件夹下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install web3</span><br></pre></td></tr></table></figure><p>这样就可以获得web3实例.<br>然后在文件夹下新建demo1.js，写上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var web3 &#x3D; require(&#39;.&#x2F;getWeb3&#39;);</span><br><span class="line"></span><br><span class="line">var account &#x3D; web3.eth.accounts;</span><br><span class="line">console.log(account);</span><br></pre></td></tr></table></figure><p>然后在文件夹下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">$ node demo1.js </span><br><span class="line">Accounts &#123;</span><br><span class="line">  currentProvider: [Getter/Setter],</span><br><span class="line">  _requestManager: RequestManager &#123;</span><br><span class="line">    provider: HttpProvider &#123;</span><br><span class="line">      withCredentials: <span class="literal">false</span>,</span><br><span class="line">      timeout: 0,</span><br><span class="line">      headers: undefined,</span><br><span class="line">      agent: undefined,</span><br><span class="line">      connected: <span class="literal">false</span>,</span><br><span class="line">      host: <span class="string">'http://localhost:8545'</span>,</span><br><span class="line">      httpAgent: [Agent]</span><br><span class="line">    &#125;,</span><br><span class="line">    providers: &#123;</span><br><span class="line">      WebsocketProvider: [Function: WebsocketProvider],</span><br><span class="line">      HttpProvider: [Function: HttpProvider],</span><br><span class="line">      IpcProvider: [Function: IpcProvider]</span><br><span class="line">    &#125;,</span><br><span class="line">    subscriptions: Map &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  givenProvider: null,</span><br><span class="line">  providers: &#123;</span><br><span class="line">    WebsocketProvider: [Function: WebsocketProvider],</span><br><span class="line">    HttpProvider: [Function: HttpProvider],</span><br><span class="line">    IpcProvider: [Function: IpcProvider]</span><br><span class="line">  &#125;,</span><br><span class="line">  _provider: HttpProvider &#123;</span><br><span class="line">    withCredentials: <span class="literal">false</span>,</span><br><span class="line">    timeout: 0,</span><br><span class="line">    headers: undefined,</span><br><span class="line">    agent: undefined,</span><br><span class="line">    connected: <span class="literal">false</span>,</span><br><span class="line">    host: <span class="string">'http://localhost:8545'</span>,</span><br><span class="line">    httpAgent: Agent &#123;</span><br><span class="line">      _events: [Object: null prototype],</span><br><span class="line">      _eventsCount: 2,</span><br><span class="line">      _maxListeners: undefined,</span><br><span class="line">      defaultPort: 80,</span><br><span class="line">      protocol: <span class="string">'http:'</span>,</span><br><span class="line">      options: [Object],</span><br><span class="line">      requests: &#123;&#125;,</span><br><span class="line">      sockets: &#123;&#125;,</span><br><span class="line">      freeSockets: &#123;&#125;,</span><br><span class="line">      keepAliveMsecs: 1000,</span><br><span class="line">      keepAlive: <span class="literal">true</span>,</span><br><span class="line">      maxSockets: Infinity,</span><br><span class="line">      maxFreeSockets: 256,</span><br><span class="line">      [Symbol(kCapture)]: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  setProvider: [Function],</span><br><span class="line">  setRequestManager: [Function],</span><br><span class="line">  _ethereumCall: &#123;</span><br><span class="line">    getNetworkId: [Function: send] &#123;</span><br><span class="line">      method: [Method],</span><br><span class="line">      request: [Function: bound ],</span><br><span class="line">      call: <span class="string">'net_version'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getChainId: [Function: send] &#123;</span><br><span class="line">      method: [Method],</span><br><span class="line">      request: [Function: bound ],</span><br><span class="line">      call: <span class="string">'eth_chainId'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getGasPrice: [Function: send] &#123;</span><br><span class="line">      method: [Method],</span><br><span class="line">      request: [Function: bound ],</span><br><span class="line">      call: <span class="string">'eth_gasPrice'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getTransactionCount: [Function: send] &#123;</span><br><span class="line">      method: [Method],</span><br><span class="line">      request: [Function: bound ],</span><br><span class="line">      call: <span class="string">'eth_getTransactionCount'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  wallet: Wallet &#123;</span><br><span class="line">    _accounts: [Circular],</span><br><span class="line">    length: 0,</span><br><span class="line">    defaultKeyName: <span class="string">'web3js_wallet'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入群<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>可领代码。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web3js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DAPP领养臭狗前端代码分析</title>
      <link href="/hexoT.github.io/posts/15819.html"/>
      <url>/hexoT.github.io/posts/15819.html</url>
      
        <content type="html"><![CDATA[<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><p>编写前端界面，在项目根目录下新建src文件夹，在文件夹中新建index.html，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">    &lt;!-- The above 3 meta tags *must* come first <span class="keyword">in</span> the head; any other head content must come *after* these tags --&gt;</span><br><span class="line">    &lt;title&gt;领 养 臭 狗&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">"css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- HTML5 shim and Respond.js <span class="keyword">for</span> IE8 support of HTML5 elements and media queries --&gt;</span><br><span class="line">    &lt;!-- WARNING: Respond.js doesn<span class="string">'t work if you view the page via file:// --&gt;</span></span><br><span class="line"><span class="string">    &lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="string">      &lt;script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">      &lt;script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;![endif]--&gt;</span></span><br><span class="line"><span class="string">  &lt;/head&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="container"&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="row"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="col-xs-12 col-sm-8 col-sm-push-2"&gt;</span></span><br><span class="line"><span class="string">          &lt;h1 class="text-center"&gt;领 养 臭 狗&lt;/h1&gt;</span></span><br><span class="line"><span class="string">          &lt;hr/&gt;</span></span><br><span class="line"><span class="string">          &lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;div id="petsRow" class="row"&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- PETS LOAD HERE --&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;div id="petTemplate" style="display: none;"&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="col-sm-6 col-md-4 col-lg-3"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="panel panel-default panel-pet"&gt;</span></span><br><span class="line"><span class="string">          &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">            &lt;h3 class="panel-title"&gt;Scrappy&lt;/h3&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">          &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">            &lt;img alt="140x140" data-src="holder.js/140x140" class="img-rounded img-center" style="width: 100%;" src="https://animalso.com/wp-content/uploads/2017/01/Golden-Retriever_6.jpg" data-holder-rendered="true"&gt;</span></span><br><span class="line"><span class="string">            &lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">            &lt;strong&gt;品种&lt;/strong&gt;: &lt;span class="pet-breed"&gt;Golden Retriever&lt;/span&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">            &lt;strong&gt;年龄&lt;/strong&gt;: &lt;span class="pet-age"&gt;3&lt;/span&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">            &lt;strong&gt;住址&lt;/strong&gt;: &lt;span class="pet-location"&gt;Warren, MI&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">            &lt;button class="btn btn-default btn-adopt" type="button" data-id="0"&gt;领养&lt;/button&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;!-- jQuery (necessary for Bootstrap'</span>s JavaScript plugins) --&gt;</span><br><span class="line">    &lt;script src=<span class="string">"http://libs.baidu.com/jquery/2.0.0/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/bootstrap.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/web3.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/truffle-contract.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/app.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h2><p>在src文件夹下新建一js文件夹，在js文件夹新建app.js，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">App &#x3D; &#123;</span><br><span class="line">  web3Provider: null,</span><br><span class="line">  contracts: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  init: async function() &#123;</span><br><span class="line">    &#x2F;&#x2F; Load pets.</span><br><span class="line">    $.getJSON(&#39;..&#x2F;pets.json&#39;, function(data) &#123;</span><br><span class="line">      var petsRow &#x3D; $(&#39;#petsRow&#39;);</span><br><span class="line">      var petTemplate &#x3D; $(&#39;#petTemplate&#39;);</span><br><span class="line"></span><br><span class="line">      for (i &#x3D; 0; i &lt; data.length; i ++) &#123;</span><br><span class="line">        petTemplate.find(&#39;.panel-title&#39;).text(data[i].name);</span><br><span class="line">        petTemplate.find(&#39;img&#39;).attr(&#39;src&#39;, data[i].picture);</span><br><span class="line">        petTemplate.find(&#39;.pet-breed&#39;).text(data[i].breed);</span><br><span class="line">        petTemplate.find(&#39;.pet-age&#39;).text(data[i].age);</span><br><span class="line">        petTemplate.find(&#39;.pet-location&#39;).text(data[i].location);</span><br><span class="line">        petTemplate.find(&#39;.btn-adopt&#39;).attr(&#39;data-id&#39;, data[i].id);</span><br><span class="line"></span><br><span class="line">        petsRow.append(petTemplate.html());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return await App.initWeb3();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  initWeb3: async function() &#123;</span><br><span class="line">        &#x2F;&#x2F; Modern dapp browsers...</span><br><span class="line">    if (window.ethereum) &#123;</span><br><span class="line">      App.web3Provider &#x3D; window.ethereum;</span><br><span class="line">      try &#123;</span><br><span class="line">        &#x2F;&#x2F; Request account access</span><br><span class="line">        await window.ethereum.enable();</span><br><span class="line">      &#125; catch (error) &#123;</span><br><span class="line">        &#x2F;&#x2F; User denied account access...</span><br><span class="line">        console.error(&quot;User denied account access&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; Legacy dapp browsers...</span><br><span class="line">    else if (window.web3) &#123;</span><br><span class="line">      App.web3Provider &#x3D; window.web3.currentProvider;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; If no injected web3 instance is detected, fall back to Ganache</span><br><span class="line">    else &#123;</span><br><span class="line">      App.web3Provider &#x3D; new Web3.providers.HttpProvider(&#39;http:&#x2F;&#x2F;localhost:8545&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    web3 &#x3D; new Web3(App.web3Provider);</span><br><span class="line"></span><br><span class="line">    return App.initContract();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  initContract: function() &#123;</span><br><span class="line">    &#x2F;&#x2F; 加载Adoption.json，保存了Adoption的ABI（接口说明）信息及部署后的网络(地址)信息，它在编译合约的时候生成   ABI，在部署的时候追加网络信息</span><br><span class="line">  $.getJSON(&#39;Adoption.json&#39;, function(data) &#123;</span><br><span class="line">    &#x2F;&#x2F; 用Adoption.json数据创建一个可交互的TruffleContract合约实例。</span><br><span class="line">    var AdoptionArtifact &#x3D; data;</span><br><span class="line">    App.contracts.Adoption &#x3D; TruffleContract(AdoptionArtifact);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Set the provider for our contract</span><br><span class="line">    App.contracts.Adoption.setProvider(App.web3Provider);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Use our contract to retrieve and mark the adopted pets</span><br><span class="line">    return App.markAdopted();</span><br><span class="line">  &#125;);</span><br><span class="line">  return App.bindEvents();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  bindEvents: function() &#123;</span><br><span class="line">    $(document).on(&#39;click&#39;, &#39;.btn-adopt&#39;, App.handleAdopt);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  markAdopted: function(adopters, account) &#123;</span><br><span class="line">        var adoptionInstance;</span><br><span class="line"></span><br><span class="line">    App.contracts.Adoption.deployed().then(function(instance) &#123;</span><br><span class="line">      adoptionInstance &#x3D; instance;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 调用合约的getAdopters(), 用call读取信息不用消耗gas</span><br><span class="line">      return adoptionInstance.getAdopters.call();</span><br><span class="line">    &#125;).then(function(adopters) &#123;</span><br><span class="line">      for (i &#x3D; 0; i &lt; adopters.length; i++) &#123;</span><br><span class="line">        if (adopters[i] !&#x3D;&#x3D; &#39;0x0000000000000000000000000000000000000000&#39;) &#123;</span><br><span class="line">          $(&#39;.panel-pet&#39;).eq(i).find(&#39;button&#39;).text(&#39;Success&#39;).attr(&#39;disabled&#39;, true);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).catch(function(err) &#123;</span><br><span class="line">      console.log(err.message);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  handleAdopt: function(event) &#123;</span><br><span class="line">     event.preventDefault();</span><br><span class="line"></span><br><span class="line">    var petId &#x3D; parseInt($(event.target).data(&#39;id&#39;));</span><br><span class="line"></span><br><span class="line">    var adoptionInstance;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取用户账号</span><br><span class="line">    web3.eth.getAccounts(function(error, accounts) &#123;</span><br><span class="line">      if (error) &#123;</span><br><span class="line">        console.log(error);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      var account &#x3D; accounts[0];</span><br><span class="line"></span><br><span class="line">      App.contracts.Adoption.deployed().then(function(instance) &#123;</span><br><span class="line">        adoptionInstance &#x3D; instance;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 发送交易领养宠物</span><br><span class="line">        return adoptionInstance.adopt(petId, &#123;from: account&#125;);</span><br><span class="line">      &#125;).then(function(result) &#123;</span><br><span class="line">        return App.markAdopted();</span><br><span class="line">      &#125;).catch(function(err) &#123;</span><br><span class="line">        console.log(err.message);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(function() &#123;</span><br><span class="line">  $(window).load(function() &#123;</span><br><span class="line">    App.init();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="pets-json"><a href="#pets-json" class="headerlink" title="pets.json"></a>pets.json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: 0,</span><br><span class="line">    &quot;name&quot;: &quot;旺财&quot;,</span><br><span class="line">    &quot;picture&quot;: &quot;images&#x2F;scottish-terrier.jpeg&quot;,</span><br><span class="line">    &quot;age&quot;: 3,</span><br><span class="line">    &quot;breed&quot;: &quot;杂交&quot;,</span><br><span class="line">    &quot;location&quot;: &quot;华府&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;name&quot;: &quot;阿福&quot;,</span><br><span class="line">    &quot;picture&quot;: &quot;images&#x2F;scottish-terrier.jpeg&quot;,</span><br><span class="line">    &quot;age&quot;: 8,</span><br><span class="line">    &quot;breed&quot;: &quot;杂交&quot;,</span><br><span class="line">    &quot;location&quot;: &quot;华府&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: 2,</span><br><span class="line">    &quot;name&quot;: &quot;安安&quot;,</span><br><span class="line">    &quot;picture&quot;: &quot;images&#x2F;french-bulldog.jpeg&quot;,</span><br><span class="line">    &quot;age&quot;: 7,</span><br><span class="line">    &quot;breed&quot;: &quot;饲养&quot;,</span><br><span class="line">    &quot;location&quot;: &quot;华府&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web3js介绍及开发基础</title>
      <link href="/hexoT.github.io/posts/25550.html"/>
      <url>/hexoT.github.io/posts/25550.html</url>
      
        <content type="html"><![CDATA[<p>Web3是一套和以太坊节点进行通信的API，如果我们需要基于以太坊来开发去中心化应用，就可能需要使用web3（或者使用 ethers.js ），例如需要通过Web3来获取节点状态，获取账号信息，调用合约、监听合约事件等等。<br>web3.js 是 Web3 协议的 JavaScript 实现版本。</p><p>可以使用 web3.js库 提供的 web3 对象， 在底层实现上，通过RPC 调用 和本地以太坊节点进行通信。web3.js可以与任何暴露了RPC接口的以太坊节点连接。</p><h2 id="web3对象"><a href="#web3对象" class="headerlink" title="web3对象"></a>web3对象</h2><p>web3 包含的几个对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">web3.eth 用来与以太坊区块链及合约的交互</span><br><span class="line">web3.shh 用来与Whisper协议相关交互</span><br><span class="line">web3.db  用来与本地数据库交互</span><br><span class="line">web3.net 用来获取网络相关信息</span><br><span class="line">web3     主对象 包含一些工具</span><br></pre></td></tr></table></figure><h2 id="引入web3"><a href="#引入web3" class="headerlink" title="引入web3"></a>引入web3</h2><p>常用的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linux&#x2F;windows环境下： npm install web3</span><br><span class="line">ios环境下：bower install web3</span><br></pre></td></tr></table></figure><p>然后创建一个 web3实例，设置一个provider。为了保证你不会覆盖一个已有的provider（Mist浏览器或安装了MetaMak的浏览器会提供Provider），需要先检查是否有 web3 实例，示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 检查是否是新的DApp浏览器 或 MetaMask</span><br><span class="line">var web3Provider;</span><br><span class="line">if (window.ethereum) &#123;</span><br><span class="line">   web3Provider &#x3D; window.ethereum;</span><br><span class="line">  try &#123;</span><br><span class="line">    &#x2F;&#x2F; 请求用户授权</span><br><span class="line">    await window.ethereum.enable();</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    &#x2F;&#x2F; 用户不授权时</span><br><span class="line">    console.error(&quot;User denied account access&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; else if (window.web3) &#123;   &#x2F;&#x2F; 老版 MetaMask Legacy dapp browsers...</span><br><span class="line">  web3Provider &#x3D; window.web3.currentProvider;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  web3Provider &#x3D; new Web3.providers.HttpProvider(&#39;http:&#x2F;&#x2F;localhost:8545&#39;);</span><br><span class="line">&#125;</span><br><span class="line">web3 &#x3D; new Web3(web3Provider);</span><br></pre></td></tr></table></figure><p>成功引入后，就可以使用 web3 对象的API 了。</p><h2 id="web3js-API"><a href="#web3js-API" class="headerlink" title="web3js API"></a>web3js API</h2><p>详见：</p><h2 id="异步支持"><a href="#异步支持" class="headerlink" title="异步支持"></a>异步支持</h2><p>web3js API被设计来与本地的RPC结点交互，所有函数默认使用同步的HTTP的请求。<br>想发起一个异步的请求。允许函数传一个跟在参数列表后的可选的回调函数来支持异步。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">web3.eth.getBlock(32, function(error, result)&#123;</span><br><span class="line">    if(!error)</span><br><span class="line">        console.log(result)</span><br><span class="line">    else</span><br><span class="line">        console.error(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="批量请求"><a href="#批量请求" class="headerlink" title="批量请求"></a>批量请求</h2><p>可以允许将多个请求放入队列，并一次执行。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dotenv的使用</title>
      <link href="/hexoT.github.io/posts/13341.html"/>
      <url>/hexoT.github.io/posts/13341.html</url>
      
        <content type="html"><![CDATA[<h2 id="Dotenv的介绍"><a href="#Dotenv的介绍" class="headerlink" title="Dotenv的介绍"></a>Dotenv的介绍</h2>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何获取以太测试币</title>
      <link href="/hexoT.github.io/posts/50958.html"/>
      <url>/hexoT.github.io/posts/50958.html</url>
      
        <content type="html"><![CDATA[<h2 id="以太测试币"><a href="#以太测试币" class="headerlink" title="以太测试币"></a>以太测试币</h2><p>如果想将写好的智能合约部署到以太测试网进行测试，是要先获取以太测试币的。<br>如果还没获取，就部署网络，会出现以下情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ truffle migrate --network ropsten</span><br><span class="line"><span class="string">"Migrations"</span> could not deploy due to insufficient funds</span><br><span class="line">   * Account:  0x8C0dd4AE266aCB15170b2C3dA2BB11b18Fa01994</span><br><span class="line">   * Balance:  0 wei</span><br><span class="line">   * Message:  sender doesn<span class="string">'t have enough funds to send tx. The upfront cost is: 90371640000000000 and the sender'</span>s account only has: 0</span><br><span class="line">   * Try:</span><br><span class="line">      + Using an adequately funded account</span><br><span class="line">      + If you are using a <span class="built_in">local</span> Geth node, verify that your node is synced.</span><br></pre></td></tr></table></figure><p>insufficient funds，资金不足。很明显没以太测试币。</p><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><h3 id="其一"><a href="#其一" class="headerlink" title="其一"></a>其一</h3><p>进入小狐钱包，如下图，选择Ropsten Test Network，然后点击Deposit：<br><img src="https://note.youdao.com/yws/public/resource/e6f5c6b00eaa18fb77ef3a2e1e1e3c66/xmlnote/WEBRESOURCEf99c1d47f493f010d81ebdfce65239a5/135" alt=""></p><p>这样，就跳转到下图，点击Get Ether：<br><img src="https://note.youdao.com/yws/public/resource/f64196a12082b2fb95f729b91d0763c6/xmlnote/WEBRESOURCE710a67e03be9d264677faed9fc339d37/140" alt=""></p><p>页面跳转至下图：<br><img src="https://note.youdao.com/yws/public/resource/226d41ad584d36aa2ff44954878122ae/xmlnote/WEBRESOURCE7fbb329ecc3b5785608772918246a6f0/144" alt=""></p><p>这就是获取以太测试币的界面，点击 request 1 ether from faucet：<br><img src="https://note.youdao.com/yws/public/resource/51bd8ff5547fa949e69dd16765f29b44/xmlnote/WEBRESOURCE69fa1a9dfea3df0436a307c31f9230d8/150" alt=""></p><p>钱包主界面已经显示有0.98个以太测试币，现在就可以处理交易了。</p><h3 id="其二"><a href="#其二" class="headerlink" title="其二"></a>其二</h3><p>可以进入以下网址 <a href="https://faucet.ropsten.be/" target="_blank" rel="noopener">https://faucet.ropsten.be/</a> ，输入你的合约地址领取。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署以太坊测试网络时报错Check to see that your provider is valid.</title>
      <link href="/hexoT.github.io/posts/15201.html"/>
      <url>/hexoT.github.io/posts/15201.html</url>
      
        <content type="html"><![CDATA[<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>部署以太坊测试网络时，输入部署指令sudo truffle migrate –network ropsten  –reset –compile-all：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ sudo truffle migrate --network ropsten  --reset --compile-all</span><br><span class="line">[sudo] password <span class="keyword">for</span> dexter: </span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Compiling ./contracts/Adoption.sol</span><br><span class="line">&gt; Compiling ./contracts/Migrations.sol</span><br><span class="line">&gt; Artifacts written to /home/dexter/pet-shop (another copy)/build/contracts</span><br><span class="line">&gt; Compiled successfully using:</span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/packages/provider/index.js:56</span><br><span class="line">        throw new Error(errorMessage);</span><br><span class="line">^</span><br><span class="line">Error: There was a timeout <span class="keyword">while</span> attempting to connect to the network.</span><br><span class="line">       Check to see that your provider is valid.</span><br><span class="line">       If you have a slow internet connection, try configuring a longer timeout <span class="keyword">in</span> your Truffle config. Use the networks[networkName].networkCheckTimeout property to <span class="keyword">do</span> this.</span><br><span class="line">    at Timeout._onTimeout (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/packages/provider/index.js:56:1)</span><br><span class="line">    at listOnTimeout (internal/timers.js:549:17)</span><br><span class="line">    at processTimers (internal/timers.js:492:7)</span><br></pre></td></tr></table></figure><p>注意的是，报错：Error: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">There was a timeout while attempting to connect to the network.</span><br><span class="line">       Check to see that your provider is valid.</span><br></pre></td></tr></table></figure><p>Check to see that your provider is valid.检查provider是否有效。</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>首先要弄懂 provider 的来头。</p><h3 id="Truffle-HDWallet-Provider"><a href="#Truffle-HDWallet-Provider" class="headerlink" title="Truffle HDWallet Provider"></a>Truffle HDWallet Provider</h3><p>truffle-hdwallet-provider是基于HD Wallet 的Web3 Provider。Wallet就意味着公私钥，所以不难想象它就是预先用来对合约数据进行签名的，然后调用sendRawTransaction把创建合约的交易发送到网络。<br>原先我安装的是 npm install truffle-hdwallet-provider ，默认安装的是最新的。就会显示 Check to see that your provider is valid。 后面我就想应该是这provider不兼容的问题，就执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ npm install truffle-hdwallet-provider@0.0.3 --save</span><br><span class="line">npm WARN deprecated truffle-hdwallet-provider@0.0.3: WARNING: This package has been renamed to @truffle/hdwallet-provider.</span><br><span class="line"></span><br><span class="line">&gt; keccak@3.0.0 install /home/dexter/pet-shop (another copy)/node_modules/ethereum-cryptography/node_modules/keccak</span><br><span class="line">&gt; node-gyp-build || <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; secp256k1@4.0.1 install /home/dexter/pet-shop (another copy)/node_modules/ethereum-cryptography/node_modules/secp256k1</span><br><span class="line">&gt; node-gyp-build || <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">npm WARN @babel/plugin-transform-runtime@7.10.5 requires a peer of @babel/core@^7.0.0-0 but none is installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN pet-shop@1.0.0 No description</span><br><span class="line">npm WARN pet-shop@1.0.0 No repository field.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules/fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.2.4: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"linux"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span><br><span class="line"></span><br><span class="line">+ truffle-hdwallet-provider@0.0.3</span><br><span class="line">added 64 packages from 113 contributors, removed 219 packages, updated 5 packages and moved 2 packages <span class="keyword">in</span> 50.808s</span><br><span class="line"></span><br><span class="line">19 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  run `npm fund` <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><h3 id="再次执行sudo-truffle-migrate-–network-ropsten"><a href="#再次执行sudo-truffle-migrate-–network-ropsten" class="headerlink" title="再次执行sudo truffle migrate –network ropsten"></a>再次执行sudo truffle migrate –network ropsten</h3><p>这样，再次执行sudo truffle migrate –network ropsten  –reset –compile-all：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">$ sudo truffle migrate --network ropsten  --reset --compile-all</span><br><span class="line">[sudo] password <span class="keyword">for</span> dexter: </span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Compiling ./contracts/Adoption.sol</span><br><span class="line">&gt; Compiling ./contracts/Migrations.sol</span><br><span class="line">&gt; Artifacts written to /home/dexter/pet-shop (another copy)/build/contracts</span><br><span class="line">&gt; Compiled successfully using:</span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Migrations dry-run (simulation)</span><br><span class="line">===============================</span><br><span class="line">&gt; Network name:    <span class="string">'ropsten-fork'</span></span><br><span class="line">&gt; Network id:      3</span><br><span class="line">&gt; Block gas <span class="built_in">limit</span>: 8000029 (0x7a121d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Migrations'</span></span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; block number:        8308940</span><br><span class="line">   &gt; block timestamp:     1594951272</span><br><span class="line">   &gt; account:             0x8C0dd4AE266aCB15170b2C3dA2BB11b18Fa01994</span><br><span class="line">   &gt; balance:             0.99552475</span><br><span class="line">   &gt; gas used:            149175 (0x246b7)</span><br><span class="line">   &gt; gas price:           30 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00447525 ETH</span><br><span class="line"></span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00447525 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_initial_migration .js</span><br><span class="line">=======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Adoption'</span></span><br><span class="line">   --------------------</span><br><span class="line">   &gt; block number:        8308942</span><br><span class="line">   &gt; block timestamp:     1594951287</span><br><span class="line">   &gt; account:             0x8C0dd4AE266aCB15170b2C3dA2BB11b18Fa01994</span><br><span class="line">   &gt; balance:             0.98858971</span><br><span class="line">   &gt; gas used:            203827 (0x31c33)</span><br><span class="line">   &gt; gas price:           30 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00611481 ETH</span><br><span class="line"></span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00611481 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line">&gt; Total deployments:   2</span><br><span class="line">&gt; Final cost:          0.01059006 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line">&gt; Network name:    <span class="string">'ropsten'</span></span><br><span class="line">&gt; Network id:      3</span><br><span class="line">&gt; Block gas <span class="built_in">limit</span>: 8000029 (0x7a121d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Migrations'</span></span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; transaction <span class="built_in">hash</span>:    0xd51446b7970862112e07dca0b31cc285692b84a1fbe8cc752f2463bab3f8afa9</span><br><span class="line">   &gt; Blocks: 3            Seconds: 14</span><br><span class="line">   &gt; contract address:    0x6a836aE3C5876a7482100c17556a961F6a8487A2</span><br><span class="line">   &gt; block number:        8308946</span><br><span class="line">   &gt; block timestamp:     1594951304</span><br><span class="line">   &gt; account:             0x8C0dd4AE266aCB15170b2C3dA2BB11b18Fa01994</span><br><span class="line">   &gt; balance:             0.99507475</span><br><span class="line">   &gt; gas used:            164175 (0x2814f)</span><br><span class="line">   &gt; gas price:           30 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00492525 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00492525 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_initial_migration .js</span><br><span class="line">=======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Adoption'</span></span><br><span class="line">   --------------------</span><br><span class="line">   &gt; transaction <span class="built_in">hash</span>:    0xf62e5cba62f654a3704ba96b1975aea4ff9dad18b4e0111c6d919a85f6a0739a</span><br><span class="line">   &gt; Blocks: 0            Seconds: 9</span><br><span class="line">   &gt; contract address:    0x94c2D11388E4921dAD51b3B20A353Feeca287F03</span><br><span class="line">   &gt; block number:        8308948</span><br><span class="line">   &gt; block timestamp:     1594951327</span><br><span class="line">   &gt; account:             0x8C0dd4AE266aCB15170b2C3dA2BB11b18Fa01994</span><br><span class="line">   &gt; balance:             0.98768971</span><br><span class="line">   &gt; gas used:            203827 (0x31c33)</span><br><span class="line">   &gt; gas price:           30 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00611481 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00611481 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line">&gt; Total deployments:   2</span><br><span class="line">&gt; Final cost:          0.01104006 ETH</span><br></pre></td></tr></table></figure><p>这样就成功部署以太坊测试网络。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lite-server的介绍及使用</title>
      <link href="/hexoT.github.io/posts/17528.html"/>
      <url>/hexoT.github.io/posts/17528.html</url>
      
        <content type="html"><![CDATA[<h2 id="何为lite-server"><a href="#何为lite-server" class="headerlink" title="何为lite-server"></a>何为lite-server</h2><p>使用lite-server可以快速搭建服务器。<br>lite-server是一个轻量级的、基于Node.js运行环境的服务器，目前仅支持Web App。当运行lite-server后，它能够打开浏览器，当HTML、CSS或JavaScript文件变化时，它会识别到并自动刷新浏览器页面, 当路由没有被找到时，它将自动后退页面。lite-server自动刷新的功能对于开发调试来说是非常方便的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>推荐的安装lite-server的方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install lite-server --save-dev</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="其一"><a href="#其一" class="headerlink" title="其一"></a>其一</h3><p>在package.json中添加启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"lite-server"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>运行npm run dev，lite-server会自动找到index.html并运行。</p><h3 id="其二"><a href="#其二" class="headerlink" title="其二"></a>其二</h3><p>可以在bs-config.json中：<br>指定监听的端口号，<br>指定要启动的浏览器，browser是一个数组，可以添加多个浏览器<br>指定要监视的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"port"</span>:8000,</span><br><span class="line"><span class="string">"browser"</span> : [<span class="string">"chrome"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其三"><a href="#其三" class="headerlink" title="其三"></a>其三</h3><p>可以在bs-config.json中：<br>自定义lite-server的行为，<br>在刷新的时候执行各种回调函数，比如压缩css，比如合并js等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"use strict"</span>;</span><br><span class="line">module.exports = &#123;</span><br><span class="line"><span class="string">"port"</span>:8000,</span><br><span class="line"><span class="string">"browser"</span> : [<span class="string">"chrome"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从文件加载环境变量的Node.js库dotenv</title>
      <link href="/hexoT.github.io/posts/60426.html"/>
      <url>/hexoT.github.io/posts/60426.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>从文件加载环境变量的Node.js库dotenv,一个零依赖模块，用于从”.env”文件中导入环境变量到 process.env。<br>由于项目不同需求，需要配置不同环境变量，按需加载不同的环境变量文件，使用dotenv，可以完美解决这一问题。</p><h2 id="env-file"><a href="#env-file" class="headerlink" title=".env file"></a>.env file</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mnemonic_ropsten = bulb calm achieve unique  auto scene artist  admit buyer jewel indicate kaft</span><br><span class="line">mnemonic_mainnet = bulb calm achieve unique  auto scene artist  admit buyer jewel indicate kaft</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>然后在配置文件config.js里:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*读取.env环境配置的文件变量定义*/</span><br><span class="line">const dotenv = require(<span class="string">'dotenv'</span>);</span><br><span class="line">const result = dotenv.config();</span><br></pre></td></tr></table></figure><p>接下来在程序中方便地使用环境变量了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*读取.env文件配置的内容*/</span><br><span class="line">var mnemonic_ropsten = process.env.mnemonic_ropsten;</span><br><span class="line">var mnemonic_mainnet = process.env.mnemonic_mainnet;</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle部署错误 Cannot find module &#39;web3-provider-engine&#39;</title>
      <link href="/hexoT.github.io/posts/22237.html"/>
      <url>/hexoT.github.io/posts/22237.html</url>
      
        <content type="html"><![CDATA[<h2 id="truffle部署报错"><a href="#truffle部署报错" class="headerlink" title="truffle部署报错"></a>truffle部署报错</h2><p>运行命令truffle migrate –network ropsten  –reset –compile-all<br>时候报错，Cannot find module ‘web3-provider-engine/subproviders/nonce-tracker’：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ truffle migrate --network ropsten  --reset --compile-all</span><br><span class="line">&#123;&#125;</span><br><span class="line">Error: Cannot find module <span class="string">'web3-provider-engine/subproviders/nonce-tracker'</span></span><br><span class="line">Require stack:</span><br><span class="line">- /home/dexter/pet-shop (copy)/truffle-config.js</span><br><span class="line">- /home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/node_modules/original-require/index.js</span><br><span class="line">- /home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/cli.bundled.js</span><br><span class="line">    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:957:15)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:840:27)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:1019:19)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:77:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/home/dexter/pet-shop (copy)/truffle-config.js:12:31)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:1133:30)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1153:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:977:32)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:877:14)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:1019:19)</span><br><span class="line">    at Object.require (internal/modules/cjs/helpers.js:77:18)</span><br><span class="line">    at Function.load (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/packages/config/dist/index.js:161:1)</span><br><span class="line">    at Function.detect (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/packages/config/dist/index.js:150:1)</span><br><span class="line">    at Object.run (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/packages/core/lib/commands/migrate.js:189:1)</span><br><span class="line">    at Command.run (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/packages/core/lib/command.js:136:1)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/packages/core/cli.js:51:1)</span><br><span class="line">    at __webpack_require__ (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/webpack/bootstrap:19:1)</span><br><span class="line">    at /home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/webpack/bootstrap:83:1</span><br><span class="line">    at Object.&lt;anonymous&gt; (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/cli.bundled.js:89:10)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:1133:30)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1153:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:977:32)</span><br><span class="line">Truffle v5.1.27 (core: 5.1.27)</span><br><span class="line">Node v12.16.3</span><br></pre></td></tr></table></figure><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install  web3-provider-engine</span><br><span class="line">[sudo] password <span class="keyword">for</span> dexter: </span><br><span class="line">npm WARN deprecated eth-json-rpc-errors@2.0.2: Package renamed to eth-rpc-errors</span><br><span class="line">npm WARN deprecated eth-json-rpc-errors@1.1.1: Package renamed to eth-rpc-errors</span><br><span class="line"></span><br><span class="line">&gt; keccak@2.1.0 install /home/dexter/pet-shop (copy)/node_modules/keccak</span><br><span class="line">&gt; npm run rebuild || <span class="built_in">echo</span> <span class="string">"Keccak bindings compilation fail. Pure JS implementation will be used."</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; keccak@2.1.0 rebuild /home/dexter/pet-shop (copy)/node_modules/keccak</span><br><span class="line">&gt; node-gyp rebuild</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ web3-provider-engine@15.0.12</span><br><span class="line">added 114 packages from 128 contributors and updated 1 package <span class="keyword">in</span> 117.824s</span><br><span class="line"></span><br><span class="line">3 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  run `npm fund` <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><p>接着，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo node-gyp rebuild</span><br><span class="line">sudo: node-gyp: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>node-gyp的作用是什么?<br>要理解node-gyp首先要知道什么是gyp(<a href="https://gyp.gsrc.io/index.md)。gyp其实是一个用来生成项目文件的工具，一开始是设计给chromium项目使用的，后来大家发现比较好用就用到了其他地方。生成项目文件后就可以调用GCC" target="_blank" rel="noopener">https://gyp.gsrc.io/index.md)。gyp其实是一个用来生成项目文件的工具，一开始是设计给chromium项目使用的，后来大家发现比较好用就用到了其他地方。生成项目文件后就可以调用GCC</a>, vsbuild, xcode等编译平台来编译。至于为什么要有node-gyp，是由于node程序中需要调用一些其他语言编写的工具甚至是dll，需要先编译一下，否则就会有跨平台的问题，例如在windows上运行的软件copy到mac上就不能用了，但是如果源码支持，编译一下，在mac上还是可以用的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install node-gyp -g</span><br><span class="line">npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142</span><br><span class="line">/home/dexter/node-v12.16.3-linux-x64/bin/node-gyp -&gt; /home/dexter/node-v12.16.3-linux-x64/lib/node_modules/node-gyp/bin/node-gyp.js</span><br><span class="line">+ node-gyp@7.0.0</span><br><span class="line">added 99 packages from 66 contributors <span class="keyword">in</span> 20.611s</span><br></pre></td></tr></table></figure><p>全局配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ln -s /home/dexter/node-v12.16.3-linux-x64/bin/node-gyp /usr/<span class="built_in">local</span>/bin/node-gyp</span><br><span class="line">[sudo] password <span class="keyword">for</span> dexter:</span><br></pre></td></tr></table></figure><p>接着，输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo node-gyp rebuild</span><br><span class="line">gyp info it worked <span class="keyword">if</span> it ends with ok</span><br><span class="line">gyp info using node-gyp@7.0.0</span><br><span class="line">gyp info using node@12.16.3 | linux | x64</span><br><span class="line">gyp info find Python using Python version 3.5.2 found at <span class="string">"/usr/bin/python3"</span></span><br><span class="line">gyp info spawn /usr/bin/python3</span><br><span class="line">gyp info spawn args [</span><br><span class="line">gyp info spawn args   <span class="string">'/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/node-gyp/gyp/gyp_main.py'</span>,</span><br><span class="line">gyp info spawn args   <span class="string">'binding.gyp'</span>,</span><br></pre></td></tr></table></figure><p>至此，大功告成。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> truffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-gyp介绍及使用</title>
      <link href="/hexoT.github.io/posts/39357.html"/>
      <url>/hexoT.github.io/posts/39357.html</url>
      
        <content type="html"><![CDATA[<h2 id="何为node-gyp"><a href="#何为node-gyp" class="headerlink" title="何为node-gyp"></a>何为node-gyp</h2><p>首先，要认识的是gyp是一种构建自动化工具。node-gyp就是node下的gyp。npm 为了方便干脆就直接源码分发，用户装的时候再现场编译。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>node程序中需要调用一些其他语言编写的 工具 甚至是dll，需要先编译一下，否则就会有跨平台的问题，例如在windows上运行的软件copy到mac上就不能用了，但是如果源码支持，编译一下，在mac上还是可以用的。</p><h2 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g node-gyp</span><br></pre></td></tr></table></figure><p>在根目录上输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ node-gyp</span><br><span class="line"></span><br><span class="line">  Usage: node-gyp &lt;<span class="built_in">command</span>&gt; [options]</span><br><span class="line"></span><br><span class="line">  <span class="built_in">where</span> &lt;<span class="built_in">command</span>&gt; is one of:</span><br><span class="line">    - build - Invokes `make` and builds the module</span><br><span class="line">    - clean - Removes any generated build files and the <span class="string">"out"</span> dir</span><br><span class="line">    - configure - Generates a Makefile <span class="keyword">for</span> the current module</span><br><span class="line">    - rebuild - Runs <span class="string">"clean"</span>, <span class="string">"configure"</span> and <span class="string">"build"</span> all at once</span><br><span class="line">    - install - Install node development files <span class="keyword">for</span> the specified node version.</span><br><span class="line">    - list - Prints a listing of the currently installed node development files</span><br><span class="line">    - remove - Removes the node development files <span class="keyword">for</span> the specified version</span><br><span class="line"></span><br><span class="line">node-gyp@7.0.0  /home/dexter/node-v12.16.3-linux-x64/lib/node_modules/node-gyp</span><br><span class="line">node@12.16.3</span><br></pre></td></tr></table></figure><p>node-gyp build ： 调用“make”并生成模块。<br>node-gyp clean ： 删除所有生成的生成文件和 “out” dir。<br>node-gyp configure ： 为当前模块生成生成文件。<br>node-gyp rebuild ： 运行”clean”, “configure” and “build”三个命令。<br>node-gyp install ： 安装指定节点版本的节点开发文件。<br>node-gyp list ： 打印当前安装的节点开发文件的列表。<br>node-gyp remove ： 删除指定版本的节点开发文件。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DAPP-以太坊DAPP领养臭狗</title>
      <link href="/hexoT.github.io/posts/35991.html"/>
      <url>/hexoT.github.io/posts/35991.html</url>
      
        <content type="html"><![CDATA[<p>DAPP基于的技术栈有truffle、infura、web3.js，通过部署智能合约到以太测试网络或主网，实现以太坊DAPP领养臭狗。<br>开发环境为ubuntu。</p><h2 id="DAPP的介绍"><a href="#DAPP的介绍" class="headerlink" title="DAPP的介绍"></a>DAPP的介绍</h2><p>首先，先看下DAPP的界面：<br><img src="http://note.youdao.com/yws/res/156/WEBRESOURCEf9963cbb8f0b50c062e1353d96708e7d" alt=""></p><p>在UBUTU环境编译成功智能合约后，运行npm run dev，通过浏览器点击领养臭狗就可以成功领养你喜欢的臭狗，究竟你喜欢旺财还是阿福，现在就开始一步一步完成DAPP领养臭狗。</p><h2 id="DAPP的技术栈"><a href="#DAPP的技术栈" class="headerlink" title="DAPP的技术栈"></a>DAPP的技术栈</h2><h3 id="truffle"><a href="#truffle" class="headerlink" title="truffle"></a>truffle</h3><p>truffle是一个世界级的开发环境，是针对基于以太坊的Solidity语言的一套开发框架，其本身基于Javascript。其愿景是致力于让以太坊上的开发变得简单 。<br>至于它的详细介绍，可以参考 ！<a href="https://dextertam008.github.io/hexoT.github.io/posts/36087.html">truffle的入门介绍</a> 。<br>至于它的安装及使用，可以参考！<a href="https://dextertam008.github.io/hexoT.github.io/posts/35987.html">ubuntu环境下truffle的安装及使用</a> 。</p><h3 id="infura"><a href="#infura" class="headerlink" title="infura"></a>infura</h3><p>Infura是出色的开放以太坊节点，它提供了标准的RPC API可供开发者调用。<br>至于它的详细介绍，可以参考 ！<a href="https://dextertam008.github.io/hexoT.github.io/posts/54347.html">infura的注册使用</a> 。</p><h3 id="web3-js"><a href="#web3-js" class="headerlink" title="web3.js"></a>web3.js</h3><p>web3.js 是一个通过RPC 调用和本地以太坊节点进行通信的js库。RPC（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。<br>web3.js可以与任何暴露了RPC接口的以太坊节点连接。<br>web3中提供了eth对象 - web3.eth来与以太坊区块链进行交互。<br>至于它的详细介绍，可以参考 ！<a href="https://dextertam008.github.io/hexoT.github.io/posts/36087.html">web3.js</a> 。</p><h2 id="DAPP的开始"><a href="#DAPP的开始" class="headerlink" title="DAPP的开始"></a>DAPP的开始</h2><p>首先，在ubuntu中创建一文件夹DAPP-Stinky-dog,在文件夹根目录运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ truffle unbox</span><br><span class="line">Starting unbox...</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">✔ Preparing to download box</span><br><span class="line">✔ Downloading</span><br><span class="line">✔ cleaning up temporary files</span><br><span class="line">✔ Setting up box</span><br><span class="line"></span><br><span class="line">Unbox successful, sweet!</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">  Compile: truffle compile</span><br><span class="line">  Migrate: truffle migrate</span><br><span class="line">  Test:    truffle <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p>创建了一个通用的以太坊DAPP开发框架，它下面的工程目录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">contracts:智能合约文件夹</span><br><span class="line">migrations:用于部署的脚本</span><br><span class="line">test:单元测试</span><br><span class="line">truffle-config.js:truffle的配置</span><br></pre></td></tr></table></figure><h3 id="编写智能合约"><a href="#编写智能合约" class="headerlink" title="编写智能合约"></a>编写智能合约</h3><p>智能合约承担着分布式应用DAPP的后台逻辑和存储。<br>在contracts目录下，添加合约文件Adoption.sol，此合约的功能是用来确定领养的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;&#x3D;0.4.21 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract Adoption &#123;</span><br><span class="line"></span><br><span class="line">  address[16] public adopters;  &#x2F;&#x2F; 保存领养者的地址</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 领养宠物</span><br><span class="line">  function adopt(uint petId) public returns (uint) &#123;</span><br><span class="line">    require(petId &gt;&#x3D; 0 &amp;&amp; petId &lt;&#x3D; 15);  &#x2F;&#x2F; 确保id在数组长度内</span><br><span class="line"></span><br><span class="line">    adopters[petId] &#x3D; msg.sender;        &#x2F;&#x2F; 保存调用地址</span><br><span class="line">    return petId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 返回领养者</span><br><span class="line">  function getAdopters() public view returns (address[16] memory) &#123;</span><br><span class="line">    return adopters;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译部署"><a href="#编译部署" class="headerlink" title="编译部署"></a>编译部署</h3><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>Solidity与C++一样是编译型语言，需要把可读的Solidity代码编译为EVM字节码才能运行。<br>所以，我们要先编译写好的solidity合约文件Adoption.sol，然后在项目根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ truffle compile</span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Compiling ./contracts/Adoption.sol</span><br><span class="line">&gt; Compiling ./contracts/ConvertLib.sol</span><br><span class="line">&gt; Compiling ./contracts/MetaCoin.sol</span><br><span class="line">&gt; Compiling ./contracts/Migrations.sol</span><br><span class="line">&gt; Artifacts written to /home/dexter/DAPP-Stinky-dog/build/contracts</span><br><span class="line">&gt; Compiled successfully using:</span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br></pre></td></tr></table></figure><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>编译之后，就开始部署到区块链上。<br>在migrations文件夹下，找到2_deploy_contracts.js，在这里我们编写代码部署领养合约：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var Adoption = artifacts.require(<span class="string">"Adoption"</span>);</span><br><span class="line"></span><br><span class="line">module.exports = <span class="keyword">function</span>(deployer) &#123;</span><br><span class="line">  deployer.deploy(Adoption);//部署编译的合约Adoption.sol</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="编写truffle-config-js配置网络环境"><a href="#编写truffle-config-js配置网络环境" class="headerlink" title="编写truffle-config.js配置网络环境"></a>编写truffle-config.js配置网络环境</h3><p>上面写好部署代码后，接着就是编写truffle-config.js，写明要部署到的具体的以太网络。我们的DAPP是要部署到以太坊测试网络及主网的，truffle-config.js代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/*读取.env环境配置的文件变量定义*/</span><br><span class="line">const dotenv = require(<span class="string">'dotenv'</span>);</span><br><span class="line">const result = dotenv.config();</span><br><span class="line"><span class="keyword">if</span> (result.error) &#123;</span><br><span class="line">  throw result.error;</span><br><span class="line">&#125;</span><br><span class="line">console.log(result.parsed);</span><br><span class="line">/*读取.env文件配置的助记词*/</span><br><span class="line">var mnemonic_ropsten = process.env.mnemonic_ropsten;</span><br><span class="line">var mnemonic_mainnet = process.env.mnemonic_mainnet;</span><br><span class="line"></span><br><span class="line">var NonceTrackerSubprovider = require(<span class="string">"web3-provider-engine/subproviders/nonce-tracker"</span>);</span><br><span class="line">var HDWalletProvider = require(<span class="string">"truffle-hdwallet-provider"</span>);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // See &lt;http://truffleframework.com/docs/advanced/configuration&gt;</span><br><span class="line">  // <span class="keyword">for</span> more about customizing your Truffle configuration!</span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">      host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      port: 8545,</span><br><span class="line">      network_id: <span class="string">"*"</span> // Match any network id</span><br><span class="line">    &#125;,</span><br><span class="line">    ropsten: &#123;// 测试网络</span><br><span class="line">      provider: new HDWalletProvider(mnemonic_ropsten, <span class="string">"https://ropsten.infura.io/    v3/070aal13k3274fb1b86e658e74e248b8"</span>),</span><br><span class="line">      network_id: 3,</span><br><span class="line">      gas: 3012388,</span><br><span class="line">      gasPrice: 30000000000</span><br><span class="line">    &#125;,</span><br><span class="line">     mainnet: &#123;// 以太主网</span><br><span class="line">      provider: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        var wallet = new HDWalletProvider(mnemonic_mainnet, <span class="string">"https://ropsten.infura.io/v3/070aal13k3274fb1b86e658e74e248b8"</span>);</span><br><span class="line">        var nonceTracker = new NonceTrackerSubprovider();</span><br><span class="line">        wallet.engine._providers.unshift(nonceTracker);</span><br><span class="line">        nonceTracker.setEngine(wallet.engine);</span><br><span class="line">        <span class="built_in">return</span> wallet;</span><br><span class="line">      &#125;,</span><br><span class="line">      gas: 6000000,</span><br><span class="line">      network_id: 1,</span><br><span class="line">      gasPrice: 10 * 1000000000</span><br><span class="line">    &#125;,</span><br><span class="line">    develop: &#123;</span><br><span class="line">      port: 8545</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面是代码解读，我们首先读取.env环境配置的文件变量定义。</p><h3 id="env文件配置"><a href="#env文件配置" class="headerlink" title="env文件配置"></a>env文件配置</h3><p>Dotenv（ ！<a href="https://dextertam008.github.io/hexoT.github.io/posts/60426.html">关于Dotenv的介绍</a> ）是一个零依赖模块，用于从”.env”文件中导入环境变量到 process.env。对DAPP来说，这样就可以不用上传钱包助记词等核心机密到GITHUB，便于资产安全。<br>在项目根目录下安装dotenv：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm install  dotenv</span><br><span class="line">npm WARN pet-shop@1.0.0 No description</span><br><span class="line">npm WARN pet-shop@1.0.0 No repository field.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules/fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.2.4: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"linux"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span><br><span class="line"></span><br><span class="line">+ dotenv@8.2.0</span><br><span class="line">added 1 package <span class="keyword">in</span> 19.625s</span><br></pre></td></tr></table></figure><p>然后就是在项目根目录下创建”.env”文件，编写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mnemonic_ropsten = bulb calm achieve unique  auto scene artist  admit buyer jewel indicate kaft</span><br><span class="line">mnemonic_mainnet = bulb calm achieve unique  auto scene artist  admit buyer jewel indicate kaft</span><br></pre></td></tr></table></figure><p>“bulb calm achieve unique  auto scene artist  admit buyer jewel indicate kaft”这一串就是你的Metamask小狐钱包助记词。关于ubuntu下Metamask安装可以查看！<a href="https://dextertam008.github.io/hexoT.github.io/posts/50760.html">ubuntu下Metamask安装</a>。配置好”.env”文件后，是通过const result = dotenv.config()读取”.env”文件的配置内容的。</p><p>接着，就是通过使用HDWalletProvider来签署交易、处理事务签名以及与以太坊网络的连接。</p><h3 id="安装-truffle-hdwallet-provider"><a href="#安装-truffle-hdwallet-provider" class="headerlink" title="安装 truffle-hdwallet-provider"></a>安装 truffle-hdwallet-provider</h3><p>Infura组织是MetaMask背后的以太坊供应商。Infura提供了一个托管的以太坊节点集群，可以将你开发的以太坊智能合约部署到infura提供的节点上，而无需搭建自己的以太坊节点 。<br>安装 truffle-hdwallet-provider后，Infura可以通过使用HDWalletProvider来签署交易，可以处理事务签名以及与以太坊网络的连接 。<br>在项目根目录下运行npm install truffle-hdwallet-provider 及 sudo npm install web3-provider-engine<br>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ npm install truffle-hdwallet-provider</span><br><span class="line">npm WARN deprecated truffle-hdwallet-provider@1.0.17: WARNING: This package has been renamed to @truffle&#x2F;hdwallet-provider.</span><br><span class="line">npm WARN deprecated request@2.88.2: request has been deprecated, see https:&#x2F;&#x2F;github.com&#x2F;request&#x2F;request&#x2F;issues&#x2F;3142</span><br><span class="line"></span><br><span class="line">&gt; websocket@1.0.29 install &#x2F;home&#x2F;dexter&#x2F;pet-shop&#x2F;node_modules&#x2F;web3-providers-ws&#x2F;node_modules&#x2F;websocket</span><br><span class="line">&gt; (node-gyp rebuild 2&gt; builderror.log) || (exit 0)</span><br><span class="line"></span><br><span class="line">make: Entering directory &#39;&#x2F;home&#x2F;dexter&#x2F;pet-shop&#x2F;node_modules&#x2F;web3-providers-ws&#x2F;node_modules&#x2F;websocket&#x2F;build&#39;</span><br><span class="line">  CXX(target) Release&#x2F;obj.target&#x2F;bufferutil&#x2F;src&#x2F;bufferutil.o</span><br><span class="line">bufferutil.target.mk:112: recipe for target &#39;Release&#x2F;obj.target&#x2F;bufferutil&#x2F;src&#x2F;bufferutil.o&#39; failed</span><br><span class="line">make: Leaving directory &#39;&#x2F;home&#x2F;dexter&#x2F;pet-shop&#x2F;node_modules&#x2F;web3-providers-ws&#x2F;node_modules&#x2F;websocket&#x2F;build&#39;</span><br><span class="line"></span><br><span class="line">&gt; websocket@1.0.31 install &#x2F;home&#x2F;dexter&#x2F;pet-shop&#x2F;node_modules&#x2F;websocket</span><br><span class="line">&gt; (node-gyp rebuild 2&gt; builderror.log) || (exit 0)</span><br><span class="line"></span><br><span class="line">make: Entering directory &#39;&#x2F;home&#x2F;dexter&#x2F;pet-shop&#x2F;node_modules&#x2F;websocket&#x2F;build&#39;</span><br><span class="line">  CXX(target) Release&#x2F;obj.target&#x2F;bufferutil&#x2F;src&#x2F;bufferutil.o</span><br><span class="line">  SOLINK_MODULE(target) Release&#x2F;obj.target&#x2F;bufferutil.node</span><br><span class="line">  COPY Release&#x2F;bufferutil.node</span><br><span class="line">  CXX(target) Release&#x2F;obj.target&#x2F;validation&#x2F;src&#x2F;validation.o</span><br><span class="line">  SOLINK_MODULE(target) Release&#x2F;obj.target&#x2F;validation.node</span><br><span class="line">  COPY Release&#x2F;validation.node</span><br><span class="line">make: Leaving directory &#39;&#x2F;home&#x2F;dexter&#x2F;pet-shop&#x2F;node_modules&#x2F;websocket&#x2F;build&#39;</span><br><span class="line">npm WARN pet-shop@1.0.0 No description</span><br><span class="line">npm WARN pet-shop@1.0.0 No repository field.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules&#x2F;fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"></span><br><span class="line">+ truffle-hdwallet-provider@1.0.17</span><br><span class="line">added 312 packages from 204 contributors in 187.232s</span><br><span class="line"></span><br><span class="line">2 packages are looking for funding</span><br><span class="line">  run &#96;npm fund&#96; for details</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install web3-provider-engine</span><br><span class="line">[sudo] password for dexter: </span><br><span class="line">npm WARN deprecated eth-json-rpc-errors@2.0.2: Package renamed to eth-rpc-errors</span><br><span class="line">npm WARN deprecated eth-json-rpc-errors@1.1.1: Package renamed to eth-rpc-errors</span><br><span class="line"></span><br><span class="line">&gt; keccak@3.0.1 install &#x2F;home&#x2F;dexter&#x2F;node_modules&#x2F;eth-json-rpc-middleware&#x2F;node_modules&#x2F;keccak</span><br><span class="line">&gt; node-gyp-build || exit 0</span><br><span class="line"></span><br><span class="line">sh: 1: node-gyp-build: not found</span><br><span class="line"></span><br><span class="line">&gt; secp256k1@4.0.2 install &#x2F;home&#x2F;dexter&#x2F;node_modules&#x2F;eth-json-rpc-middleware&#x2F;node_modules&#x2F;secp256k1</span><br><span class="line">&gt; node-gyp-build || exit 0</span><br><span class="line">+ web3-provider-engine@15.0.12</span><br><span class="line">added 79 packages from 61 contributors and moved 39 packages in 181.814s</span><br><span class="line"></span><br><span class="line">39 packages are looking for funding</span><br><span class="line">  run &#96;npm fund&#96; for details</span><br></pre></td></tr></table></figure><p>安装了truffle-hdwallet-provider，接着就是引用var HDWalletProvider = require(“truffle-hdwallet-provider”)，然后配置测试网络：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line"> ropsten: &#123;&#x2F;&#x2F; 测试网络</span><br><span class="line">      provider: new HDWalletProvider(mnemonic_ropsten, &quot;https:&#x2F;&#x2F;ropsten.infura.io&#x2F;    v3&#x2F;070aal13k3274fb1b86e658e74e248b8&quot;),</span><br><span class="line">      network_id: 3,</span><br><span class="line">      gas: 3012388,</span><br><span class="line">      gasPrice: 30000000000</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>new HDWalletProvider(参数1, 参数2)中，参数1是助记词，参数2是Infura提供的API，如果还没注册，可以参考：！<a href="https://dextertam008.github.io/hexoT.github.io/posts/54347.html">infura的注册使用</a>。Infura提供的API在如下页面中：<br><img src="https://note.youdao.com/yws/public/resource/52a5496b69739512714d6142f5d067ea/xmlnote/WEBRESOURCE3e71a6ad0741271dc0778bd712e6e970/164" alt=""></p><p>这些都准备好之后就可以部署到测试网络。</p><h2 id="部署到测试网络"><a href="#部署到测试网络" class="headerlink" title="部署到测试网络"></a>部署到测试网络</h2><p>在项目根目录下运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">$ sudo truffle migrate --network ropsten  --reset --compile-all</span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Compiling ./contracts/Adoption.sol</span><br><span class="line">&gt; Compiling ./contracts/ConvertLib.sol</span><br><span class="line">&gt; Compiling ./contracts/MetaCoin.sol</span><br><span class="line">&gt; Compiling ./contracts/Migrations.sol</span><br><span class="line">&gt; Artifacts written to /home/dexter/DAPP-Stinky-dog/build/contracts</span><br><span class="line">&gt; Compiled successfully using:</span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Migrations dry-run (simulation)</span><br><span class="line">===============================</span><br><span class="line">&gt; Network name:    <span class="string">'ropsten-fork'</span></span><br><span class="line">&gt; Network id:      3</span><br><span class="line">&gt; Block gas <span class="built_in">limit</span>: 8000000 (0x7a1200)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Migrations'</span></span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; block number:        8337694</span><br><span class="line">   &gt; block timestamp:     1595317803</span><br><span class="line">   &gt; account:             0x8C0dd4AE266aCB15170b2C3dA2BB11b18Fa01994</span><br><span class="line">   &gt; balance:             0.873667319</span><br><span class="line">   &gt; gas used:            210237 (0x3353d)</span><br><span class="line">   &gt; gas price:           30 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00630711 ETH</span><br><span class="line"></span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00630711 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_deploy_contracts.js</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Adoption'</span></span><br><span class="line">   --------------------</span><br><span class="line">   &gt; block number:        8337696</span><br><span class="line">   &gt; block timestamp:     1595317831</span><br><span class="line">   &gt; account:             0x8C0dd4AE266aCB15170b2C3dA2BB11b18Fa01994</span><br><span class="line">   &gt; balance:             0.866731619</span><br><span class="line">   &gt; gas used:            203827 (0x31c33)</span><br><span class="line">   &gt; gas price:           30 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00611481 ETH</span><br><span class="line"></span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00611481 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line">&gt; Total deployments:   2</span><br><span class="line">&gt; Final cost:          0.01242192 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line">&gt; Network name:    <span class="string">'ropsten'</span></span><br><span class="line">&gt; Network id:      3</span><br><span class="line">&gt; Block gas <span class="built_in">limit</span>: 8000000 (0x7a1200)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Migrations'</span></span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; transaction <span class="built_in">hash</span>:    0x58c5955e11aaf3cfddf78bf533e22f4c374906e70ae1702f37367d60a5e7db11</span><br><span class="line">   &gt; Blocks: 3            Seconds: 98</span><br><span class="line">   &gt; contract address:    0x8B94e6713D525FF13956772300ab3AA29A9363e6</span><br><span class="line">   &gt; block number:        8337695</span><br><span class="line">   &gt; block timestamp:     1595317898</span><br><span class="line">   &gt; account:             0x8C0dd4AE266aCB15170b2C3dA2BB11b18Fa01994</span><br><span class="line">   &gt; balance:             0.873217319</span><br><span class="line">   &gt; gas used:            225237 (0x36fd5)</span><br><span class="line">   &gt; gas price:           30 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00675711 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00675711 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_deploy_contracts.js</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Adoption'</span></span><br><span class="line">   --------------------</span><br><span class="line">   &gt; transaction <span class="built_in">hash</span>:    0xc4f51e3e258a0d0584e6825ef53e3985a278fb88a1f4c3f92114ae6fb6b8d50a</span><br><span class="line">   &gt; Blocks: 0            Seconds: 97</span><br><span class="line">   &gt; contract address:    0x7100afAc3f0493aa2Fd575cC0143b1651c3fcC7e</span><br><span class="line">   &gt; block number:        8337701</span><br><span class="line">   &gt; block timestamp:     1595318249</span><br><span class="line">   &gt; account:             0x8C0dd4AE266aCB15170b2C3dA2BB11b18Fa01994</span><br><span class="line">   &gt; balance:             0.865831619</span><br><span class="line">   &gt; gas used:            203827 (0x31c33)</span><br><span class="line">   &gt; gas price:           30 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00611481 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00611481 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line">&gt; Total deployments:   2</span><br><span class="line">&gt; Final cost:          0.01287192 ETH</span><br></pre></td></tr></table></figure><p>成功后就是编写前端界面，关于DAPP领养臭狗的代码分析请看。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>我们访问DAPP领养臭狗网页，需要运行lite-server环境，关于lite-server的介绍及使用请看 ！<a href="https://dextertam008.github.io/hexoT.github.io/posts/17528.html">lite-server的介绍及使用</a> 。<br>在项目根目录输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm install lite-server --save-dev</span><br><span class="line">+ lite-server@2.5.4</span><br><span class="line">added 223 packages from 209 contributors <span class="keyword">in</span> 33.361s</span><br><span class="line"></span><br><span class="line">4 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  run `npm fund` <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><p>在项目根目录输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dev</span><br><span class="line">&gt; pet-shop@1.0.0 dev /home/dexter/DAPP-Stinky-dog</span><br><span class="line">&gt; lite-server</span><br><span class="line"></span><br><span class="line">** browser-sync config **</span><br><span class="line">&#123;</span><br><span class="line">  injectChanges: <span class="literal">false</span>,</span><br><span class="line">  files: [ <span class="string">'./**/*.&#123;html,htm,css,js&#125;'</span> ],</span><br><span class="line">  watchOptions: &#123; ignored: <span class="string">'node_modules'</span> &#125;,</span><br><span class="line">  server: &#123;</span><br><span class="line">    baseDir: [ <span class="string">'./src'</span>, <span class="string">'./build/contracts'</span> ],</span><br><span class="line">    middleware: [ [Function], [Function] ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[Browsersync] Access URLs:</span><br><span class="line"> ----------------------------------------</span><br><span class="line">       Local: http://localhost:3002</span><br><span class="line">    External: http://192.168.253.213:3002</span><br><span class="line"> ----------------------------------------</span><br><span class="line">          UI: http://localhost:3003</span><br><span class="line"> UI External: http://localhost:3003</span><br><span class="line"> ----------------------------------------</span><br><span class="line">[Browsersync] Serving files from: ./src</span><br><span class="line">[Browsersync] Serving files from: ./build/contracts</span><br><span class="line">[Browsersync] Watching files...</span><br><span class="line">20.07.21 08:40:12 200 GET /index.html</span><br><span class="line">20.07.21 08:40:13 200 GET /css/bootstrap.min.css</span><br><span class="line">20.07.21 08:40:13 200 GET /js/bootstrap.min.js</span><br><span class="line">20.07.21 08:40:13 200 GET /js/web3.min.js</span><br><span class="line">20.07.21 08:40:13 200 GET /js/truffle-contract.js</span><br><span class="line">20.07.21 08:40:13 200 GET /js/app.js</span><br><span class="line">20.07.21 08:40:14 200 GET /pets.json</span><br></pre></td></tr></table></figure><p>页面将会自动跳转到DAPP领养臭狗，如下：<br><img src="http://note.youdao.com/yws/res/156/WEBRESOURCEf9963cbb8f0b50c062e1353d96708e7d" alt=""></p><p>领养的前提是要登录你的Metamask，登录后就可以发起交易，交易前你首先得有以太测试币，如何领取可以参考： ！<a href="https://dextertam008.github.io/hexoT.github.io/posts/50958.html">如何获取以太测试币</a></p><p>至此，完成DAPP领养臭狗。点击领养，就可以领养你心爱的旺才或者阿福了。代码欢迎加微信或！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">入群</a> 获取。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DAPP solidity truffle infura web3.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>infura的注册使用</title>
      <link href="/hexoT.github.io/posts/54347.html"/>
      <url>/hexoT.github.io/posts/54347.html</url>
      
        <content type="html"><![CDATA[<p>Infura是出色的开放以太坊节点，它提供了标准的RPC API可供开发者 调用。除了支持以太坊，Infura还提供IPFS网关和API，并且提供多个 数字货币交易所的行情信息API。</p><h2 id="进入官网"><a href="#进入官网" class="headerlink" title="进入官网"></a>进入官网</h2><p>infura的注册使用，其实很简单，只要注册了，在邮件上确认了，就可以使用了。<br>首先进入官网， ！<a href="https://infura.io/" target="_blank" rel="noopener">官网</a>。<br><img src="https://note.youdao.com/yws/public/resource/496d5469e7e4e55c2788547aade11a3f/xmlnote/WEBRESOURCE1fd71b4fb17df77e60d44681f244d365/109" alt=""></p><p>现在还不能注册，因为在Chrom谷歌的浏览器上还缺少header editor插件没安装，如果注册的话会出现，在注册页顶出红字提醒：<br>“Unable to verify recaptcha entry ”。</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>那现在就来安装缺少的header editor插件，在Chrom谷歌的浏览器上输入 chrome://extensions/ ，把下载的header editor插件（ <a href="https://pan.baidu.com/s/1dqtP1V-XdFSWRa4CF_qZZg" target="_blank" rel="noopener">https://pan.baidu.com/s/1dqtP1V-XdFSWRa4CF_qZZg</a> ），拖进浏览器，如图：<br><img src="https://note.youdao.com/yws/public/resource/d25372cdef06827a98fbb4239cf4d669/xmlnote/WEBRESOURCEcbb1beabb549c6d84d52804383ac35e7/113" alt=""></p><p>在浏览器右上方有个笔的图标，点击后进入：<br><img src="https://note.youdao.com/yws/public/resource/539b1d1f1c44141ae993f89322936144/xmlnote/WEBRESOURCEf158734d57d5594290d669d5854b6d62/118" alt=""></p><p>如图，进入导入和导出界面，在下载规则下栏输入 <a href="https://github.azurezeng.com/static/HE-GoogleRedirect.json" target="_blank" rel="noopener">https://github.azurezeng.com/static/HE-GoogleRedirect.json</a> ，然后点击下载图标，就可以完成导入。</p><p>接着，就可以注册了，输入你的邮箱和密码，然后根据提示完成邮箱验证。最后进入infura：<br><img src="https://note.youdao.com/yws/public/resource/56805fba483315aa1cef4052b2ceaffa/xmlnote/WEBRESOURCE6fbd05cf05fdaabcf2b5c6f2168dc697/123" alt=""></p><p>大功告成。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm run dev启动服务报错$ is not defined</title>
      <link href="/hexoT.github.io/posts/14326.html"/>
      <url>/hexoT.github.io/posts/14326.html</url>
      
        <content type="html"><![CDATA[<h2 id="报错-is-not-defined"><a href="#报错-is-not-defined" class="headerlink" title="报错$ is not defined"></a>报错$ is not defined</h2><p>npm run dev启动服务报错$ is not defined，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.js:120 Uncaught ReferenceError: $ is not defined</span><br><span class="line">    at app.js:120</span><br></pre></td></tr></table></figure><p>还有就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js net::ERR_CONNECTION_RESET</span><br><span class="line">bootstrap.min.js:6 Uncaught Error: Bootstrap<span class="string">'s JavaScript requires jQuery</span></span><br><span class="line"><span class="string">    at bootstrap.min.js:6</span></span><br></pre></td></tr></table></figure><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>其实，归因就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js net::ERR_CONNECTION_RESET</span><br></pre></td></tr></table></figure><p>ERR_CONNECTION_RESET，很明显是报连接错误，在浏览器是无法打开<a href="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js" target="_blank" rel="noopener">https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js</a> 连接的。所以我们可以找jquery的其它连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jQuery官网</span><br><span class="line">src=<span class="string">"http://code.jquery.com/jquery-1.11.0.min.js"</span></span><br><span class="line"></span><br><span class="line">CDNJS</span><br><span class="line">src=<span class="string">"http://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.0/jquery.min.js"</span></span><br><span class="line"></span><br><span class="line">百度</span><br><span class="line">src=<span class="string">"http://libs.baidu.com/jquery/2.0.0/jquery.min.js"</span></span><br></pre></td></tr></table></figure><p>这些都可以。<br>将原来错误的连接替换为可以的连接就行了。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运行truffle migrate时报错Something went wrong while attempting to connect to the network</title>
      <link href="/hexoT.github.io/posts/26367.html"/>
      <url>/hexoT.github.io/posts/26367.html</url>
      
        <content type="html"><![CDATA[<h2 id="运行truffle-migrate时报错"><a href="#运行truffle-migrate时报错" class="headerlink" title="运行truffle migrate时报错"></a>运行truffle migrate时报错</h2><p>编译智能合约之后，部署到区块链上运行truffle migrate，报错Something went wrong while attempting to connect to the network，出现下面情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ truffle  migrate</span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br><span class="line"></span><br><span class="line">&gt; Something went wrong <span class="keyword">while</span> attempting to connect to the network. Check your network configuration.</span><br><span class="line"></span><br><span class="line">Could not connect to your Ethereum client with the following parameters:</span><br><span class="line">    - host       &gt; 127.0.0.1</span><br><span class="line">    - port       &gt; 7545</span><br><span class="line">    - network_id &gt; *</span><br><span class="line">Please check that your Ethereum client:</span><br><span class="line">    - is running</span><br><span class="line">    - is accepting RPC connections (i.e., <span class="string">"--rpc"</span> option is used <span class="keyword">in</span> geth)</span><br><span class="line">    - is accessible over the network</span><br><span class="line">    - is properly configured <span class="keyword">in</span> your Truffle configuration file (truffle-config.js)</span><br><span class="line"></span><br><span class="line">Truffle v5.1.27 (core: 5.1.27)</span><br><span class="line">Node v12.16.3</span><br></pre></td></tr></table></figure><h2 id="解决错误"><a href="#解决错误" class="headerlink" title="解决错误"></a>解决错误</h2><p>看下原因：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Could not connect to your Ethereum client with the following parameters:</span><br><span class="line">    - host       &gt; 127.0.0.1</span><br><span class="line">    - port       &gt; 7545</span><br><span class="line">    - network_id &gt; *</span><br><span class="line">Please check that your Ethereum client:</span><br><span class="line">    - is running</span><br><span class="line">    - is accepting RPC connections (i.e., <span class="string">"--rpc"</span> option is used <span class="keyword">in</span> geth)</span><br><span class="line">    - is accessible over the network</span><br><span class="line">    - is properly configured <span class="keyword">in</span> your Truffle configuration file (truffle-config.js)</span><br><span class="line"></span><br><span class="line">Truffle v5.1.27 (core: 5.1.27)</span><br><span class="line">Node v12.16.3</span><br></pre></td></tr></table></figure><p>其实，是因为 - port       &gt; 7545，在命令行运行一个区块链ganache-cli时，可以到上节！<a href="https://dextertam008.github.io/hexoT.github.io/posts/42010.html">ubuntu环境下ganace-cli的安装</a>看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$ ganache-cli</span><br><span class="line">Ganache CLI v6.9.1 (ganache-core: 2.10.2)</span><br><span class="line"></span><br><span class="line">Available Accounts</span><br><span class="line">==================</span><br><span class="line">(0) 0xF30F53857d647988c2139C06f61F201358ed7c5A (100 ETH)</span><br><span class="line">(1) 0xA6CaEC75BeD07C935c19381CcAd0B54bB0b55bcC (100 ETH)</span><br><span class="line">(2) 0xAbEAE778ee9e2f76a4639a65125CE15B3ADf6636 (100 ETH)</span><br><span class="line">(3) 0x80661508aB50B862166b900f16de7B3003b0FE77 (100 ETH)</span><br><span class="line">(4) 0x93bDddF9D2703Cf20Bcd2d2f35f7A74485C0445D (100 ETH)</span><br><span class="line">(5) 0xc6C6f5a2ebab7f093eC69Df64AeC431bf8Efb9e7 (100 ETH)</span><br><span class="line">(6) 0x440Ad2C3e69Bfda09Bf96ee2e3AC994A8CedD50f (100 ETH)</span><br><span class="line">(7) 0xeDF4d82bC91c6B686DBea965C4BBC57C3B20aBbe (100 ETH)</span><br><span class="line">(8) 0xed0724f9C9987f1E34c6ea1310Ca185B8dcFdeBF (100 ETH)</span><br><span class="line">(9) 0x042C23152E737F4a9787312347e2421EF62d3830 (100 ETH)</span><br><span class="line"></span><br><span class="line">Private Keys</span><br><span class="line">==================</span><br><span class="line">(0) 0x2da4a67fc6ca91363f8c77ad847bd39c31f8f1adebf1917bcc73479ee3c85b5b</span><br><span class="line">(1) 0x29dada3113b25e0062d98ef2c6c6bcf902890ca29fd75aa83ef51506f35d859b</span><br><span class="line">(2) 0xdf5a94d2e341cca74164109535643dfe76006962da2d722f5ec5b3b6ed156efe</span><br><span class="line">(3) 0xb8a8a3aecad4858c01c855bed20a15efbda573e009a72ded255e9431081804f1</span><br><span class="line">(4) 0xefd2f714680d3eaf56feb620c7ffa4f5dec190c55e85e0391da5c407782eac42</span><br><span class="line">(5) 0x4cfc4f098f5f377474075435eb4f9884039559e1c71a4bb47c3da6d7235143be</span><br><span class="line">(6) 0xe24daa6f598c76235c0a082cc86425e310fedcf867d847f2ae3ccbf959d5ba5e</span><br><span class="line">(7) 0xfab980ecfb7d98b84e2ecbf3a1b25a820d6bcab7d6b98445b6988d3d102afe1a</span><br><span class="line">(8) 0x8cc719c72e450fdd5ddd0e9b328a979ca38618afda188bd1471c7e3e7edea13e</span><br><span class="line">(9) 0xea1a137134552b3cbb333d40dd5deb86f4c7ece2d5285aefffb3b4f762e9a110</span><br><span class="line"></span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      fragile bar affair ritual slam patch <span class="keyword">case</span> <span class="built_in">echo</span> math napkin uncle tomato</span><br><span class="line">Base HD Path:  m/44<span class="string">'/60'</span>/0<span class="string">'/0/&#123;account_index&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gas Price</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">20000000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gas Limit</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">6721975</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Call Gas Limit</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">9007199254740991</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Listening on 127.0.0.1:8545</span></span><br></pre></td></tr></table></figure><p>服务器是监听了端口127.0.0.1:8545，而不是7545，所以我们可以到更改配置的truffle-config.js中修改端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // See &lt;http://truffleframework.com/docs/advanced/configuration&gt;</span><br><span class="line">  // <span class="keyword">for</span> more about customizing your Truffle configuration!</span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">      host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      port: 7545,</span><br><span class="line">      network_id: <span class="string">"*"</span> // Match any network id</span><br><span class="line">    &#125;,</span><br><span class="line">    develop: &#123;</span><br><span class="line">      port: 8545</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>把上面的7545修改位8545就可以了。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> truffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu环境下ganace-cli的安装</title>
      <link href="/hexoT.github.io/posts/42010.html"/>
      <url>/hexoT.github.io/posts/42010.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载ganace-cli"><a href="#下载ganace-cli" class="headerlink" title="下载ganace-cli"></a>下载ganace-cli</h2><p>可以命令行下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g ganache-cli</span><br></pre></td></tr></table></figure><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>下载后的ganache-cli会放在/node-v12.16.3-linux-x64/bin下，如图：<br>！<a href="https://note.youdao.com/yws/public/resource/b594b9af170022a9804c43e600297645/xmlnote/WEBRESOURCE2359ed98a28b6ab4e86855bde94ee5c2/103" target="_blank" rel="noopener"></a></p><p>输入以下命令进行全局配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /home/dexter/node-v12.16.3-linux-x64/bin/ganache-cli /usr/<span class="built_in">local</span>/bin/ganache-cli</span><br></pre></td></tr></table></figure><p>这样就可以在全局，即在任何一文件夹内运行ganache-cli命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$ ganache-cli</span><br><span class="line">Ganache CLI v6.9.1 (ganache-core: 2.10.2)</span><br><span class="line"></span><br><span class="line">Available Accounts</span><br><span class="line">==================</span><br><span class="line">(0) 0xF30F53857d647988c2139C06f61F201358ed7c5A (100 ETH)</span><br><span class="line">(1) 0xA6CaEC75BeD07C935c19381CcAd0B54bB0b55bcC (100 ETH)</span><br><span class="line">(2) 0xAbEAE778ee9e2f76a4639a65125CE15B3ADf6636 (100 ETH)</span><br><span class="line">(3) 0x80661508aB50B862166b900f16de7B3003b0FE77 (100 ETH)</span><br><span class="line">(4) 0x93bDddF9D2703Cf20Bcd2d2f35f7A74485C0445D (100 ETH)</span><br><span class="line">(5) 0xc6C6f5a2ebab7f093eC69Df64AeC431bf8Efb9e7 (100 ETH)</span><br><span class="line">(6) 0x440Ad2C3e69Bfda09Bf96ee2e3AC994A8CedD50f (100 ETH)</span><br><span class="line">(7) 0xeDF4d82bC91c6B686DBea965C4BBC57C3B20aBbe (100 ETH)</span><br><span class="line">(8) 0xed0724f9C9987f1E34c6ea1310Ca185B8dcFdeBF (100 ETH)</span><br><span class="line">(9) 0x042C23152E737F4a9787312347e2421EF62d3830 (100 ETH)</span><br><span class="line"></span><br><span class="line">Private Keys</span><br><span class="line">==================</span><br><span class="line">(0) 0x2da4a67fc6ca91363f8c77ad847bd39c31f8f1adebf1917bcc73479ee3c85b5b</span><br><span class="line">(1) 0x29dada3113b25e0062d98ef2c6c6bcf902890ca29fd75aa83ef51506f35d859b</span><br><span class="line">(2) 0xdf5a94d2e341cca74164109535643dfe76006962da2d722f5ec5b3b6ed156efe</span><br><span class="line">(3) 0xb8a8a3aecad4858c01c855bed20a15efbda573e009a72ded255e9431081804f1</span><br><span class="line">(4) 0xefd2f714680d3eaf56feb620c7ffa4f5dec190c55e85e0391da5c407782eac42</span><br><span class="line">(5) 0x4cfc4f098f5f377474075435eb4f9884039559e1c71a4bb47c3da6d7235143be</span><br><span class="line">(6) 0xe24daa6f598c76235c0a082cc86425e310fedcf867d847f2ae3ccbf959d5ba5e</span><br><span class="line">(7) 0xfab980ecfb7d98b84e2ecbf3a1b25a820d6bcab7d6b98445b6988d3d102afe1a</span><br><span class="line">(8) 0x8cc719c72e450fdd5ddd0e9b328a979ca38618afda188bd1471c7e3e7edea13e</span><br><span class="line">(9) 0xea1a137134552b3cbb333d40dd5deb86f4c7ece2d5285aefffb3b4f762e9a110</span><br><span class="line"></span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      fragile bar affair ritual slam patch <span class="keyword">case</span> <span class="built_in">echo</span> math napkin uncle tomato</span><br><span class="line">Base HD Path:  m/44<span class="string">'/60'</span>/0<span class="string">'/0/&#123;account_index&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gas Price</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">20000000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gas Limit</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">6721975</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Call Gas Limit</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">9007199254740991</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Listening on 127.0.0.1:8545</span></span><br></pre></td></tr></table></figure><p>运行成功如上图。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu下Metamask安装</title>
      <link href="/hexoT.github.io/posts/50760.html"/>
      <url>/hexoT.github.io/posts/50760.html</url>
      
        <content type="html"><![CDATA[<p>在 win10下Metamask中文版安装 这一节已经介绍了Metamask。在Ubuntu下安装不同的是要先下载ubuntu环境下的Chrome 浏览器，默认ubuntu环境下是没有Chrome 浏览器的。然后很多人没科学上网的，继续用上节提供的安装文件<a href="https://pan.baidu.com/s/1DpnGo5KXePIVv6hRN2gGlw" target="_blank" rel="noopener">https://pan.baidu.com/s/1DpnGo5KXePIVv6hRN2gGlw</a></p><h2 id="ubuntu环境下Chrome-浏览器安装"><a href="#ubuntu环境下Chrome-浏览器安装" class="headerlink" title="ubuntu环境下Chrome 浏览器安装"></a>ubuntu环境下Chrome 浏览器安装</h2><p>打开终端：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><br>这个谷歌Chrome64位版本的，如果是32位：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb</span><br></pre></td></tr></table></figure></p><p>下载完后，运行如下命令安装：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dpkg -i google-chrome* </span><br><span class="line">(Reading database ... 219821 files and directories currently installed.)</span><br><span class="line">Preparing to unpack google-chrome-stable_current_amd64.deb ...</span><br><span class="line">Unpacking google-chrome-stable (83.0.4103.116-1) over (83.0.4103.116-1) ...</span><br><span class="line">Setting up google-chrome-stable (83.0.4103.116-1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> gnome-menus (3.13.3-6ubuntu3.1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> desktop-file-utils (0.22-1ubuntu5.2) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> bamfdaemon (0.5.3~bzr0+16.04.20180209-0ubuntu1) ...</span><br><span class="line">Rebuilding /usr/share/applications/bamf-2.index...</span><br><span class="line">Processing triggers <span class="keyword">for</span> mime-support (3.59ubuntu1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> man-db (2.7.5-1) ...</span><br></pre></td></tr></table></figure><br>然后：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get -f install</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 99 not upgraded.</span><br></pre></td></tr></table></figure><br>然后，终端继续输入命令：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/google-chrome-stable</span><br><span class="line">[40741:40741:0712/051729.095608:ERROR:edid_parser.cc(102)] Too short EDID data: manufacturer id</span><br></pre></td></tr></table></figure><br>接着，ubuntu上会出现如图状态，成功打开Chrome 浏览器：<br><img src="https://note.youdao.com/yws/public/resource/d76084acc846f1ed54a5bc54e94f5a7b/xmlnote/WEBRESOURCEce82386d6472603b08ce9fd1e74138cd/88" alt=""></p><h2 id="ubuntu下Metamask安装"><a href="#ubuntu下Metamask安装" class="headerlink" title="ubuntu下Metamask安装"></a>ubuntu下Metamask安装</h2><p>这个基本跟win10相同，在打开的浏览器输入chrome://extensions/，将安装文件 metamask中文版.crx 拖拽进浏览器，界面如下：<br><img src="https://note.youdao.com/yws/public/resource/ecfec32aea61e4010ff0372911182d3f/xmlnote/WEBRESOURCEa129fc7dca2b0c6642cf3aff3a07863e/93" alt=""><br>点击 Add extension，将进入下一步：<br><img src="https://note.youdao.com/yws/public/resource/e77f9748674f29d98c80a21dfed92a91/xmlnote/WEBRESOURCEc4affa9ff747d8f602880b8d84f36080/98" alt=""></p><p>接着按提示注册登录就完成了。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10下Metamask中文版安装</title>
      <link href="/hexoT.github.io/posts/9027.html"/>
      <url>/hexoT.github.io/posts/9027.html</url>
      
        <content type="html"><![CDATA[<p>在一个理想的去中心化环境中，每个想要跟DApp交互的人，都需要在他们的计算机或手机上面运行 一个的完整区块链节点 —— 简言之，每个人都运行一个全节点。这意味着，在能够真正使用一个 去中心化应用之前，用户不得不下载整个区块链。期待每个用户都先运行一个全节点，然后再使用你的应用是不现实的。 但是去中心化背后的核心思想，就是不依赖于中心化的服务器。所以，区块链社区已经出现了 一些解决方案，例如提供公共区块链节点的Infura, 以及浏览器插件Metamask等。</p><p>MetaMask是一个浏览器插件，可作为MetaMask Chrome扩展或Firefox附加组件使用。它的核心是它作为以太坊钱包：通过安装它，您将可以访问一个独特的以太坊钱包地址，您可以使用它开始发送和接收以太币或ERC20通证。</p><h2 id="MetaMask安装"><a href="#MetaMask安装" class="headerlink" title="MetaMask安装"></a>MetaMask安装</h2><h3 id="官网安装"><a href="#官网安装" class="headerlink" title="官网安装"></a>官网安装</h3><p>直接进入官网 ！<a href="https://metamask.io/" target="_blank" rel="noopener">MetaMask官网</a>，点击添加即可。其实没有科学上网是搞不了的。</p><h3 id="下载文件后通过浏览器安装"><a href="#下载文件后通过浏览器安装" class="headerlink" title="下载文件后通过浏览器安装"></a>下载文件后通过浏览器安装</h3><p>百度网盘下载安装文件地址：<a href="https://pan.baidu.com/s/1DpnGo5KXePIVv6hRN2gGlw" target="_blank" rel="noopener">https://pan.baidu.com/s/1DpnGo5KXePIVv6hRN2gGlw</a><br>下载后解压，在浏览器输入chrome://extensions/，将安装文件拖拽进浏览器，即可安装。<br><img src="https://note.youdao.com/yws/public/resource/df98b0701a6f81d62bd11d03d38994e2/xmlnote/WEBRESOURCEd2d05b9ee940501b4add1812a09ce6e5/78" alt=""></p><p>然后就是一步一步按提示安装就可以了，注册进入后的界面：<br><img src="https://note.youdao.com/yws/public/resource/ad34ddefa8dca9e133438847f3a4761e/xmlnote/WEBRESOURCEc5a99bbfceb8b51f960ae438c1f3a6f0/83" alt=""></p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ETH的JavaScript项目和工具</title>
      <link href="/hexoT.github.io/posts/51414.html"/>
      <url>/hexoT.github.io/posts/51414.html</url>
      
        <content type="html"><![CDATA[<h2 id="Solidity"><a href="#Solidity" class="headerlink" title="Solidity"></a>Solidity</h2><p>Solidity 是一门面向合约的、为实现智能合约而创建的高级编程语言。这门语言受到了 C++，Python 和 Javascript 语言的影响，设计的目的是能在以太坊虚拟机（EVM）上运行。<br>！<a href="https://solidity-cn.readthedocs.io/zh/develop/" target="_blank" rel="noopener">相关文档</a><br>！<a href="https://github.com/ethereum/solidity/" target="_blank" rel="noopener">GitHub</a><br>！<a href="https://github.com/ethereum/solidity/" target="_blank" rel="noopener">应用例子：Solidity Gitter 聊天室</a></p><h2 id="Truffle"><a href="#Truffle" class="headerlink" title="Truffle"></a>Truffle</h2><p>使用节点构建的开发环境和测试框架。其本身基于Javascript。<br>！<a href="https://github.com/ethereum/solidity/" target="_blank" rel="noopener">GitHub</a><br>！<a href="https://www.trufflesuite.com/" target="_blank" rel="noopener">trufflesuite.com</a></p><h2 id="Web3-js"><a href="#Web3-js" class="headerlink" title="Web3.js"></a>Web3.js</h2><p>web3.js是一个库集合，你可以使用HTTP或IPC连接本地或远程以太它节点进行交互。 web3的JavaScript库能够与以太坊区块链交互。 我们可以在常用的JS框架 （比如 reactjs、angularjs 等)中直接引入该库来构建去中心化应用。<br>！<a href="https://web3.tryblockchain.org/" target="_blank" rel="noopener">相关文档</a><br>！<a href="https://github.com/ethereum/web3.js/" target="_blank" rel="noopener">GitHub</a></p><h2 id="Ethers-js"><a href="#Ethers-js" class="headerlink" title="Ethers.js"></a>Ethers.js</h2><p>JavaScript 和 TypeScript 中完整的以太坊钱包实现和实用工具。<br>！<a href="https://docs.ethers.io/v5/" target="_blank" rel="noopener">相关文档</a><br>！<a href="https://github.com/ethers-io/ethers.js/" target="_blank" rel="noopener">GitHub</a></p><h2 id="ethereumjs-vm"><a href="#ethereumjs-vm" class="headerlink" title="ethereumjs-vm"></a>ethereumjs-vm</h2><p>在 JavaScript 中实现以太坊虚拟机（VM）<br>！<a href="https://github.com/ethereumjs/ethereumjs-vm" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ETH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合约结构</title>
      <link href="/hexoT.github.io/posts/undefined.html"/>
      <url>/hexoT.github.io/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="合约结构"><a href="#合约结构" class="headerlink" title="合约结构"></a>合约结构</h2><p>在 Solidity 语言中，合约类似于其他面向对象编程语言中的类。<br>每个合约中可以包含 状态变量、 函数、 函数修改器 、事件 Event、 结构体、 和 枚举类型 的声明，且合约可以从其他合约继承。<br>还有一些特殊的合约，如： 库 和 接口。</p><h3 id="状态变量"><a href="#状态变量" class="headerlink" title="状态变量"></a>状态变量</h3><p>状态变量是永久地存储在合约存储中的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract TinyStorage &#123;</span><br><span class="line">    uint storedData; &#x2F;&#x2F; 状态变量</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有效的状态变量类型：布尔类型bool、整型int / uint、地址类型 Address。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数是合约中代码的可执行单元。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">function sendCoin(address receiver, uint amount) public returns(bool sufficient) &#123;</span><br><span class="line">if (balances[msg.sender] &lt; amount) return false;</span><br><span class="line">balances[msg.sender] -&#x3D; amount;</span><br><span class="line">balances[receiver] +&#x3D; amount;</span><br><span class="line">emit Transfer(msg.sender, receiver, amount);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数调用 可发生在合约内部或外部，且函数对其他合约有不同程度的可见性。合约中的所有内容对外部观察者都是可见的。设置一些 private 类型只能阻止其他合约访问和修改这些信息， 但是对于区块链外的整个世界它仍然是可见的。<br>函数 可以接受 参数(address receiver, uint amount)和返回值returns(bool sufficient)。</p><h3 id="函数修改器"><a href="#函数修改器" class="headerlink" title="函数修改器"></a>函数修改器</h3><p>使用 修改器modifier 可以轻松改变函数的行为。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;&#x3D;0.5.0 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract owned &#123;</span><br><span class="line">    function owned() public &#123; owner &#x3D; msg.sender; &#125;</span><br><span class="line">    address owner;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这个合约只定义一个修改器，但并未使用： 它将会在派生合约中用到。</span><br><span class="line">    &#x2F;&#x2F; 修改器所修饰的函数体会被插入到特殊符号 _; 的位置。</span><br><span class="line">    &#x2F;&#x2F; 这意味着如果是 owner 调用这个函数，则函数会被执行，否则会抛出异常。</span><br><span class="line">    modifier onlyOwner &#123;</span><br><span class="line">        require(</span><br><span class="line">            msg.sender &#x3D;&#x3D; owner,</span><br><span class="line">            &quot;Only owner can call this function.&quot;</span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract destructible is owned &#123;</span><br><span class="line">    &#x2F;&#x2F; 这个合约从 &#96;owned&#96; 继承了 &#96;onlyOwner&#96; 修饰符，并将其应用于 &#96;destroy&#96; 函数，</span><br><span class="line">    &#x2F;&#x2F; 只有在合约里保存的 owner 调用 &#96;destroy&#96; 函数，才会生效。</span><br><span class="line">    function destroy() public onlyOwner &#123;</span><br><span class="line">        selfdestruct(owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如上面合约，它们可以在执行函数之前自动检查某个条件，只有在合约里保存的 owner 调用 <code>destroy</code> 函数，才会生效。</p><h3 id="事件-Event"><a href="#事件-Event" class="headerlink" title="事件 Event"></a>事件 Event</h3><p>事件是能方便地调用以太坊虚拟机日志功能的接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract TinyAuction &#123;</span><br><span class="line"></span><br><span class="line">    event HighestBidIncreased(address bidder, uint amount); &#x2F;&#x2F; 事件</span><br><span class="line"></span><br><span class="line">    function bid() public payable &#123;</span><br><span class="line">        &#x2F;&#x2F; ...</span><br><span class="line">        emit HighestBidIncreased(msg.sender, msg.value); &#x2F;&#x2F; 触发事件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>Solidity 支持通过构造结构体的形式定义新的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 定义的新类型包含两个属性。</span><br><span class="line">  &#x2F;&#x2F; 在合约外部声明结构体可以使其被多个合约共享。 在这里，这并不是真正需要的。</span><br><span class="line">  struct Funder &#123;</span><br><span class="line">      address addr;</span><br><span class="line">      uint amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> contract CrowdFunding &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 也可以在合约内部定义结构体，这使得它们仅在此合约和衍生合约中可见。</span><br><span class="line">    struct Campaign &#123;</span><br><span class="line">        address beneficiary;</span><br><span class="line">        uint fundingGoal;</span><br><span class="line">        uint numFunders;</span><br><span class="line">        uint amount;</span><br><span class="line">        mapping (uint &#x3D;&gt; Funder) funders;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当然，结构体可以在合约的里面，也可以在合约外面。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract test &#123;</span><br><span class="line">    enum ActionChoices &#123; GoLeft, GoRight, GoStraight, SitStill &#125;</span><br><span class="line">    ActionChoices choice;</span><br><span class="line">    ActionChoices constant defaultChoice &#x3D; ActionChoices.GoStraight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举是在Solidity中创建用户定义类型的一种方法。 它们是显示所有整型相互转换，但不允许隐式转换。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity 源文件结构</title>
      <link href="/hexoT.github.io/posts/undefined.html"/>
      <url>/hexoT.github.io/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="Solidity-源文件结构"><a href="#Solidity-源文件结构" class="headerlink" title="Solidity 源文件结构"></a>Solidity 源文件结构</h2><p>Solidity源文件中可以包含任意多个 合约定义 、导入源文件指令 、 版本标识 指令、 结构体 和 枚举 定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">import &quot;.&#x2F;ConvertLib.sol&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; This is just a simple example of a coin-like contract.</span><br><span class="line">&#x2F;&#x2F; It is not standards compatible and cannot be expected to talk to other</span><br><span class="line">&#x2F;&#x2F; coin&#x2F;token contracts. If you want to create a standards-compliant</span><br><span class="line">&#x2F;&#x2F; token, see: https:&#x2F;&#x2F;github.com&#x2F;ConsenSys&#x2F;Tokens. Cheers!</span><br><span class="line"></span><br><span class="line">contract MetaCoin &#123;</span><br><span class="line">mapping (address &#x3D;&gt; uint) balances;</span><br><span class="line"></span><br><span class="line">event Transfer(address indexed _from, address indexed _to, uint256 _value);</span><br><span class="line"></span><br><span class="line">constructor() public &#123;</span><br><span class="line">balances[tx.origin] &#x3D; 10000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sendCoin(address receiver, uint amount) public returns(bool sufficient) &#123;</span><br><span class="line">if (balances[msg.sender] &lt; amount) return false;</span><br><span class="line">balances[msg.sender] -&#x3D; amount;</span><br><span class="line">balances[receiver] +&#x3D; amount;</span><br><span class="line">emit Transfer(msg.sender, receiver, amount);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getBalanceInEth(address addr) public view returns(uint)&#123;</span><br><span class="line">return ConvertLib.convert(getBalance(addr),2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getBalance(address addr) public view returns(uint) &#123;</span><br><span class="line">return balances[addr];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合约定义"><a href="#合约定义" class="headerlink" title="合约定义"></a>合约定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">contract MetaCoin &#123;</span><br><span class="line">uint storedXlbData; &#x2F;&#x2F; 状态变量</span><br><span class="line"></span><br><span class="line">    function getBalanceInEth(address addr) public view returns(uint)&#123;&#x2F;&#x2F; 函数</span><br><span class="line">return ConvertLib.convert(getBalance(addr),2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    modifier onlySeller() &#123; &#x2F;&#x2F; 函数修改器</span><br><span class="line">    require(</span><br><span class="line">        msg.sender &#x3D;&#x3D; seller,</span><br><span class="line">        &quot;Only seller can call this.&quot;</span><br><span class="line">    );</span><br><span class="line">    _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event Transfer(address indexed _from, address indexed _to, uint256 _value);&#x2F;&#x2F; 事件 Event</span><br><span class="line"></span><br><span class="line">    constructor() public &#123;&#x2F;&#x2F; 结构体</span><br><span class="line">balances[tx.origin] &#x3D; 10000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum State &#123; Created, Locked, InValid &#125; &#x2F;&#x2F; 枚举</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个合约例如contract MetaCoin { }中可以包含 状态变量、 函数、 函数修改器 、事件 Event、 结构体、 和 枚举类型 的声明。<br>！<a href="">合约定义</a></p><h3 id="导入源文件指令"><a href="#导入源文件指令" class="headerlink" title="导入源文件指令"></a>导入源文件指令</h3><p>在全局层面上，可使用如下格式的导入语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">"./ConvertLib.sol"</span>;</span><br></pre></td></tr></table></figure><h3 id="版本标识-指令"><a href="#版本标识-指令" class="headerlink" title="版本标识 指令"></a>版本标识 指令</h3><p>为了避免未来被可能引入不兼容更新的编译器所编译，源文件可以（也应该）使用版本 标识pragma 所注解。 我们力图把这类不兼容变更做到尽可能小，但是，Solidity 本身就处在快速的发展之中，所以我们很难保证不引入修改语法的变更。 因此对含重大变更的版本，通读变更日志永远是好办法，变更日志通常会有版本号表明更新点。</p><p>版本标识使用如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br></pre></td></tr></table></figure><p>这样，源文件将既不允许低于 0.4.25 版本的编译器编译， 也不允许高于（包含） 0.7.0 版本的编译器编译（第二个条件因使用 ^ 被添加）。 这种做法的考虑是，编译器在 0.7.0 版本之前不会有重大变更，所以可确保源代码始终按预期被编译。</p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>Solidity 支持通过构造结构体的形式定义新的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 定义的新类型包含两个属性。</span><br><span class="line">  &#x2F;&#x2F; 在合约外部声明结构体可以使其被多个合约共享。 在这里，这并不是真正需要的。</span><br><span class="line">  struct Funder &#123;</span><br><span class="line">      address addr;</span><br><span class="line">      uint amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> contract CrowdFunding &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 也可以在合约内部定义结构体，这使得它们仅在此合约和衍生合约中可见。</span><br><span class="line">    struct Campaign &#123;</span><br><span class="line">        address beneficiary;</span><br><span class="line">        uint fundingGoal;</span><br><span class="line">        uint numFunders;</span><br><span class="line">        uint amount;</span><br><span class="line">        mapping (uint &#x3D;&gt; Funder) funders;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当然，结构体可以在合约的里面，也可以在合约外面。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract test &#123;</span><br><span class="line">    enum ActionChoices &#123; GoLeft, GoRight, GoStraight, SitStill &#125;</span><br><span class="line">    ActionChoices choice;</span><br><span class="line">    ActionChoices constant defaultChoice &#x3D; ActionChoices.GoStraight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举是在Solidity中创建用户定义类型的一种方法。 它们是显示所有整型相互转换，但不允许隐式转换。</p>]]></content>
      
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity开发使用命令truffle unbox metacoin时发生错误的解决方法</title>
      <link href="/hexoT.github.io/posts/5886.html"/>
      <url>/hexoT.github.io/posts/5886.html</url>
      
        <content type="html"><![CDATA[<h2 id="输入命令truffle-unbox-metacoin"><a href="#输入命令truffle-unbox-metacoin" class="headerlink" title="输入命令truffle unbox metacoin"></a>输入命令truffle unbox metacoin</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle unbox metacoin</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle unbox init</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">This directory is non-empty...</span><br><span class="line">? Proceed anyway? (Y/n) </span><br><span class="line">Starting unbox...</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">? Proceed anyway? Yes</span><br><span class="line">✔ Preparing to download box</span><br><span class="line">✖ Downloading</span><br><span class="line">Unbox failed!</span><br><span class="line">✖ Downloading</span><br><span class="line">Unbox failed!</span><br><span class="line">RequestError: Error: connect ECONNREFUSED 151.101.228.133:443</span><br><span class="line">    at new RequestError (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/node_modules/request-promise-core/lib/errors.js:14:1)</span><br><span class="line">    at Request.plumbing.callback (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/node_modules/request-promise-core/lib/plumbing.js:87:1)</span><br><span class="line">    at Request.RP<span class="variable">$callback</span> [as _callback] (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/node_modules/request-promise-core/lib/plumbing.js:46:1)</span><br><span class="line">    at self.callback (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/node_modules/request/request.js:185:1)</span><br><span class="line">    at Request.emit (events.js:310:20)</span><br><span class="line">    at Request.onRequestError (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/node_modules/request/request.js:881:1)</span><br><span class="line">    at ClientRequest.emit (events.js:310:20)</span><br><span class="line">    at TLSSocket.socketErrorListener (_http_client.js:426:9)</span><br><span class="line">    at TLSSocket.emit (events.js:310:20)</span><br><span class="line">    at emitErrorNT (internal/streams/destroy.js:92:8)</span><br><span class="line">    at emitErrorAndCloseNT (internal/streams/destroy.js:60:3)</span><br><span class="line">    at processTicksAndRejections (internal/process/task_queues.js:84:21)</span><br><span class="line">Truffle v5.1.27 (core: 5.1.27)</span><br><span class="line">Node v12.16.3</span><br></pre></td></tr></table></figure><p>后来多次尝试重新输入命令，在新文件夹运行truffle unbox metacoin结果也一样。网上查是网络问题，其实真的的网络问题，重启手机热点，重启电脑后，再次输入命令truffle unbox metacoin：<br>！<a href="https://note.youdao.com/yws/public/resource/f8b6169bde7085e7ea9c1bb0d29a2ea7/xmlnote/WEBRESOURCEc4609d47cd64fd317a157b7432ed1472/72" target="_blank" rel="noopener"></a></p><p>至此，大功告成。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle与合约交互</title>
      <link href="/hexoT.github.io/posts/21694.html"/>
      <url>/hexoT.github.io/posts/21694.html</url>
      
        <content type="html"><![CDATA[<h2 id="为何要用truffle与合约交互"><a href="#为何要用truffle与合约交互" class="headerlink" title="为何要用truffle与合约交互"></a>为何要用truffle与合约交互</h2><p>如果我们为了与合约进行（测试）交互而向每次都向以太坊网络进行原始请求，我们很快就会意识到编写这些请求是笨重而繁琐的。 同样，我们可能会发现管理每个请求的状态是 复杂的。 幸运的是，Truffle为我们处理这种复杂性，使我们与合约的互动变得轻而易举。</p><h2 id="以太坊网络数据的读和写"><a href="#以太坊网络数据的读和写" class="headerlink" title="以太坊网络数据的读和写"></a>以太坊网络数据的读和写</h2><p>以太坊网络区分将数据写入网络和从网络读取数据。 通常，写入数据称为交易 transaction，而读取数据称为 调用 call。</p><h3 id="交易-Transactions"><a href="#交易-Transactions" class="headerlink" title="交易 Transactions"></a>交易 Transactions</h3><p>交易从改变了网络的状态。 交易的特征是它写入（或更改）数据。 一个交易需要耗费以太运行，称为 “gas”，交易同样需要（较长）时间来处理。通常，通过交易执行的函数不会返回值，仅仅是返回一个交易ID。 可总结交易的特征如下：</p><p>*消耗Gas 费用（以太）<br>*会更改网络状态<br>*不会立即执行（需要等待网络矿工打包）<br>*没有执行返回值（只是一个交易ID）。</p><h3 id="调用-Calls"><a href="#调用-Calls" class="headerlink" title="调用 Calls"></a>调用 Calls</h3><p>调用的特征是读取数据。 当我们通过调用执行合约函数时，我们可以立刻获取到返回值。 可总结调用Call的特点：</p><p>*免费（不消耗 Gas）<br>*不改变网络状态<br>*立即执行<br>*有返回值</p><h2 id="何为合约抽象"><a href="#何为合约抽象" class="headerlink" title="何为合约抽象"></a>何为合约抽象</h2><p>合约抽象是一种代码封装，让我们可以轻松地与合约进行交互。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle unbox metacoin</span><br></pre></td></tr></table></figure><p>终端执行truffle unbox metacoin，在/contrct目录下到开MetaCoin.sol这个合约我们可以看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">import <span class="string">"./ConvertLib.sol"</span>;</span><br><span class="line"></span><br><span class="line">// This is just a simple example of a coin-like contract.</span><br><span class="line">// It is not standards compatible and cannot be expected to talk to other</span><br><span class="line">// coin/token contracts. If you want to create a standards-compliant</span><br><span class="line">// token, see: https://github.com/ConsenSys/Tokens. Cheers!</span><br><span class="line"></span><br><span class="line">contract MetaCoin &#123;</span><br><span class="line">mapping (address =&gt; uint) balances;</span><br><span class="line"></span><br><span class="line">event Transfer(address indexed _from, address indexed _to, uint256 _value);</span><br><span class="line"></span><br><span class="line">constructor() public &#123;</span><br><span class="line">balances[tx.origin] = 10000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> sendCoin(address receiver, uint amount) public returns(bool sufficient) &#123;</span><br><span class="line"><span class="keyword">if</span> (balances[msg.sender] &lt; amount) <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">balances[msg.sender] -= amount;</span><br><span class="line">balances[receiver] += amount;</span><br><span class="line">emit Transfer(msg.sender, receiver, amount);</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getBalanceInEth(address addr) public view returns(uint)&#123;</span><br><span class="line"><span class="built_in">return</span> ConvertLib.convert(getBalance(addr),2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getBalance(address addr) public view returns(uint) &#123;</span><br><span class="line"><span class="built_in">return</span> balances[addr];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在contract MetaCoin {}下有事件event Transfer()，构造函数constructor()，还有三个函数（sendCoin，getBalanceInEth和getBalance）。理解合约抽象，其实就是一种封装，说白了就是打包。contract MetaCoin {}下打包了事件，构造函数，三个函数（sendCoin，getBalanceInEth和getBalance）…</p><h2 id="控制台上输入命令与合约进行交互"><a href="#控制台上输入命令与合约进行交互" class="headerlink" title="控制台上输入命令与合约进行交互"></a>控制台上输入命令与合约进行交互</h2><h3 id="启动控制台前的工作"><a href="#启动控制台前的工作" class="headerlink" title="启动控制台前的工作"></a>启动控制台前的工作</h3><p>使用合约抽象，我们可以轻松地在以太坊网络上执行合约函数，进行交互。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle compile</span><br></pre></td></tr></table></figure><p>在执行部署之前，需要确保有一个区块链运行， 可以使用<br>Ganache（ubuntu环境下Ganache的安装） 来开启一个私链来进行开发测试，默认会在 8545 端口上运行一个开发链。<br>在启动Ganache前，还应该先修改truffle-config.js文件，连接本地ganache-cli环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // Uncommenting the defaults below </span><br><span class="line">  // provides <span class="keyword">for</span> an easier quick-start with Ganache.</span><br><span class="line">  // You can also follow this format <span class="keyword">for</span> other networks;</span><br><span class="line">  // see &lt;http://truffleframework.com/docs/advanced/configuration&gt;</span><br><span class="line">  // <span class="keyword">for</span> more details on how to specify configuration options!</span><br><span class="line">  //</span><br><span class="line"> networks: &#123;</span><br><span class="line">  development: &#123;</span><br><span class="line">   host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    port: 8545,</span><br><span class="line">    network_id: <span class="string">"*"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  //  <span class="built_in">test</span>: &#123;</span><br><span class="line">  //    host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  //    port: 7545,</span><br><span class="line">  //    network_id: <span class="string">"*"</span></span><br><span class="line">  //  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  //</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后运行ganache-cli：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ganache-cli</span><br></pre></td></tr></table></figure><p>Ganache 启动之后是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Ganache CLI v6.9.1 (ganache-core: 2.10.2)</span><br><span class="line"></span><br><span class="line">Available Accounts</span><br><span class="line">==================</span><br><span class="line">(0) 0xF30F53857d647988c2139C06f61F201358ed7c5A (100 ETH)</span><br><span class="line">(1) 0xA6CaEC75BeD07C935c19381CcAd0B54bB0b55bcC (100 ETH)</span><br><span class="line">(2) 0xAbEAE778ee9e2f76a4639a65125CE15B3ADf6636 (100 ETH)</span><br><span class="line">(3) 0x80661508aB50B862166b900f16de7B3003b0FE77 (100 ETH)</span><br><span class="line">(4) 0x93bDddF9D2703Cf20Bcd2d2f35f7A74485C0445D (100 ETH)</span><br><span class="line">(5) 0xc6C6f5a2ebab7f093eC69Df64AeC431bf8Efb9e7 (100 ETH)</span><br><span class="line">(6) 0x440Ad2C3e69Bfda09Bf96ee2e3AC994A8CedD50f (100 ETH)</span><br><span class="line">(7) 0xeDF4d82bC91c6B686DBea965C4BBC57C3B20aBbe (100 ETH)</span><br><span class="line">(8) 0xed0724f9C9987f1E34c6ea1310Ca185B8dcFdeBF (100 ETH)</span><br><span class="line">(9) 0x042C23152E737F4a9787312347e2421EF62d3830 (100 ETH)</span><br><span class="line"></span><br><span class="line">Private Keys</span><br><span class="line">==================</span><br><span class="line">(0) 0x2da4a67fc6ca91363f8c77ad847bd39c31f8f1adebf1917bcc73479ee3c85b5b</span><br><span class="line">(1) 0x29dada3113b25e0062d98ef2c6c6bcf902890ca29fd75aa83ef51506f35d859b</span><br><span class="line">(2) 0xdf5a94d2e341cca74164109535643dfe76006962da2d722f5ec5b3b6ed156efe</span><br><span class="line">(3) 0xb8a8a3aecad4858c01c855bed20a15efbda573e009a72ded255e9431081804f1</span><br><span class="line">(4) 0xefd2f714680d3eaf56feb620c7ffa4f5dec190c55e85e0391da5c407782eac42</span><br><span class="line">(5) 0x4cfc4f098f5f377474075435eb4f9884039559e1c71a4bb47c3da6d7235143be</span><br><span class="line">(6) 0xe24daa6f598c76235c0a082cc86425e310fedcf867d847f2ae3ccbf959d5ba5e</span><br><span class="line">(7) 0xfab980ecfb7d98b84e2ecbf3a1b25a820d6bcab7d6b98445b6988d3d102afe1a</span><br><span class="line">(8) 0x8cc719c72e450fdd5ddd0e9b328a979ca38618afda188bd1471c7e3e7edea13e</span><br><span class="line">(9) 0xea1a137134552b3cbb333d40dd5deb86f4c7ece2d5285aefffb3b4f762e9a110</span><br><span class="line"></span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      fragile bar affair ritual slam patch <span class="keyword">case</span> <span class="built_in">echo</span> math napkin uncle tomato</span><br><span class="line">Base HD Path:  m/44<span class="string">'/60'</span>/0<span class="string">'/0/&#123;account_index&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gas Price</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">20000000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gas Limit</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">6721975</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Call Gas Limit</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">9007199254740991</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Listening on 127.0.0.1:8545</span></span><br></pre></td></tr></table></figure><h3 id="启动控制台执行合约函数"><a href="#启动控制台执行合约函数" class="headerlink" title="启动控制台执行合约函数"></a>启动控制台执行合约函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle develop</span><br></pre></td></tr></table></figure><p>然后出现控制台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truffle(develop)&gt;</span><br></pre></td></tr></table></figure><h4 id="执行交易Transactions"><a href="#执行交易Transactions" class="headerlink" title="执行交易Transactions"></a>执行交易Transactions</h4><p>下面我们执行交易，使用 sendCoin交易调用的方式从一个帐户向另一个帐户发送20个币：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">truffle(develop)&gt; <span class="built_in">let</span> instance = await MetaCoin.deployed()</span><br><span class="line">undefined</span><br><span class="line">truffle(develop)&gt;<span class="built_in">let</span> account = await web3.eth.getAccounts()</span><br><span class="line">undefined</span><br><span class="line">truffle(develop)&gt;instance.sendCoin(accounts[1], 20, &#123;from: accounts[0]&#125;)</span><br><span class="line">&#123;</span><br><span class="line">  tx: <span class="string">'0xe54369d0f53f4009934891c9b3e266d17b643a4f56528a483d9bbad3fbfb306a'</span>,</span><br><span class="line">  receipt: &#123;</span><br><span class="line">    transactionHash: <span class="string">'0xe54369d0f53f4009934891c9b3e266d17b643a4f56528a483d9bbad3fbfb306a'</span>,</span><br><span class="line">    transactionIndex: 0,</span><br><span class="line">    blockHash: <span class="string">'0x7d59dbf8a0fdcb5cba53d78bed7a61b1812ef4cea0bfb4a7acdd5e38d0d4b646'</span>,</span><br><span class="line">    blockNumber: 8,</span><br><span class="line">    from: <span class="string">'0x5944f1ef9bbdd9f9924f86fe741ddecb4bd309a9'</span>,</span><br><span class="line">    to: <span class="string">'0x51b60184eae1b3b281909751a616b323f1a145bd'</span>,</span><br><span class="line">    gasUsed: 36508,</span><br><span class="line">    cumulativeGasUsed: 36508,</span><br><span class="line">    contractAddress: null,</span><br><span class="line">    logs: [ [Object] ],</span><br><span class="line">    status: <span class="literal">true</span>,</span><br><span class="line">    logsBloom: <span class="string">'0x0000000000000000000000000000000000040000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000c000000000000000000400000000000000000000040000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000002000000000000000000000000000000000000002400000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'</span>,</span><br><span class="line">    rawLogs: [ [Object] ]</span><br><span class="line">  &#125;,</span><br><span class="line">  logs: [</span><br><span class="line">    &#123;</span><br><span class="line">      logIndex: 0,</span><br><span class="line">      transactionIndex: 0,</span><br><span class="line">      transactionHash: <span class="string">'0xe54369d0f53f4009934891c9b3e266d17b643a4f56528a483d9bbad3fbfb306a'</span>,</span><br><span class="line">      blockHash: <span class="string">'0x7d59dbf8a0fdcb5cba53d78bed7a61b1812ef4cea0bfb4a7acdd5e38d0d4b646'</span>,</span><br><span class="line">      blockNumber: 8,</span><br><span class="line">      address: <span class="string">'0x51b60184EAE1b3B281909751A616B323f1a145bd'</span>,</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">'mined'</span>,</span><br><span class="line">      id: <span class="string">'log_9b49c3fe'</span>,</span><br><span class="line">      event: <span class="string">'Transfer'</span>,</span><br><span class="line">      args: [Result]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体来说，我们将获得以下内容：</p><p>*instance.tx (string) - 交易哈希 hash<br>*instance.logs (array) - 解码过的事件 (日志)<br>*instance.receipt (object) - 交易收据 receipt（包括使用的gas）</p><h4 id="执行调用-call"><a href="#执行调用-call" class="headerlink" title="执行调用 call"></a>执行调用 call</h4><p>由上面可知MetaCoin.getBalance方法是执行调用 call。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">truffle(develop)&gt; <span class="built_in">let</span> balance = await instance.getBalance(accounts[0])</span><br><span class="line">undefined</span><br><span class="line">truffle(develop)&gt; balance.toNumber()</span><br><span class="line">9980</span><br></pre></td></tr></table></figure><p>调用会得到返回值9980。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合约部署</title>
      <link href="/hexoT.github.io/posts/undefined.html"/>
      <url>/hexoT.github.io/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>migrate，部署，将写好的合约部署到以太坊网络。</p><h2 id="部署命令"><a href="#部署命令" class="headerlink" title="部署命令"></a>部署命令</h2><p>要部署合约到以太坊网络，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle migrate</span><br></pre></td></tr></table></figure><p>这将部署在项目 migrations 目录中的所有迁移文件。 最简单的迁移只是一组管理部署脚本。 如果我们的迁移先前已成功运行，则 truffle migrate 将从上次运行的迁移开始执行，仅运行新创建的迁移。 如果不存在新的迁移，truffle migrate 将不会执行任何操作。 我们可以使用 –reset 选项从头开始运行所有迁移。 对于本地测试，确保在执行 migrate 之前安装并运行了 Ganache等 测试区块链。<br>！<a href="https://note.youdao.com/yws/public/resource/3ba8726079648ae34cb158e719c8365d/xmlnote/WEBRESOURCE87d470bd269186e4b9cdbfaf569829a0/67" target="_blank" rel="noopener"></a></p><p>项目 migrations 目录中的迁移文件</p><h2 id="迁移文件"><a href="#迁移文件" class="headerlink" title="迁移文件"></a>迁移文件</h2><p>以 migrations 目录中的迁移文件1_initial_migration.js为例，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var Migrations = artifacts.require(<span class="string">"./Migrations.sol"</span>);</span><br><span class="line"></span><br><span class="line">module.exports = <span class="keyword">function</span>(deployer) &#123;</span><br><span class="line"> deployer.deploy(Migrations);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>要注意，文件名以数字为前缀，后缀为描述。 编号前缀是必需的，以便记录迁移是否成功运行。编号有记录 运行迁移文件顺序的作用。</p><h3 id="artifacts-require（）"><a href="#artifacts-require（）" class="headerlink" title="artifacts.require（）"></a>artifacts.require（）</h3><p>在迁移开始时，我们通过 artifacts.require（）方法告诉 Truffle 我们想要与哪些合约进行交互。 这个方法类似于Node的 require。（）里放的就是合约文件的路径。</p><h3 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h3><p>所有迁移都必须通过 module.exports 语法导出函数。 每次迁移导出的函数都应该接受 deployer 对象作为其第一个参数。 此对象通过为部署智能合约提供清晰的语法以及执行部署职责（例如保存已部署的 artifacts 供以后使用）。 deployer 对象是用于暂存部署任务最主要接口。</p><h3 id="部署程序-Deployer"><a href="#部署程序-Deployer" class="headerlink" title="部署程序 Deployer"></a>部署程序 Deployer</h3><p>deployer 对象可以同步编写部署任务，它们将以正确的顺序执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 顺序部署AB</span><br><span class="line">deployer.deploy(A);</span><br><span class="line">deployer.deploy(B);</span><br></pre></td></tr></table></figure><p>或者，部署程序上的每个函数可以使用 Promise，等待上一个任务执行的部署任务完成之后执行（进入一个部署队列）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 部署A完毕，执行B</span><br><span class="line"> deployer.deploy(A).<span class="keyword">then</span>(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> deployer.deploy(B, A.address);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>下面将介绍 deployer 对象的API</p><h3 id="deployer-对象的API"><a href="#deployer-对象的API" class="headerlink" title="deployer 对象的API"></a>deployer 对象的API</h3><h4 id="deployer-deploy-contract-args…-options"><a href="#deployer-deploy-contract-args…-options" class="headerlink" title="deployer.deploy(contract, args…, options)"></a>deployer.deploy(contract, args…, options)</h4><p>deployer.deploy(contract, args…, options) (合约, 不定参数, 选项)部署合约可以通过使用指定合约对象和可选的合约构造函数的参数来进行合约部署。<br>下面通过示例更好理解 deploy 方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 部署没有构造函数的合约</span><br><span class="line">deployer.deploy(A);</span><br><span class="line"></span><br><span class="line">//  部署合约 并使用一些参数传递给合约的构造函数。</span><br><span class="line">deployer.deploy(A, arg1, arg2, ...);</span><br><span class="line"></span><br><span class="line">// 设置overwrite属性为<span class="literal">false</span>，如果合约部署过，不会覆盖</span><br><span class="line">deployer.deploy(A, &#123;overwrite: <span class="literal">false</span>&#125;);</span><br><span class="line"></span><br><span class="line">// 设置gasLimit 和部署合约的账号</span><br><span class="line">deployer.deploy(A, &#123;gas: 4612388, from: <span class="string">"0x...."</span>&#125;);</span><br><span class="line"></span><br><span class="line">// 部署多个合约，一些包含参数，另一些没有。</span><br><span class="line">// 这比编写三个`deployer.deploy（）`语句更快，因为部署者可以作为单个批处理请求执行部署。</span><br><span class="line">deployer.deploy([</span><br><span class="line">  [A, arg1, arg2, ...],</span><br><span class="line">  B,</span><br><span class="line">  [C, arg1]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h4 id="deployer-link-library-destinations"><a href="#deployer-link-library-destinations" class="headerlink" title="deployer.link(library, destinations)"></a>deployer.link(library, destinations)</h4><p>将已部署的库链接到合约或多个合约。 参数 destinations 可以是单个合约，也可以是多个合约的数组。 如果目的（即参数指定的）合约中有不依赖于链接的库，则合约将被忽略。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 部署库LibA，然后将已部署的LibA链接到合约B，然后部署B.</span><br><span class="line">deployer.deploy(LibA);</span><br><span class="line">deployer.link(LibA, B);</span><br><span class="line">deployer.deploy(B);</span><br><span class="line"></span><br><span class="line">// 链接 LibA 到多个合约</span><br><span class="line">deployer.link(LibA, [B, C, D]);</span><br></pre></td></tr></table></figure><h4 id="deployer-then-function-…"><a href="#deployer-then-function-…" class="headerlink" title="deployer.then(function() {…})"></a>deployer.then(function() {…})</h4><p>就像 promise 一样，可运行任意部署步骤。 使用此选项可在迁移期间调用特定的合约函数，以添加，编辑和重新组织合约数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var a, b;</span><br><span class="line">deployer.then(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  // 创建一个新版本的 A</span><br><span class="line">  <span class="built_in">return</span> A.new();</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(instance) &#123;</span><br><span class="line">  a = instance;</span><br><span class="line">  // 获取部署的 B 实例</span><br><span class="line">  <span class="built_in">return</span> B.deployed();</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(instance) &#123;</span><br><span class="line">  b = instance;</span><br><span class="line">  // 通过B的setA（）函数在B上设置A的新实例地址</span><br><span class="line">  <span class="built_in">return</span> b.setA(a.address);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="可选网络"><a href="#可选网络" class="headerlink" title="可选网络"></a>可选网络</h3><p>可以根据网络条件，条件性地运行部署。要有条件地运行部署步骤，在编写迁移时，加入第二个参数 network， 例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = <span class="keyword">function</span>(deployer, network) &#123;</span><br><span class="line">  <span class="keyword">if</span> (network == <span class="string">"dexter"</span>) &#123;</span><br><span class="line">    // Do something specific to the network named <span class="string">"dexter"</span>.</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    // Perform a different step otherwise.</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊合约编译</title>
      <link href="/hexoT.github.io/posts/52995.html"/>
      <url>/hexoT.github.io/posts/52995.html</url>
      
        <content type="html"><![CDATA[<h2 id="合约文件目录"><a href="#合约文件目录" class="headerlink" title="合约文件目录"></a>合约文件目录</h2><p>所有合约都位于项目的 contracts/ 目录中。 由于合约是用Solidity语言编写的，所有包含合约的文件都将具有 .sol 文件扩展名。 相关的 Solidity 库也将有一个.sol扩展名。</p><p>使用truffle init命令创建的空 Truffle 工程会生成一个用于部署的Migrations.sol 合约文件。 如果我们使用 Truffle Box 来创建工程，则会有多个合约文件。<br>！<a href="https://note.youdao.com/yws/public/resource/874ce020b56a45ac1473dc8dc4f74a4b/xmlnote/WEBRESOURCEb239401647e26a06b3e941b7ce89295c/57" target="_blank" rel="noopener"></a><br>如图是contracts/ 目录下的Migrations.sol合约。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>切换到项目工程所在根目录，然后在终端中键入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle compile</span><br></pre></td></tr></table></figure><p>首次运行时，将编译所有合约。 在后续运行中，truffle将仅编译自上次编译以来有更改的合约。 如果我们想覆盖此行为，可以使用 –all 选项运行上面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ truffle compile</span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br></pre></td></tr></table></figure><p>如上truffle将仅编译自上次编译以来有更改的合约,没有更改就出现Everything is up to date, there is nothing to compile。</p><h2 id="目标文件-Artifacts"><a href="#目标文件-Artifacts" class="headerlink" title="目标文件 Artifacts"></a>目标文件 Artifacts</h2><p>编译的目标文件 Artifacts 将放在 build/contracts/ 目录中：<br>！<a href="https://note.youdao.com/yws/public/resource/74a297d3939ea035df49bfe05a1fe0c8/xmlnote/WEBRESOURCEa3392aad57f048ffc22b33d7772ae35a/62" target="_blank" rel="noopener"></a><br>可以看到目标文件 Artifacts其实就是JSON对象文件。这些 Artifacts 是Truffle内部工作的组成部分，它们在成功部署应用程序中起着重要作用。 我们不应编辑这些文件，因为这些文件将被合约编译和部署覆盖。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/be8fef50fbc9563b8db8c83b97fec7af/xmlnote/WEBRESOURCEf91ac400d752cf9334486c4500242eca/130" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle命令指南</title>
      <link href="/hexoT.github.io/posts/63269.html"/>
      <url>/hexoT.github.io/posts/63269.html</url>
      
        <content type="html"><![CDATA[<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle [<span class="built_in">command</span>] [options]</span><br></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="truffle-console"><a href="#truffle-console" class="headerlink" title="truffle console"></a>truffle console</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ truffle console</span><br><span class="line">truffle(default)&gt;</span><br></pre></td></tr></table></figure><p>使用默认网络来调起一个控制台，会自动连接到一个运行中的以太坊客户端。你可以使用选项–network来修改这个特性。</p><p>控制台支持Truffle命令行支持的命令，比如，你可以在控制台中执行migrate –reset，其效果与在命令行中执行truffle migrate –reset的效果一致。Truffle的控制台额外增加如下特性：<br>*所有已经编译的合约都可用。就像在开发测试，前端代码中，或者移植代码中那样使用。<br>*在每个命令后，你的合约会被重新加载。如使用migrate –reset命令后，你可以立即使用新分配的地址和二进制。<br>*web3库也可以使用，且也连到你了的以太坊客户端。<br>*所有命令返回的promise，会自动解析，直接打印出结果，你可以不用输入then()，简化了命令。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ truffle(default)&gt; MyContract.deployed().getValue.call(); </span><br><span class="line">  8</span><br></pre></td></tr></table></figure><h4 id="truffle-build"><a href="#truffle-build" class="headerlink" title="truffle build"></a>truffle build</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle build</span><br></pre></td></tr></table></figure><p>构建结果存在./build目录。所以合约文件则在对应的位置./build/contracts。</p><h4 id="truffle-compile"><a href="#truffle-compile" class="headerlink" title="truffle compile"></a>truffle compile</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle compile</span><br></pre></td></tr></table></figure><p>智能编译你的合约，仅会编译自上次编译后修改过的合约，除非另外指定强制刷新。可选参数：<br>*–compile-all: 强制编译所有合约。<br>*–network 名称：指定使用的网络，保存编译的结果到指定的网络上。</p><h4 id="truffle-migrate"><a href="#truffle-migrate" class="headerlink" title="truffle migrate"></a>truffle migrate</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle migrate</span><br></pre></td></tr></table></figure><p>运行工程的移植。可选的参数：<br>*–reset: 从头运行所有的移植。<br>*–network 名称：指定要使用的网络，并将编译后的资料保存到那个网络。<br>*–to number：将版本从当前版本移植到序号指定的版本。<br>*–compile-all: 强制编译所有的合约<br>*–verbose-rpc：打印Truffle与RPC交互的详细日志。</p><h4 id="truffle-init"><a href="#truffle-init" class="headerlink" title="truffle init"></a>truffle init</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle init</span><br></pre></td></tr></table></figure><p>在当前目录下初始化一个全新的APP，一个全新的工程。会自带默认合约和前端配置。</p><h4 id="truffle-serve"><a href="#truffle-serve" class="headerlink" title="truffle serve"></a>truffle serve</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle serve</span><br></pre></td></tr></table></figure><p>在 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 提供编译的app对应的服务，且在需要的时候自动构建，自动部署。与truffle watch类似，区别在于这里增加web服务器功能。可选参数：<br>*-p port: 指定http服务的端口。默认是8080。<br>*–network 名称：名称：指定要使用的网络，并将编译后的资料保存到那个网络。</p><h4 id="truffle-test"><a href="#truffle-test" class="headerlink" title="truffle test"></a>truffle test</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ $ truffle <span class="built_in">test</span> [/path/to/<span class="built_in">test</span>/file]</span><br></pre></td></tr></table></figure><p>运行所有在./test目录下的测试用例。或可选的运行单个测试文件。可选参数：<br>*–network 名称：指定要使用的网络，并将编译后的资料保存到那个网络。<br>*–compile-all: 强制编译所有的合约<br>*–verbose-rpc：打印Truffle与RPC交互的详细日志。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> truffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle的入门介绍</title>
      <link href="/hexoT.github.io/posts/36087.html"/>
      <url>/hexoT.github.io/posts/36087.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是truffle"><a href="#什么是truffle" class="headerlink" title="什么是truffle"></a>什么是truffle</h2><p>truffle是一个世界级的开发环境，是针对基于以太坊的Solidity语言的一套开发框架，其本身基于Javascript。它致力于让以太坊上的开发变得简单：<br>*内置的智能合约编译，链接，部署和二进制文件的管理。<br>*针对快速迭代开发的自动化合约测试。<br>*可脚本化，可扩展的部署与迁移框架。<br>*用于部署到任意数量的公网或私网的网络环境管理。<br>*使用EthPM&amp;NPM提供的包管理，使用ERC190标准。<br>*与合约直接通信的交互控制台。<br>*可配的构建流程，支持紧密集成。<br>*在Truffle环境里支持执行外部的脚本。</p><p>truffle的github网址：<a href="https://github.com/trufflesuite/truffle" target="_blank" rel="noopener">https://github.com/trufflesuite/truffle</a></p><h2 id="学习Truffle需要什么基础"><a href="#学习Truffle需要什么基础" class="headerlink" title="学习Truffle需要什么基础"></a>学习Truffle需要什么基础</h2><p>*前面说过truffle其本身基于Javascript，但对Javascript的要求比较低，知道基本语法、模块、Promise的概念差不多就可以了。<br>*需要知道Solidity知识，其实它的语法接近于Javascript，是一种面向对象的语言。支持继承、库和复杂的用户定义类型等特性。<br>*Solidity还受到C++，Python 和 Javascript 语言的影响，设计的目的是能在以太坊虚拟机（EVM）上运行。但其实我们在用Solidity开发智能合约时候会发现为什么这么像在写Javascript代码。</p><h2 id="truffle是怎样开发以太坊"><a href="#truffle是怎样开发以太坊" class="headerlink" title="truffle是怎样开发以太坊"></a>truffle是怎样开发以太坊</h2><p>*编译合约<br>*合约部署<br>*与合约进行交互<br>*truffle 和 MetaMask 配合<br>*用 EthPM 进行包管理<br>*用 NPM 进行包管理<br>*调试合约<br>*选择网络及部署</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> truffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu环境下truffle的安装及使用</title>
      <link href="/hexoT.github.io/posts/35987.html"/>
      <url>/hexoT.github.io/posts/35987.html</url>
      
        <content type="html"><![CDATA[<h2 id="truffle的开发环境"><a href="#truffle的开发环境" class="headerlink" title="truffle的开发环境"></a>truffle的开发环境</h2><p>ubuntu环境下开发truffle之前应该先安装好nodejs，网上有很多教程，大家可以直接在网上找，这就不重复造轮了。<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure><br>下载后使用node -v就可以看到node的版本，建议下载最新的。<br><img src="https://note.youdao.com/yws/public/resource/d634a3cf8ba9e85e81e6e24b9ac71c3d/xmlnote/WEBRESOURCE41c4e33b664209d4c46e6424117c5781/27" alt=""><br>接下来，还应该安装NodeJS中用到的truffle运行时需要的web3环境<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">- bignumber.js@2.0.7 node_modules/web3/node_modules/bignumber.js</span><br><span class="line">truffle3@1.0.0 /Users/TryBlockchain/develop/blockchain_workspace/truffle3</span><br><span class="line">└── web3@0.18.2</span><br></pre></td></tr></table></figure><br>如果使用truffle没有集成web3环境，可能会报下述错误：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">/Users/TryBlockchain/develop/blockchain_workspace/truffle3/main/main.js:4</span><br><span class="line">var provider = new Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>);</span><br><span class="line">                ^</span><br><span class="line"></span><br><span class="line">ReferenceError: Web3 is not defined</span><br></pre></td></tr></table></figure><br>Web3 is not defined，Web3还没定义，很明显是还没安装web3所导致的。</p><h2 id="truffle的安装"><a href="#truffle的安装" class="headerlink" title="truffle的安装"></a>truffle的安装</h2>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g truffle</span><br></pre></td></tr></table></figure><p>安装完毕，可以查看truffle是否安装成功。<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle version</span><br></pre></td></tr></table></figure><br><img src="https://note.youdao.com/yws/public/resource/22434c326d0d36f27bfae9948f2d2d94/xmlnote/WEBRESOURCE433ddb943009ede5e46e0c1a52f84fe9/32" alt=""><br>可以看到版本号，说明安装成功。</p><h2 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h2><p>新建一个空文件夹truffle-demo。然后进入文件夹<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle unbox pet-shop</span><br></pre></td></tr></table></figure><br><img src="https://note.youdao.com/yws/public/resource/244052e724159ffb295e083a8a875ab9/xmlnote/WEBRESOURCE1dc5b2f1d9fc3fffb30c02592f4e39da/37" alt=""><br>如图则表示trufflebox 初始化模板成功。<br>值得注意的是，安装过程如果出现下面这种情况：<br><img src="https://note.youdao.com/yws/public/resource/132a29ecd1acaa6c2b8201314249154e/xmlnote/WEBRESOURCE010a823079eb4225020bec9c361dd083/43" alt=""><br>则多数是因为网络不行导致的，用个好的网络就可以安装成功了。有时候是因为ubuntu断网了，重启ubuntu网络连接就好了。<br>看一下工程目录:<br><img src="https://note.youdao.com/yws/public/resource/4f17f7e27c8b49ac07ca8b24d0668171/xmlnote/WEBRESOURCE7cc3cef2ddf2648f55564ebfcd4d25bf/47" alt=""> </p><p>contracts:智能合约文件夹<br>migrations:用于部署的脚本<br>node_modules:nodejs<br>src:前端资源<br>test:单元测试<br>bs-config.json:lite-server的配置文件<br>package.json:nodejs依赖<br>truffle-config.js:truffle的配置</p><p>终端输入truffle develop 进入truffle 控制台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ truffle develop</span><br><span class="line">Truffle Develop started at http://127.0.0.1:8545/</span><br><span class="line"></span><br><span class="line">Accounts:</span><br><span class="line">(0) 0x5944f1ef9bbdd9f9924f86fe741ddecb4bd309a9</span><br><span class="line">(1) 0x439740ddc74491bd8019660d4542dee4678a401f</span><br><span class="line">(2) 0xd983f44dde381165878a27583b2660f758d4c7c5</span><br><span class="line">(3) 0x2517f698c61a3977230863bb11534d1ee7b25bce</span><br><span class="line">(4) 0x09da34c90e08adbb7d3c01cf5195b2d7f60c8efd</span><br><span class="line">(5) 0x21ce72d1a911b21f1945477c66395df8533365ad</span><br><span class="line">(6) 0x9502d7b179d4c38e21bc8f463d9344c03618a2d8</span><br><span class="line">(7) 0x6c73739d47ec7973b474d315beaecfed8c4c191b</span><br><span class="line">(8) 0x73bf236c3219350c3a49c6a5627032f50613192c</span><br><span class="line">(9) 0x5e810c521cc4b1c64160610c21532fcf50c44f48</span><br><span class="line"></span><br><span class="line">Private Keys:</span><br><span class="line">(0) 20721027b4ce8cd236f0a4195b4368c6395f8f7fdacf0390f0c506f02d5817c3</span><br><span class="line">(1) f6f85db817cbeca90023118b4a29dbaa5038e9d83dafd2d65db0b34dab9e4440</span><br><span class="line">(2) 68f9f4b86804a8ecb04a89776d7345110e37006b80efde4c3af7f23a8ec7011b</span><br><span class="line">(3) 1b1bf475c27b9c39ebc6b51fae3af49b433a8ad71d9b14540138d1ae643b2d26</span><br><span class="line">(4) 56a39f50edef69d18fff3b2696b00c0750b7b64f64f1584a15b086b65bdd5630</span><br><span class="line">(5) 8aa3f24263cb9bf3a7563b1b77d636f43b8fb9b160733447bfddc33db2094281</span><br><span class="line">(6) 0980de4fa5ebd017550ecda18e09812166ee9b7e2eeb75407c43e6399ba59171</span><br><span class="line">(7) e06f24f41ec689aabda2ac7f59d63a9578ff2fba447ada48fc91c639c0caa2dd</span><br><span class="line">(8) 87c5df96d80ee5abcfbf063303ae9845d1a54a6c7371991eaa046e9baa254571</span><br><span class="line">(9) 8ca326c26cba303f0573be05771d12783c18fba99abcd0f8228ef228b8eb4318</span><br><span class="line"></span><br><span class="line">Mnemonic: foil damage razor border under disorder isolate wood mansion slim solution lock</span><br><span class="line"></span><br><span class="line">⚠️  Important ⚠️  : This mnemonic was created <span class="keyword">for</span> you by Truffle. It is not secure.</span><br><span class="line">Ensure you <span class="keyword">do</span> not use it on production blockchains, or <span class="keyword">else</span> you risk losing funds.</span><br><span class="line"></span><br><span class="line">truffle(develop)&gt;</span><br></pre></td></tr></table></figure><p>在truffle控制台输入compile进行编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">truffle(develop)&gt; compile</span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Compiling ./contracts/Migrations.sol</span><br><span class="line">&gt; Artifacts written to /home/dexter/truffe-demo/build/contracts</span><br><span class="line">&gt; Compiled successfully using:</span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br></pre></td></tr></table></figure><p>输入migrate进行发布：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">truffle(develop)&gt; migrate</span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line">&gt; Network name:    <span class="string">'develop'</span></span><br><span class="line">&gt; Network id:      5777</span><br><span class="line">&gt; Block gas <span class="built_in">limit</span>: 6721975 (0x6691b7)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Migrations'</span></span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; transaction <span class="built_in">hash</span>:    0xf22102c79bd174a31ec86e2e6779486e17b2bd7bf0e4066fb044bdd33d83e255</span><br><span class="line">   &gt; Blocks: 0            Seconds: 0</span><br><span class="line">   &gt; contract address:    0xA2f91131Ca34Fa891fC1A2C1144413cD354454A1</span><br><span class="line">   &gt; block number:        1</span><br><span class="line">   &gt; block timestamp:     1593914207</span><br><span class="line">   &gt; account:             0x5944f1Ef9bbdD9F9924f86Fe741ddECB4bD309A9</span><br><span class="line">   &gt; balance:             99.9967165</span><br><span class="line">   &gt; gas used:            164175 (0x2814f)</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.0032835 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:           0.0032835 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line">&gt; Total deployments:   1</span><br><span class="line">&gt; Final cost:          0.0032835 ETH</span><br></pre></td></tr></table></figure><p>输入test指令进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">truffle(develop)&gt; <span class="built_in">test</span></span><br><span class="line">Using network <span class="string">'develop'</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> truffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu环境下Loom SDK 的安装及使用</title>
      <link href="/hexoT.github.io/posts/38678.html"/>
      <url>/hexoT.github.io/posts/38678.html</url>
      
        <content type="html"><![CDATA[<p>写在前面的话，为何要使用Loom？</p><h2 id="Loom的介绍"><a href="#Loom的介绍" class="headerlink" title="Loom的介绍"></a>Loom的介绍</h2><p>Loom，下一代区块链平台。<br>官网地址：<a href="https://loomx.io/" target="_blank" rel="noopener">https://loomx.io/</a><br>github地址：<a href="https://github.com/loomnetwork" target="_blank" rel="noopener">https://github.com/loomnetwork</a><br>喜欢Loom是有原因的。它不像其它区块链项目，一上来就搞什么白皮书的，搞圈钱运动。Loom的团队从来都是脚踏实地的做区块链的事。<br>*Loom Dappchains采用的是DPOS共识。<br>*Loom Network基于以太坊开发了Loom Network侧链，且基于以太坊的ERC20协议发布Token，Loom币。。<br>*Loom SDK 打造你自己的区块链，选择你自己的共识机制，创建你自己的规则集，发布可运行在任何云平台的全包节点软件。有了 Loom, 你只需专注应用开发。<br>*DAppChains 是一个拥有所有特性的区块链，可运行在以太坊智能合约上。它们是一种先进的侧链，针对大规模数据优化，而非金融交易。每个 DApp 都运行在自己的区块链上，其数据是公开且可分叉的，恰如以太坊和区块链。<br>*Loom Network是一个针对游戏和社交的DApp链，发布SDK，开发者来编写应用。</p><h2 id="Loom的下载"><a href="#Loom的下载" class="headerlink" title="Loom的下载"></a>Loom的下载</h2><p>我使用的系统是Linux(Window 暂时不支持，可以选择ubuntu虚拟机)。<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://private.delegatecall.com/loom/linux/stable/loom</span><br></pre></td></tr></table></figure></p><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>ubuntu下的环境变量配置是这样的:<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /home/dexter/node-v12.16.3-linux-x64/bin/loom /usr/<span class="built_in">local</span>/bin/loom</span><br></pre></td></tr></table></figure><br>我们把上面下载后的执行文件放到ubuntu home目录的/node-v12.16.3-linux-x64/bin/下,我的home目录是 /home/dexter/,如下图已经把loom执行文件放/node-v12.16.3-linux-x64/bin/目录下:<br>！<a href="https://note.youdao.com/yws/public/resource/325f64800ec30c8191ad335ad339aafc/xmlnote/WEBRESOURCE4fb9dd787191f70b56523228a1fbe781/9" target="_blank" rel="noopener"></a><br>如此就完成loom的全局配置。</p><h2 id="开始使用loom命令"><a href="#开始使用loom命令" class="headerlink" title="开始使用loom命令"></a>开始使用loom命令</h2>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir loom-chain</span><br><span class="line">$ <span class="built_in">cd</span> loom-chain</span><br></pre></td></tr></table></figure><p>在ubuntu中创建loom-chain文件夹并在文件夹中打开命令行，如下：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ loom init</span><br></pre></td></tr></table></figure><br>！<a href="https://note.youdao.com/yws/public/resource/c8a3ebc7983c51b0354f71801559ab0b/xmlnote/WEBRESOURCEffd41093c425a1186f0fd26969fd6557/19" target="_blank" rel="noopener"></a></p><p>执行loom init初始化后生成文件如图。初始化命令会生成 genesis.json 和 chaindata 目录，genesis.json 是这条侧链的创世纪块配置，chaindata 目录用户保存区块数据。</p><h2 id="运行loom区块链"><a href="#运行loom区块链" class="headerlink" title="运行loom区块链"></a>运行loom区块链</h2><p>在loom-chain文件夹使用以下的命令可以启动刚刚初始化的 loom 侧链：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ loom run</span><br></pre></td></tr></table></figure><br>启动后的界面是这样：</p><p>！<a href="https://note.youdao.com/yws/public/resource/ef82b85c89089ba6d99639867c5d7480/xmlnote/WEBRESOURCE15661a3e9aa228abab7aeabd5b9deaa2/22" target="_blank" rel="noopener"></a></p><p>至此，完成ubuntu环境下Loom SDK 的安装及使用</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
