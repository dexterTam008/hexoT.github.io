<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Metamask中文版安装</title>
      <link href="/hexoT.github.io/posts/9027.html"/>
      <url>/hexoT.github.io/posts/9027.html</url>
      
        <content type="html"><![CDATA[<p>在一个理想的去中心化环境中，每个想要跟DApp交互的人，都需要在他们的计算机或手机上面运行 一个的完整区块链节点 —— 简言之，每个人都运行一个全节点。这意味着，在能够真正使用一个 去中心化应用之前，用户不得不下载整个区块链。期待每个用户都先运行一个全节点，然后再使用你的应用是不现实的。 但是去中心化背后的核心思想，就是不依赖于中心化的服务器。所以，区块链社区已经出现了 一些解决方案，例如提供公共区块链节点的Infura, 以及浏览器插件Metamask等。</p><p>MetaMask是一个浏览器插件，可作为MetaMask Chrome扩展或Firefox附加组件使用。它的核心是它作为以太坊钱包：通过安装它，您将可以访问一个独特的以太坊钱包地址，您可以使用它开始发送和接收以太币或ERC20通证。</p><h2 id="MetaMask安装"><a href="#MetaMask安装" class="headerlink" title="MetaMask安装"></a>MetaMask安装</h2><h3 id="官网安装"><a href="#官网安装" class="headerlink" title="官网安装"></a>官网安装</h3><p>直接进入官网 ！<a href="https://metamask.io/" target="_blank" rel="noopener">MetaMask官网</a>，点击添加即可。其实没有科学上网是搞不了的。</p><h3 id="下载文件后通过浏览器安装"><a href="#下载文件后通过浏览器安装" class="headerlink" title="下载文件后通过浏览器安装"></a>下载文件后通过浏览器安装</h3><p>百度网盘下载安装文件地址：<a href="https://pan.baidu.com/s/1DpnGo5KXePIVv6hRN2gGlw" target="_blank" rel="noopener">https://pan.baidu.com/s/1DpnGo5KXePIVv6hRN2gGlw</a><br>下载后解压，在浏览器输入chrome://extensions/，将安装文件拖拽进浏览器，即可安装。<br>！<a href="https://note.youdao.com/yws/public/resource/df98b0701a6f81d62bd11d03d38994e2/xmlnote/WEBRESOURCEd2d05b9ee940501b4add1812a09ce6e5/78" target="_blank" rel="noopener"></a></p><p>然后就是一步一步按提示安装就可以了，注册进入后的界面：<br>！<a href="https://note.youdao.com/yws/public/resource/ad34ddefa8dca9e133438847f3a4761e/xmlnote/WEBRESOURCEc5a99bbfceb8b51f960ae438c1f3a6f0/83" target="_blank" rel="noopener"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ETH的JavaScript项目和工具</title>
      <link href="/hexoT.github.io/posts/51414.html"/>
      <url>/hexoT.github.io/posts/51414.html</url>
      
        <content type="html"><![CDATA[<h2 id="Solidity"><a href="#Solidity" class="headerlink" title="Solidity"></a>Solidity</h2><p>Solidity 是一门面向合约的、为实现智能合约而创建的高级编程语言。这门语言受到了 C++，Python 和 Javascript 语言的影响，设计的目的是能在以太坊虚拟机（EVM）上运行。<br>！<a href="https://solidity-cn.readthedocs.io/zh/develop/" target="_blank" rel="noopener">相关文档</a><br>！<a href="https://github.com/ethereum/solidity/" target="_blank" rel="noopener">GitHub</a><br>！<a href="https://github.com/ethereum/solidity/" target="_blank" rel="noopener">应用例子：Solidity Gitter 聊天室</a></p><h2 id="Truffle"><a href="#Truffle" class="headerlink" title="Truffle"></a>Truffle</h2><p>使用节点构建的开发环境和测试框架。其本身基于Javascript。<br>！<a href="https://github.com/ethereum/solidity/" target="_blank" rel="noopener">GitHub</a><br>！<a href="https://www.trufflesuite.com/" target="_blank" rel="noopener">trufflesuite.com</a></p><h2 id="Web3-js"><a href="#Web3-js" class="headerlink" title="Web3.js"></a>Web3.js</h2><p>web3.js是一个库集合，你可以使用HTTP或IPC连接本地或远程以太它节点进行交互。 web3的JavaScript库能够与以太坊区块链交互。 我们可以在常用的JS框架 （比如 reactjs、angularjs 等)中直接引入该库来构建去中心化应用。<br>！<a href="https://web3.tryblockchain.org/" target="_blank" rel="noopener">相关文档</a><br>！<a href="https://github.com/ethereum/web3.js/" target="_blank" rel="noopener">GitHub</a></p><h2 id="Ethers-js"><a href="#Ethers-js" class="headerlink" title="Ethers.js"></a>Ethers.js</h2><p>JavaScript 和 TypeScript 中完整的以太坊钱包实现和实用工具。<br>！<a href="https://docs.ethers.io/v5/" target="_blank" rel="noopener">相关文档</a><br>！<a href="https://github.com/ethers-io/ethers.js/" target="_blank" rel="noopener">GitHub</a></p><h2 id="ethereumjs-vm"><a href="#ethereumjs-vm" class="headerlink" title="ethereumjs-vm"></a>ethereumjs-vm</h2><p>在 JavaScript 中实现以太坊虚拟机（VM）<br>！<a href="https://github.com/ethereumjs/ethereumjs-vm" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ETH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合约结构</title>
      <link href="/hexoT.github.io/posts/undefined.html"/>
      <url>/hexoT.github.io/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="合约结构"><a href="#合约结构" class="headerlink" title="合约结构"></a>合约结构</h2><p>在 Solidity 语言中，合约类似于其他面向对象编程语言中的类。<br>每个合约中可以包含 状态变量、 函数、 函数修改器 、事件 Event、 结构体、 和 枚举类型 的声明，且合约可以从其他合约继承。<br>还有一些特殊的合约，如： 库 和 接口。</p><h3 id="状态变量"><a href="#状态变量" class="headerlink" title="状态变量"></a>状态变量</h3><p>状态变量是永久地存储在合约存储中的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract TinyStorage &#123;</span><br><span class="line">    uint storedData; &#x2F;&#x2F; 状态变量</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有效的状态变量类型：布尔类型bool、整型int / uint、地址类型 Address。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数是合约中代码的可执行单元。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">function sendCoin(address receiver, uint amount) public returns(bool sufficient) &#123;</span><br><span class="line">if (balances[msg.sender] &lt; amount) return false;</span><br><span class="line">balances[msg.sender] -&#x3D; amount;</span><br><span class="line">balances[receiver] +&#x3D; amount;</span><br><span class="line">emit Transfer(msg.sender, receiver, amount);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数调用 可发生在合约内部或外部，且函数对其他合约有不同程度的可见性。合约中的所有内容对外部观察者都是可见的。设置一些 private 类型只能阻止其他合约访问和修改这些信息， 但是对于区块链外的整个世界它仍然是可见的。<br>函数 可以接受 参数(address receiver, uint amount)和返回值returns(bool sufficient)。</p><h3 id="函数修改器"><a href="#函数修改器" class="headerlink" title="函数修改器"></a>函数修改器</h3><p>使用 修改器modifier 可以轻松改变函数的行为。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;&#x3D;0.5.0 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract owned &#123;</span><br><span class="line">    function owned() public &#123; owner &#x3D; msg.sender; &#125;</span><br><span class="line">    address owner;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这个合约只定义一个修改器，但并未使用： 它将会在派生合约中用到。</span><br><span class="line">    &#x2F;&#x2F; 修改器所修饰的函数体会被插入到特殊符号 _; 的位置。</span><br><span class="line">    &#x2F;&#x2F; 这意味着如果是 owner 调用这个函数，则函数会被执行，否则会抛出异常。</span><br><span class="line">    modifier onlyOwner &#123;</span><br><span class="line">        require(</span><br><span class="line">            msg.sender &#x3D;&#x3D; owner,</span><br><span class="line">            &quot;Only owner can call this function.&quot;</span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract destructible is owned &#123;</span><br><span class="line">    &#x2F;&#x2F; 这个合约从 &#96;owned&#96; 继承了 &#96;onlyOwner&#96; 修饰符，并将其应用于 &#96;destroy&#96; 函数，</span><br><span class="line">    &#x2F;&#x2F; 只有在合约里保存的 owner 调用 &#96;destroy&#96; 函数，才会生效。</span><br><span class="line">    function destroy() public onlyOwner &#123;</span><br><span class="line">        selfdestruct(owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如上面合约，它们可以在执行函数之前自动检查某个条件，只有在合约里保存的 owner 调用 <code>destroy</code> 函数，才会生效。</p><h3 id="事件-Event"><a href="#事件-Event" class="headerlink" title="事件 Event"></a>事件 Event</h3><p>事件是能方便地调用以太坊虚拟机日志功能的接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract TinyAuction &#123;</span><br><span class="line"></span><br><span class="line">    event HighestBidIncreased(address bidder, uint amount); &#x2F;&#x2F; 事件</span><br><span class="line"></span><br><span class="line">    function bid() public payable &#123;</span><br><span class="line">        &#x2F;&#x2F; ...</span><br><span class="line">        emit HighestBidIncreased(msg.sender, msg.value); &#x2F;&#x2F; 触发事件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>Solidity 支持通过构造结构体的形式定义新的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 定义的新类型包含两个属性。</span><br><span class="line">  &#x2F;&#x2F; 在合约外部声明结构体可以使其被多个合约共享。 在这里，这并不是真正需要的。</span><br><span class="line">  struct Funder &#123;</span><br><span class="line">      address addr;</span><br><span class="line">      uint amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> contract CrowdFunding &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 也可以在合约内部定义结构体，这使得它们仅在此合约和衍生合约中可见。</span><br><span class="line">    struct Campaign &#123;</span><br><span class="line">        address beneficiary;</span><br><span class="line">        uint fundingGoal;</span><br><span class="line">        uint numFunders;</span><br><span class="line">        uint amount;</span><br><span class="line">        mapping (uint &#x3D;&gt; Funder) funders;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当然，结构体可以在合约的里面，也可以在合约外面。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract test &#123;</span><br><span class="line">    enum ActionChoices &#123; GoLeft, GoRight, GoStraight, SitStill &#125;</span><br><span class="line">    ActionChoices choice;</span><br><span class="line">    ActionChoices constant defaultChoice &#x3D; ActionChoices.GoStraight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举是在Solidity中创建用户定义类型的一种方法。 它们是显示所有整型相互转换，但不允许隐式转换。</p>]]></content>
      
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity 源文件结构</title>
      <link href="/hexoT.github.io/posts/undefined.html"/>
      <url>/hexoT.github.io/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="Solidity-源文件结构"><a href="#Solidity-源文件结构" class="headerlink" title="Solidity 源文件结构"></a>Solidity 源文件结构</h2><p>Solidity源文件中可以包含任意多个 合约定义 、导入源文件指令 、 版本标识 指令、 结构体 和 枚举 定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">import &quot;.&#x2F;ConvertLib.sol&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; This is just a simple example of a coin-like contract.</span><br><span class="line">&#x2F;&#x2F; It is not standards compatible and cannot be expected to talk to other</span><br><span class="line">&#x2F;&#x2F; coin&#x2F;token contracts. If you want to create a standards-compliant</span><br><span class="line">&#x2F;&#x2F; token, see: https:&#x2F;&#x2F;github.com&#x2F;ConsenSys&#x2F;Tokens. Cheers!</span><br><span class="line"></span><br><span class="line">contract MetaCoin &#123;</span><br><span class="line">mapping (address &#x3D;&gt; uint) balances;</span><br><span class="line"></span><br><span class="line">event Transfer(address indexed _from, address indexed _to, uint256 _value);</span><br><span class="line"></span><br><span class="line">constructor() public &#123;</span><br><span class="line">balances[tx.origin] &#x3D; 10000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sendCoin(address receiver, uint amount) public returns(bool sufficient) &#123;</span><br><span class="line">if (balances[msg.sender] &lt; amount) return false;</span><br><span class="line">balances[msg.sender] -&#x3D; amount;</span><br><span class="line">balances[receiver] +&#x3D; amount;</span><br><span class="line">emit Transfer(msg.sender, receiver, amount);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getBalanceInEth(address addr) public view returns(uint)&#123;</span><br><span class="line">return ConvertLib.convert(getBalance(addr),2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getBalance(address addr) public view returns(uint) &#123;</span><br><span class="line">return balances[addr];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合约定义"><a href="#合约定义" class="headerlink" title="合约定义"></a>合约定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">contract MetaCoin &#123;</span><br><span class="line">uint storedXlbData; &#x2F;&#x2F; 状态变量</span><br><span class="line"></span><br><span class="line">    function getBalanceInEth(address addr) public view returns(uint)&#123;&#x2F;&#x2F; 函数</span><br><span class="line">return ConvertLib.convert(getBalance(addr),2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    modifier onlySeller() &#123; &#x2F;&#x2F; 函数修改器</span><br><span class="line">    require(</span><br><span class="line">        msg.sender &#x3D;&#x3D; seller,</span><br><span class="line">        &quot;Only seller can call this.&quot;</span><br><span class="line">    );</span><br><span class="line">    _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event Transfer(address indexed _from, address indexed _to, uint256 _value);&#x2F;&#x2F; 事件 Event</span><br><span class="line"></span><br><span class="line">    constructor() public &#123;&#x2F;&#x2F; 结构体</span><br><span class="line">balances[tx.origin] &#x3D; 10000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum State &#123; Created, Locked, InValid &#125; &#x2F;&#x2F; 枚举</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个合约例如contract MetaCoin { }中可以包含 状态变量、 函数、 函数修改器 、事件 Event、 结构体、 和 枚举类型 的声明。<br>！<a href="">合约定义</a></p><h3 id="导入源文件指令"><a href="#导入源文件指令" class="headerlink" title="导入源文件指令"></a>导入源文件指令</h3><p>在全局层面上，可使用如下格式的导入语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">"./ConvertLib.sol"</span>;</span><br></pre></td></tr></table></figure><h3 id="版本标识-指令"><a href="#版本标识-指令" class="headerlink" title="版本标识 指令"></a>版本标识 指令</h3><p>为了避免未来被可能引入不兼容更新的编译器所编译，源文件可以（也应该）使用版本 标识pragma 所注解。 我们力图把这类不兼容变更做到尽可能小，但是，Solidity 本身就处在快速的发展之中，所以我们很难保证不引入修改语法的变更。 因此对含重大变更的版本，通读变更日志永远是好办法，变更日志通常会有版本号表明更新点。</p><p>版本标识使用如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br></pre></td></tr></table></figure><p>这样，源文件将既不允许低于 0.4.25 版本的编译器编译， 也不允许高于（包含） 0.7.0 版本的编译器编译（第二个条件因使用 ^ 被添加）。 这种做法的考虑是，编译器在 0.7.0 版本之前不会有重大变更，所以可确保源代码始终按预期被编译。</p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>Solidity 支持通过构造结构体的形式定义新的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 定义的新类型包含两个属性。</span><br><span class="line">  &#x2F;&#x2F; 在合约外部声明结构体可以使其被多个合约共享。 在这里，这并不是真正需要的。</span><br><span class="line">  struct Funder &#123;</span><br><span class="line">      address addr;</span><br><span class="line">      uint amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> contract CrowdFunding &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 也可以在合约内部定义结构体，这使得它们仅在此合约和衍生合约中可见。</span><br><span class="line">    struct Campaign &#123;</span><br><span class="line">        address beneficiary;</span><br><span class="line">        uint fundingGoal;</span><br><span class="line">        uint numFunders;</span><br><span class="line">        uint amount;</span><br><span class="line">        mapping (uint &#x3D;&gt; Funder) funders;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当然，结构体可以在合约的里面，也可以在合约外面。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;&#x3D;0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract test &#123;</span><br><span class="line">    enum ActionChoices &#123; GoLeft, GoRight, GoStraight, SitStill &#125;</span><br><span class="line">    ActionChoices choice;</span><br><span class="line">    ActionChoices constant defaultChoice &#x3D; ActionChoices.GoStraight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举是在Solidity中创建用户定义类型的一种方法。 它们是显示所有整型相互转换，但不允许隐式转换。</p>]]></content>
      
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity开发使用命令truffle unbox metacoin时发生错误的解决方法</title>
      <link href="/hexoT.github.io/posts/5886.html"/>
      <url>/hexoT.github.io/posts/5886.html</url>
      
        <content type="html"><![CDATA[<h2 id="输入命令truffle-unbox-metacoin"><a href="#输入命令truffle-unbox-metacoin" class="headerlink" title="输入命令truffle unbox metacoin"></a>输入命令truffle unbox metacoin</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle unbox metacoin</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle unbox init</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">This directory is non-empty...</span><br><span class="line">? Proceed anyway? (Y/n) </span><br><span class="line">Starting unbox...</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">? Proceed anyway? Yes</span><br><span class="line">✔ Preparing to download box</span><br><span class="line">✖ Downloading</span><br><span class="line">Unbox failed!</span><br><span class="line">✖ Downloading</span><br><span class="line">Unbox failed!</span><br><span class="line">RequestError: Error: connect ECONNREFUSED 151.101.228.133:443</span><br><span class="line">    at new RequestError (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/node_modules/request-promise-core/lib/errors.js:14:1)</span><br><span class="line">    at Request.plumbing.callback (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/node_modules/request-promise-core/lib/plumbing.js:87:1)</span><br><span class="line">    at Request.RP<span class="variable">$callback</span> [as _callback] (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/node_modules/request-promise-core/lib/plumbing.js:46:1)</span><br><span class="line">    at self.callback (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/node_modules/request/request.js:185:1)</span><br><span class="line">    at Request.emit (events.js:310:20)</span><br><span class="line">    at Request.onRequestError (/home/dexter/node-v12.16.3-linux-x64/lib/node_modules/truffle/build/webpack:/node_modules/request/request.js:881:1)</span><br><span class="line">    at ClientRequest.emit (events.js:310:20)</span><br><span class="line">    at TLSSocket.socketErrorListener (_http_client.js:426:9)</span><br><span class="line">    at TLSSocket.emit (events.js:310:20)</span><br><span class="line">    at emitErrorNT (internal/streams/destroy.js:92:8)</span><br><span class="line">    at emitErrorAndCloseNT (internal/streams/destroy.js:60:3)</span><br><span class="line">    at processTicksAndRejections (internal/process/task_queues.js:84:21)</span><br><span class="line">Truffle v5.1.27 (core: 5.1.27)</span><br><span class="line">Node v12.16.3</span><br></pre></td></tr></table></figure><p>后来多次尝试重新输入命令，在新文件夹运行truffle unbox metacoin结果也一样。网上查是网络问题，其实真的的网络问题，重启手机热点，重启电脑后，再次输入命令truffle unbox metacoin：<br>！<a href="https://note.youdao.com/yws/public/resource/f8b6169bde7085e7ea9c1bb0d29a2ea7/xmlnote/WEBRESOURCEc4609d47cd64fd317a157b7432ed1472/72" target="_blank" rel="noopener"></a></p><p>至此，大功告成。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle与合约交互</title>
      <link href="/hexoT.github.io/posts/21694.html"/>
      <url>/hexoT.github.io/posts/21694.html</url>
      
        <content type="html"><![CDATA[<h2 id="为何要用truffle与合约交互"><a href="#为何要用truffle与合约交互" class="headerlink" title="为何要用truffle与合约交互"></a>为何要用truffle与合约交互</h2><p>如果我们为了与合约进行（测试）交互而向每次都向以太坊网络进行原始请求，我们很快就会意识到编写这些请求是笨重而繁琐的。 同样，我们可能会发现管理每个请求的状态是 复杂的。 幸运的是，Truffle为我们处理这种复杂性，使我们与合约的互动变得轻而易举。</p><h2 id="以太坊网络数据的读和写"><a href="#以太坊网络数据的读和写" class="headerlink" title="以太坊网络数据的读和写"></a>以太坊网络数据的读和写</h2><p>以太坊网络区分将数据写入网络和从网络读取数据。 通常，写入数据称为交易 transaction，而读取数据称为 调用 call。</p><h3 id="交易-Transactions"><a href="#交易-Transactions" class="headerlink" title="交易 Transactions"></a>交易 Transactions</h3><p>交易从改变了网络的状态。 交易的特征是它写入（或更改）数据。 一个交易需要耗费以太运行，称为 “gas”，交易同样需要（较长）时间来处理。通常，通过交易执行的函数不会返回值，仅仅是返回一个交易ID。 可总结交易的特征如下：</p><p>*消耗Gas 费用（以太）<br>*会更改网络状态<br>*不会立即执行（需要等待网络矿工打包）<br>*没有执行返回值（只是一个交易ID）。</p><h3 id="调用-Calls"><a href="#调用-Calls" class="headerlink" title="调用 Calls"></a>调用 Calls</h3><p>调用的特征是读取数据。 当我们通过调用执行合约函数时，我们可以立刻获取到返回值。 可总结调用Call的特点：</p><p>*免费（不消耗 Gas）<br>*不改变网络状态<br>*立即执行<br>*有返回值</p><h2 id="何为合约抽象"><a href="#何为合约抽象" class="headerlink" title="何为合约抽象"></a>何为合约抽象</h2><p>合约抽象是一种代码封装，让我们可以轻松地与合约进行交互。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle unbox metacoin</span><br></pre></td></tr></table></figure><p>终端执行truffle unbox metacoin，在/contrct目录下到开MetaCoin.sol这个合约我们可以看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.4.25 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">import <span class="string">"./ConvertLib.sol"</span>;</span><br><span class="line"></span><br><span class="line">// This is just a simple example of a coin-like contract.</span><br><span class="line">// It is not standards compatible and cannot be expected to talk to other</span><br><span class="line">// coin/token contracts. If you want to create a standards-compliant</span><br><span class="line">// token, see: https://github.com/ConsenSys/Tokens. Cheers!</span><br><span class="line"></span><br><span class="line">contract MetaCoin &#123;</span><br><span class="line">mapping (address =&gt; uint) balances;</span><br><span class="line"></span><br><span class="line">event Transfer(address indexed _from, address indexed _to, uint256 _value);</span><br><span class="line"></span><br><span class="line">constructor() public &#123;</span><br><span class="line">balances[tx.origin] = 10000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> sendCoin(address receiver, uint amount) public returns(bool sufficient) &#123;</span><br><span class="line"><span class="keyword">if</span> (balances[msg.sender] &lt; amount) <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">balances[msg.sender] -= amount;</span><br><span class="line">balances[receiver] += amount;</span><br><span class="line">emit Transfer(msg.sender, receiver, amount);</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getBalanceInEth(address addr) public view returns(uint)&#123;</span><br><span class="line"><span class="built_in">return</span> ConvertLib.convert(getBalance(addr),2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getBalance(address addr) public view returns(uint) &#123;</span><br><span class="line"><span class="built_in">return</span> balances[addr];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在contract MetaCoin {}下有事件event Transfer()，构造函数constructor()，还有三个函数（sendCoin，getBalanceInEth和getBalance）。理解合约抽象，其实就是一种封装，说白了就是打包。contract MetaCoin {}下打包了事件，构造函数，三个函数（sendCoin，getBalanceInEth和getBalance）…</p><h2 id="控制台上输入命令与合约进行交互"><a href="#控制台上输入命令与合约进行交互" class="headerlink" title="控制台上输入命令与合约进行交互"></a>控制台上输入命令与合约进行交互</h2><h3 id="启动控制台前的工作"><a href="#启动控制台前的工作" class="headerlink" title="启动控制台前的工作"></a>启动控制台前的工作</h3><p>使用合约抽象，我们可以轻松地在以太坊网络上执行合约函数，进行交互。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle compile</span><br></pre></td></tr></table></figure><p>在执行部署之前，需要确保有一个区块链运行， 可以使用<br>Ganache（ubuntu环境下Ganache的安装） 来开启一个私链来进行开发测试，默认会在 8545 端口上运行一个开发链。<br>在启动Ganache前，还应该先修改truffle-config.js文件，连接本地ganache-cli环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // Uncommenting the defaults below </span><br><span class="line">  // provides <span class="keyword">for</span> an easier quick-start with Ganache.</span><br><span class="line">  // You can also follow this format <span class="keyword">for</span> other networks;</span><br><span class="line">  // see &lt;http://truffleframework.com/docs/advanced/configuration&gt;</span><br><span class="line">  // <span class="keyword">for</span> more details on how to specify configuration options!</span><br><span class="line">  //</span><br><span class="line"> networks: &#123;</span><br><span class="line">  development: &#123;</span><br><span class="line">   host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    port: 8545,</span><br><span class="line">    network_id: <span class="string">"*"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  //  <span class="built_in">test</span>: &#123;</span><br><span class="line">  //    host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  //    port: 7545,</span><br><span class="line">  //    network_id: <span class="string">"*"</span></span><br><span class="line">  //  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  //</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后运行ganache-cli：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ganache-cli</span><br></pre></td></tr></table></figure><p>Ganache 启动之后是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Ganache CLI v6.9.1 (ganache-core: 2.10.2)</span><br><span class="line"></span><br><span class="line">Available Accounts</span><br><span class="line">==================</span><br><span class="line">(0) 0xF30F53857d647988c2139C06f61F201358ed7c5A (100 ETH)</span><br><span class="line">(1) 0xA6CaEC75BeD07C935c19381CcAd0B54bB0b55bcC (100 ETH)</span><br><span class="line">(2) 0xAbEAE778ee9e2f76a4639a65125CE15B3ADf6636 (100 ETH)</span><br><span class="line">(3) 0x80661508aB50B862166b900f16de7B3003b0FE77 (100 ETH)</span><br><span class="line">(4) 0x93bDddF9D2703Cf20Bcd2d2f35f7A74485C0445D (100 ETH)</span><br><span class="line">(5) 0xc6C6f5a2ebab7f093eC69Df64AeC431bf8Efb9e7 (100 ETH)</span><br><span class="line">(6) 0x440Ad2C3e69Bfda09Bf96ee2e3AC994A8CedD50f (100 ETH)</span><br><span class="line">(7) 0xeDF4d82bC91c6B686DBea965C4BBC57C3B20aBbe (100 ETH)</span><br><span class="line">(8) 0xed0724f9C9987f1E34c6ea1310Ca185B8dcFdeBF (100 ETH)</span><br><span class="line">(9) 0x042C23152E737F4a9787312347e2421EF62d3830 (100 ETH)</span><br><span class="line"></span><br><span class="line">Private Keys</span><br><span class="line">==================</span><br><span class="line">(0) 0x2da4a67fc6ca91363f8c77ad847bd39c31f8f1adebf1917bcc73479ee3c85b5b</span><br><span class="line">(1) 0x29dada3113b25e0062d98ef2c6c6bcf902890ca29fd75aa83ef51506f35d859b</span><br><span class="line">(2) 0xdf5a94d2e341cca74164109535643dfe76006962da2d722f5ec5b3b6ed156efe</span><br><span class="line">(3) 0xb8a8a3aecad4858c01c855bed20a15efbda573e009a72ded255e9431081804f1</span><br><span class="line">(4) 0xefd2f714680d3eaf56feb620c7ffa4f5dec190c55e85e0391da5c407782eac42</span><br><span class="line">(5) 0x4cfc4f098f5f377474075435eb4f9884039559e1c71a4bb47c3da6d7235143be</span><br><span class="line">(6) 0xe24daa6f598c76235c0a082cc86425e310fedcf867d847f2ae3ccbf959d5ba5e</span><br><span class="line">(7) 0xfab980ecfb7d98b84e2ecbf3a1b25a820d6bcab7d6b98445b6988d3d102afe1a</span><br><span class="line">(8) 0x8cc719c72e450fdd5ddd0e9b328a979ca38618afda188bd1471c7e3e7edea13e</span><br><span class="line">(9) 0xea1a137134552b3cbb333d40dd5deb86f4c7ece2d5285aefffb3b4f762e9a110</span><br><span class="line"></span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      fragile bar affair ritual slam patch <span class="keyword">case</span> <span class="built_in">echo</span> math napkin uncle tomato</span><br><span class="line">Base HD Path:  m/44<span class="string">'/60'</span>/0<span class="string">'/0/&#123;account_index&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gas Price</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">20000000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gas Limit</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">6721975</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Call Gas Limit</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">9007199254740991</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Listening on 127.0.0.1:8545</span></span><br></pre></td></tr></table></figure><h3 id="启动控制台执行合约函数"><a href="#启动控制台执行合约函数" class="headerlink" title="启动控制台执行合约函数"></a>启动控制台执行合约函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle develop</span><br></pre></td></tr></table></figure><p>然后出现控制台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truffle(develop)&gt;</span><br></pre></td></tr></table></figure><h4 id="执行交易Transactions"><a href="#执行交易Transactions" class="headerlink" title="执行交易Transactions"></a>执行交易Transactions</h4><p>下面我们执行交易，使用 sendCoin交易调用的方式从一个帐户向另一个帐户发送20个币：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">truffle(develop)&gt; <span class="built_in">let</span> instance = await MetaCoin.deployed()</span><br><span class="line">undefined</span><br><span class="line">truffle(develop)&gt;<span class="built_in">let</span> account = await web3.eth.getAccounts()</span><br><span class="line">undefined</span><br><span class="line">truffle(develop)&gt;instance.sendCoin(accounts[1], 20, &#123;from: accounts[0]&#125;)</span><br><span class="line">&#123;</span><br><span class="line">  tx: <span class="string">'0xe54369d0f53f4009934891c9b3e266d17b643a4f56528a483d9bbad3fbfb306a'</span>,</span><br><span class="line">  receipt: &#123;</span><br><span class="line">    transactionHash: <span class="string">'0xe54369d0f53f4009934891c9b3e266d17b643a4f56528a483d9bbad3fbfb306a'</span>,</span><br><span class="line">    transactionIndex: 0,</span><br><span class="line">    blockHash: <span class="string">'0x7d59dbf8a0fdcb5cba53d78bed7a61b1812ef4cea0bfb4a7acdd5e38d0d4b646'</span>,</span><br><span class="line">    blockNumber: 8,</span><br><span class="line">    from: <span class="string">'0x5944f1ef9bbdd9f9924f86fe741ddecb4bd309a9'</span>,</span><br><span class="line">    to: <span class="string">'0x51b60184eae1b3b281909751a616b323f1a145bd'</span>,</span><br><span class="line">    gasUsed: 36508,</span><br><span class="line">    cumulativeGasUsed: 36508,</span><br><span class="line">    contractAddress: null,</span><br><span class="line">    logs: [ [Object] ],</span><br><span class="line">    status: <span class="literal">true</span>,</span><br><span class="line">    logsBloom: <span class="string">'0x0000000000000000000000000000000000040000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000c000000000000000000400000000000000000000040000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000002000000000000000000000000000000000000002400000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'</span>,</span><br><span class="line">    rawLogs: [ [Object] ]</span><br><span class="line">  &#125;,</span><br><span class="line">  logs: [</span><br><span class="line">    &#123;</span><br><span class="line">      logIndex: 0,</span><br><span class="line">      transactionIndex: 0,</span><br><span class="line">      transactionHash: <span class="string">'0xe54369d0f53f4009934891c9b3e266d17b643a4f56528a483d9bbad3fbfb306a'</span>,</span><br><span class="line">      blockHash: <span class="string">'0x7d59dbf8a0fdcb5cba53d78bed7a61b1812ef4cea0bfb4a7acdd5e38d0d4b646'</span>,</span><br><span class="line">      blockNumber: 8,</span><br><span class="line">      address: <span class="string">'0x51b60184EAE1b3B281909751A616B323f1a145bd'</span>,</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">'mined'</span>,</span><br><span class="line">      id: <span class="string">'log_9b49c3fe'</span>,</span><br><span class="line">      event: <span class="string">'Transfer'</span>,</span><br><span class="line">      args: [Result]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体来说，我们将获得以下内容：</p><p>*instance.tx (string) - 交易哈希 hash<br>*instance.logs (array) - 解码过的事件 (日志)<br>*instance.receipt (object) - 交易收据 receipt（包括使用的gas）</p><h4 id="执行调用-call"><a href="#执行调用-call" class="headerlink" title="执行调用 call"></a>执行调用 call</h4><p>由上面可知MetaCoin.getBalance方法是执行调用 call。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">truffle(develop)&gt; <span class="built_in">let</span> balance = await instance.getBalance(accounts[0])</span><br><span class="line">undefined</span><br><span class="line">truffle(develop)&gt; balance.toNumber()</span><br><span class="line">9980</span><br></pre></td></tr></table></figure><p>调用会得到返回值9980。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合约部署</title>
      <link href="/hexoT.github.io/posts/undefined.html"/>
      <url>/hexoT.github.io/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>migrate，部署，将写好的合约部署到以太坊网络。</p><h2 id="部署命令"><a href="#部署命令" class="headerlink" title="部署命令"></a>部署命令</h2><p>要部署合约到以太坊网络，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle migrate</span><br></pre></td></tr></table></figure><p>这将部署在项目 migrations 目录中的所有迁移文件。 最简单的迁移只是一组管理部署脚本。 如果我们的迁移先前已成功运行，则 truffle migrate 将从上次运行的迁移开始执行，仅运行新创建的迁移。 如果不存在新的迁移，truffle migrate 将不会执行任何操作。 我们可以使用 –reset 选项从头开始运行所有迁移。 对于本地测试，确保在执行 migrate 之前安装并运行了 Ganache等 测试区块链。<br>！<a href="https://note.youdao.com/yws/public/resource/3ba8726079648ae34cb158e719c8365d/xmlnote/WEBRESOURCE87d470bd269186e4b9cdbfaf569829a0/67" target="_blank" rel="noopener"></a></p><p>项目 migrations 目录中的迁移文件</p><h2 id="迁移文件"><a href="#迁移文件" class="headerlink" title="迁移文件"></a>迁移文件</h2><p>以 migrations 目录中的迁移文件1_initial_migration.js为例，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var Migrations = artifacts.require(<span class="string">"./Migrations.sol"</span>);</span><br><span class="line"></span><br><span class="line">module.exports = <span class="keyword">function</span>(deployer) &#123;</span><br><span class="line"> deployer.deploy(Migrations);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>要注意，文件名以数字为前缀，后缀为描述。 编号前缀是必需的，以便记录迁移是否成功运行。编号有记录 运行迁移文件顺序的作用。</p><h3 id="artifacts-require（）"><a href="#artifacts-require（）" class="headerlink" title="artifacts.require（）"></a>artifacts.require（）</h3><p>在迁移开始时，我们通过 artifacts.require（）方法告诉 Truffle 我们想要与哪些合约进行交互。 这个方法类似于Node的 require。（）里放的就是合约文件的路径。</p><h3 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h3><p>所有迁移都必须通过 module.exports 语法导出函数。 每次迁移导出的函数都应该接受 deployer 对象作为其第一个参数。 此对象通过为部署智能合约提供清晰的语法以及执行部署职责（例如保存已部署的 artifacts 供以后使用）。 deployer 对象是用于暂存部署任务最主要接口。</p><h3 id="部署程序-Deployer"><a href="#部署程序-Deployer" class="headerlink" title="部署程序 Deployer"></a>部署程序 Deployer</h3><p>deployer 对象可以同步编写部署任务，它们将以正确的顺序执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 顺序部署AB</span><br><span class="line">deployer.deploy(A);</span><br><span class="line">deployer.deploy(B);</span><br></pre></td></tr></table></figure><p>或者，部署程序上的每个函数可以使用 Promise，等待上一个任务执行的部署任务完成之后执行（进入一个部署队列）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 部署A完毕，执行B</span><br><span class="line"> deployer.deploy(A).<span class="keyword">then</span>(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> deployer.deploy(B, A.address);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>下面将介绍 deployer 对象的API</p><h3 id="deployer-对象的API"><a href="#deployer-对象的API" class="headerlink" title="deployer 对象的API"></a>deployer 对象的API</h3><h4 id="deployer-deploy-contract-args…-options"><a href="#deployer-deploy-contract-args…-options" class="headerlink" title="deployer.deploy(contract, args…, options)"></a>deployer.deploy(contract, args…, options)</h4><p>deployer.deploy(contract, args…, options) (合约, 不定参数, 选项)部署合约可以通过使用指定合约对象和可选的合约构造函数的参数来进行合约部署。<br>下面通过示例更好理解 deploy 方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 部署没有构造函数的合约</span><br><span class="line">deployer.deploy(A);</span><br><span class="line"></span><br><span class="line">//  部署合约 并使用一些参数传递给合约的构造函数。</span><br><span class="line">deployer.deploy(A, arg1, arg2, ...);</span><br><span class="line"></span><br><span class="line">// 设置overwrite属性为<span class="literal">false</span>，如果合约部署过，不会覆盖</span><br><span class="line">deployer.deploy(A, &#123;overwrite: <span class="literal">false</span>&#125;);</span><br><span class="line"></span><br><span class="line">// 设置gasLimit 和部署合约的账号</span><br><span class="line">deployer.deploy(A, &#123;gas: 4612388, from: <span class="string">"0x...."</span>&#125;);</span><br><span class="line"></span><br><span class="line">// 部署多个合约，一些包含参数，另一些没有。</span><br><span class="line">// 这比编写三个`deployer.deploy（）`语句更快，因为部署者可以作为单个批处理请求执行部署。</span><br><span class="line">deployer.deploy([</span><br><span class="line">  [A, arg1, arg2, ...],</span><br><span class="line">  B,</span><br><span class="line">  [C, arg1]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h4 id="deployer-link-library-destinations"><a href="#deployer-link-library-destinations" class="headerlink" title="deployer.link(library, destinations)"></a>deployer.link(library, destinations)</h4><p>将已部署的库链接到合约或多个合约。 参数 destinations 可以是单个合约，也可以是多个合约的数组。 如果目的（即参数指定的）合约中有不依赖于链接的库，则合约将被忽略。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 部署库LibA，然后将已部署的LibA链接到合约B，然后部署B.</span><br><span class="line">deployer.deploy(LibA);</span><br><span class="line">deployer.link(LibA, B);</span><br><span class="line">deployer.deploy(B);</span><br><span class="line"></span><br><span class="line">// 链接 LibA 到多个合约</span><br><span class="line">deployer.link(LibA, [B, C, D]);</span><br></pre></td></tr></table></figure><h4 id="deployer-then-function-…"><a href="#deployer-then-function-…" class="headerlink" title="deployer.then(function() {…})"></a>deployer.then(function() {…})</h4><p>就像 promise 一样，可运行任意部署步骤。 使用此选项可在迁移期间调用特定的合约函数，以添加，编辑和重新组织合约数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var a, b;</span><br><span class="line">deployer.then(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  // 创建一个新版本的 A</span><br><span class="line">  <span class="built_in">return</span> A.new();</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(instance) &#123;</span><br><span class="line">  a = instance;</span><br><span class="line">  // 获取部署的 B 实例</span><br><span class="line">  <span class="built_in">return</span> B.deployed();</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(instance) &#123;</span><br><span class="line">  b = instance;</span><br><span class="line">  // 通过B的setA（）函数在B上设置A的新实例地址</span><br><span class="line">  <span class="built_in">return</span> b.setA(a.address);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="可选网络"><a href="#可选网络" class="headerlink" title="可选网络"></a>可选网络</h3><p>可以根据网络条件，条件性地运行部署。要有条件地运行部署步骤，在编写迁移时，加入第二个参数 network， 例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = <span class="keyword">function</span>(deployer, network) &#123;</span><br><span class="line">  <span class="keyword">if</span> (network == <span class="string">"dexter"</span>) &#123;</span><br><span class="line">    // Do something specific to the network named <span class="string">"dexter"</span>.</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    // Perform a different step otherwise.</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>contract</title>
      <link href="/hexoT.github.io/posts/52995.html"/>
      <url>/hexoT.github.io/posts/52995.html</url>
      
        <content type="html"><![CDATA[<h2 id="合约文件目录"><a href="#合约文件目录" class="headerlink" title="合约文件目录"></a>合约文件目录</h2><p>所有合约都位于项目的 contracts/ 目录中。 由于合约是用Solidity语言编写的，所有包含合约的文件都将具有 .sol 文件扩展名。 相关的 Solidity 库也将有一个.sol扩展名。</p><p>使用truffle init命令创建的空 Truffle 工程会生成一个用于部署的Migrations.sol 合约文件。 如果我们使用 Truffle Box 来创建工程，则会有多个合约文件。<br>！<a href="https://note.youdao.com/yws/public/resource/874ce020b56a45ac1473dc8dc4f74a4b/xmlnote/WEBRESOURCEb239401647e26a06b3e941b7ce89295c/57" target="_blank" rel="noopener"></a><br>如图是contracts/ 目录下的Migrations.sol合约。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>切换到项目工程所在根目录，然后在终端中键入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle compile</span><br></pre></td></tr></table></figure><p>首次运行时，将编译所有合约。 在后续运行中，truffle将仅编译自上次编译以来有更改的合约。 如果我们想覆盖此行为，可以使用 –all 选项运行上面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ truffle compile</span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br></pre></td></tr></table></figure><p>如上truffle将仅编译自上次编译以来有更改的合约,没有更改就出现Everything is up to date, there is nothing to compile。</p><h2 id="目标文件-Artifacts"><a href="#目标文件-Artifacts" class="headerlink" title="目标文件 Artifacts"></a>目标文件 Artifacts</h2><p>编译的目标文件 Artifacts 将放在 build/contracts/ 目录中：<br>！<a href="https://note.youdao.com/yws/public/resource/74a297d3939ea035df49bfe05a1fe0c8/xmlnote/WEBRESOURCEa3392aad57f048ffc22b33d7772ae35a/62" target="_blank" rel="noopener"></a><br>可以看到目标文件 Artifacts其实就是JSON对象文件。这些 Artifacts 是Truffle内部工作的组成部分，它们在成功部署应用程序中起着重要作用。 我们不应编辑这些文件，因为这些文件将被合约编译和部署覆盖。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle命令指南</title>
      <link href="/hexoT.github.io/posts/63269.html"/>
      <url>/hexoT.github.io/posts/63269.html</url>
      
        <content type="html"><![CDATA[<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle [<span class="built_in">command</span>] [options]</span><br></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="truffle-console"><a href="#truffle-console" class="headerlink" title="truffle console"></a>truffle console</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ truffle console</span><br><span class="line">truffle(default)&gt;</span><br></pre></td></tr></table></figure><p>使用默认网络来调起一个控制台，会自动连接到一个运行中的以太坊客户端。你可以使用选项–network来修改这个特性。</p><p>控制台支持Truffle命令行支持的命令，比如，你可以在控制台中执行migrate –reset，其效果与在命令行中执行truffle migrate –reset的效果一致。Truffle的控制台额外增加如下特性：<br>*所有已经编译的合约都可用。就像在开发测试，前端代码中，或者移植代码中那样使用。<br>*在每个命令后，你的合约会被重新加载。如使用migrate –reset命令后，你可以立即使用新分配的地址和二进制。<br>*web3库也可以使用，且也连到你了的以太坊客户端。<br>*所有命令返回的promise，会自动解析，直接打印出结果，你可以不用输入then()，简化了命令。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ truffle(default)&gt; MyContract.deployed().getValue.call(); </span><br><span class="line">  8</span><br></pre></td></tr></table></figure><h4 id="truffle-build"><a href="#truffle-build" class="headerlink" title="truffle build"></a>truffle build</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle build</span><br></pre></td></tr></table></figure><p>构建结果存在./build目录。所以合约文件则在对应的位置./build/contracts。</p><h4 id="truffle-compile"><a href="#truffle-compile" class="headerlink" title="truffle compile"></a>truffle compile</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle compile</span><br></pre></td></tr></table></figure><p>智能编译你的合约，仅会编译自上次编译后修改过的合约，除非另外指定强制刷新。可选参数：<br>*–compile-all: 强制编译所有合约。<br>*–network 名称：指定使用的网络，保存编译的结果到指定的网络上。</p><h4 id="truffle-migrate"><a href="#truffle-migrate" class="headerlink" title="truffle migrate"></a>truffle migrate</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle migrate</span><br></pre></td></tr></table></figure><p>运行工程的移植。可选的参数：<br>*–reset: 从头运行所有的移植。<br>*–network 名称：指定要使用的网络，并将编译后的资料保存到那个网络。<br>*–to number：将版本从当前版本移植到序号指定的版本。<br>*–compile-all: 强制编译所有的合约<br>*–verbose-rpc：打印Truffle与RPC交互的详细日志。</p><h4 id="truffle-init"><a href="#truffle-init" class="headerlink" title="truffle init"></a>truffle init</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle init</span><br></pre></td></tr></table></figure><p>在当前目录下初始化一个全新的APP，一个全新的工程。会自带默认合约和前端配置。</p><h4 id="truffle-serve"><a href="#truffle-serve" class="headerlink" title="truffle serve"></a>truffle serve</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle serve</span><br></pre></td></tr></table></figure><p>在 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 提供编译的app对应的服务，且在需要的时候自动构建，自动部署。与truffle watch类似，区别在于这里增加web服务器功能。可选参数：<br>*-p port: 指定http服务的端口。默认是8080。<br>*–network 名称：名称：指定要使用的网络，并将编译后的资料保存到那个网络。</p><h4 id="truffle-test"><a href="#truffle-test" class="headerlink" title="truffle test"></a>truffle test</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ $ truffle <span class="built_in">test</span> [/path/to/<span class="built_in">test</span>/file]</span><br></pre></td></tr></table></figure><p>运行所有在./test目录下的测试用例。或可选的运行单个测试文件。可选参数：<br>*–network 名称：指定要使用的网络，并将编译后的资料保存到那个网络。<br>*–compile-all: 强制编译所有的合约<br>*–verbose-rpc：打印Truffle与RPC交互的详细日志。</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> truffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>truffle的入门介绍</title>
      <link href="/hexoT.github.io/posts/36087.html"/>
      <url>/hexoT.github.io/posts/36087.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是truffle"><a href="#什么是truffle" class="headerlink" title="什么是truffle"></a>什么是truffle</h2><p>truffle是一个世界级的开发环境，是针对基于以太坊的Solidity语言的一套开发框架，其本身基于Javascript。它致力于让以太坊上的开发变得简单：<br>*内置的智能合约编译，链接，部署和二进制文件的管理。<br>*针对快速迭代开发的自动化合约测试。<br>*可脚本化，可扩展的部署与迁移框架。<br>*用于部署到任意数量的公网或私网的网络环境管理。<br>*使用EthPM&amp;NPM提供的包管理，使用ERC190标准。<br>*与合约直接通信的交互控制台。<br>*可配的构建流程，支持紧密集成。<br>*在Truffle环境里支持执行外部的脚本。</p><p>truffle的github网址：<a href="https://github.com/trufflesuite/truffle" target="_blank" rel="noopener">https://github.com/trufflesuite/truffle</a></p><h2 id="学习Truffle需要什么基础"><a href="#学习Truffle需要什么基础" class="headerlink" title="学习Truffle需要什么基础"></a>学习Truffle需要什么基础</h2><p>*前面说过truffle其本身基于Javascript，但对Javascript的要求比较低，知道基本语法、模块、Promise的概念差不多就可以了。<br>*需要知道Solidity知识，其实它的语法接近于Javascript，是一种面向对象的语言。支持继承、库和复杂的用户定义类型等特性。<br>*Solidity还受到C++，Python 和 Javascript 语言的影响，设计的目的是能在以太坊虚拟机（EVM）上运行。但其实我们在用Solidity开发智能合约时候会发现为什么这么像在写Javascript代码。</p><h2 id="truffle是怎样开发以太坊"><a href="#truffle是怎样开发以太坊" class="headerlink" title="truffle是怎样开发以太坊"></a>truffle是怎样开发以太坊</h2><p>*编译合约<br>*合约部署<br>*与合约进行交互<br>*truffle 和 MetaMask 配合<br>*用 EthPM 进行包管理<br>*用 NPM 进行包管理<br>*调试合约<br>*选择网络及部署</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> truffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu环境下truffle的安装及使用</title>
      <link href="/hexoT.github.io/posts/35987.html"/>
      <url>/hexoT.github.io/posts/35987.html</url>
      
        <content type="html"><![CDATA[<h2 id="truffle的开发环境"><a href="#truffle的开发环境" class="headerlink" title="truffle的开发环境"></a>truffle的开发环境</h2><p>ubuntu环境下开发truffle之前应该先安装好nodejs，网上有很多教程，大家可以直接在网上找，这就不重复造轮了。<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure><br>下载后使用node -v就可以看到node的版本，建议下载最新的。<br>！<a href="https://note.youdao.com/yws/public/resource/d634a3cf8ba9e85e81e6e24b9ac71c3d/xmlnote/WEBRESOURCE41c4e33b664209d4c46e6424117c5781/27" target="_blank" rel="noopener"></a><br>接下来，还应该安装NodeJS中用到的truffle运行时需要的web3环境<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">- bignumber.js@2.0.7 node_modules/web3/node_modules/bignumber.js</span><br><span class="line">truffle3@1.0.0 /Users/TryBlockchain/develop/blockchain_workspace/truffle3</span><br><span class="line">└── web3@0.18.2</span><br></pre></td></tr></table></figure><br>如果使用truffle没有集成web3环境，可能会报下述错误：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">/Users/TryBlockchain/develop/blockchain_workspace/truffle3/main/main.js:4</span><br><span class="line">var provider = new Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>);</span><br><span class="line">                ^</span><br><span class="line"></span><br><span class="line">ReferenceError: Web3 is not defined</span><br></pre></td></tr></table></figure><br>Web3 is not defined，Web3还没定义，很明显是还没安装web3所导致的。</p><h2 id="truffle的安装"><a href="#truffle的安装" class="headerlink" title="truffle的安装"></a>truffle的安装</h2>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g truffle</span><br></pre></td></tr></table></figure><p>安装完毕，可以查看truffle是否安装成功。<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle version</span><br></pre></td></tr></table></figure><br>！<a href="https://note.youdao.com/yws/public/resource/22434c326d0d36f27bfae9948f2d2d94/xmlnote/WEBRESOURCE433ddb943009ede5e46e0c1a52f84fe9/32" target="_blank" rel="noopener"></a><br>可以看到版本号，说明安装成功。</p><h2 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h2><p>新建一个空文件夹truffle-demo。然后进入文件夹<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ truffle unbox pet-shop</span><br></pre></td></tr></table></figure><br>！<a href="https://note.youdao.com/yws/public/resource/244052e724159ffb295e083a8a875ab9/xmlnote/WEBRESOURCE1dc5b2f1d9fc3fffb30c02592f4e39da/37" target="_blank" rel="noopener"></a><br>如图则表示trufflebox 初始化模板成功。<br>值得注意的是，安装过程如果出现下面这种情况：<br>！<a href="https://note.youdao.com/yws/public/resource/132a29ecd1acaa6c2b8201314249154e/xmlnote/WEBRESOURCE010a823079eb4225020bec9c361dd083/43" target="_blank" rel="noopener"></a><br>则多数是因为网络不行导致的，用个好的网络就可以安装成功了。有时候是因为ubuntu断网了，重启ubuntu网络连接就好了。<br>看一下工程目录:<br>！<a href="https://note.youdao.com/yws/public/resource/4f17f7e27c8b49ac07ca8b24d0668171/xmlnote/WEBRESOURCE7cc3cef2ddf2648f55564ebfcd4d25bf/47" target="_blank" rel="noopener"></a></p><p>contracts:智能合约文件夹<br>migrations:用于部署的脚本<br>node_modules:nodejs<br>src:前端资源<br>test:单元测试<br>bs-config.json:lite-server的配置文件<br>package.json:nodejs依赖<br>truffle-config.js:truffle的配置</p><p>终端输入truffle develop 进入truffle 控制台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ truffle develop</span><br><span class="line">Truffle Develop started at http://127.0.0.1:8545/</span><br><span class="line"></span><br><span class="line">Accounts:</span><br><span class="line">(0) 0x5944f1ef9bbdd9f9924f86fe741ddecb4bd309a9</span><br><span class="line">(1) 0x439740ddc74491bd8019660d4542dee4678a401f</span><br><span class="line">(2) 0xd983f44dde381165878a27583b2660f758d4c7c5</span><br><span class="line">(3) 0x2517f698c61a3977230863bb11534d1ee7b25bce</span><br><span class="line">(4) 0x09da34c90e08adbb7d3c01cf5195b2d7f60c8efd</span><br><span class="line">(5) 0x21ce72d1a911b21f1945477c66395df8533365ad</span><br><span class="line">(6) 0x9502d7b179d4c38e21bc8f463d9344c03618a2d8</span><br><span class="line">(7) 0x6c73739d47ec7973b474d315beaecfed8c4c191b</span><br><span class="line">(8) 0x73bf236c3219350c3a49c6a5627032f50613192c</span><br><span class="line">(9) 0x5e810c521cc4b1c64160610c21532fcf50c44f48</span><br><span class="line"></span><br><span class="line">Private Keys:</span><br><span class="line">(0) 20721027b4ce8cd236f0a4195b4368c6395f8f7fdacf0390f0c506f02d5817c3</span><br><span class="line">(1) f6f85db817cbeca90023118b4a29dbaa5038e9d83dafd2d65db0b34dab9e4440</span><br><span class="line">(2) 68f9f4b86804a8ecb04a89776d7345110e37006b80efde4c3af7f23a8ec7011b</span><br><span class="line">(3) 1b1bf475c27b9c39ebc6b51fae3af49b433a8ad71d9b14540138d1ae643b2d26</span><br><span class="line">(4) 56a39f50edef69d18fff3b2696b00c0750b7b64f64f1584a15b086b65bdd5630</span><br><span class="line">(5) 8aa3f24263cb9bf3a7563b1b77d636f43b8fb9b160733447bfddc33db2094281</span><br><span class="line">(6) 0980de4fa5ebd017550ecda18e09812166ee9b7e2eeb75407c43e6399ba59171</span><br><span class="line">(7) e06f24f41ec689aabda2ac7f59d63a9578ff2fba447ada48fc91c639c0caa2dd</span><br><span class="line">(8) 87c5df96d80ee5abcfbf063303ae9845d1a54a6c7371991eaa046e9baa254571</span><br><span class="line">(9) 8ca326c26cba303f0573be05771d12783c18fba99abcd0f8228ef228b8eb4318</span><br><span class="line"></span><br><span class="line">Mnemonic: foil damage razor border under disorder isolate wood mansion slim solution lock</span><br><span class="line"></span><br><span class="line">⚠️  Important ⚠️  : This mnemonic was created <span class="keyword">for</span> you by Truffle. It is not secure.</span><br><span class="line">Ensure you <span class="keyword">do</span> not use it on production blockchains, or <span class="keyword">else</span> you risk losing funds.</span><br><span class="line"></span><br><span class="line">truffle(develop)&gt;</span><br></pre></td></tr></table></figure><p>在truffle控制台输入compile进行编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">truffle(develop)&gt; compile</span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Compiling ./contracts/Migrations.sol</span><br><span class="line">&gt; Artifacts written to /home/dexter/truffe-demo/build/contracts</span><br><span class="line">&gt; Compiled successfully using:</span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br></pre></td></tr></table></figure><p>输入migrate进行发布：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">truffle(develop)&gt; migrate</span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line">&gt; Network name:    <span class="string">'develop'</span></span><br><span class="line">&gt; Network id:      5777</span><br><span class="line">&gt; Block gas <span class="built_in">limit</span>: 6721975 (0x6691b7)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Migrations'</span></span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; transaction <span class="built_in">hash</span>:    0xf22102c79bd174a31ec86e2e6779486e17b2bd7bf0e4066fb044bdd33d83e255</span><br><span class="line">   &gt; Blocks: 0            Seconds: 0</span><br><span class="line">   &gt; contract address:    0xA2f91131Ca34Fa891fC1A2C1144413cD354454A1</span><br><span class="line">   &gt; block number:        1</span><br><span class="line">   &gt; block timestamp:     1593914207</span><br><span class="line">   &gt; account:             0x5944f1Ef9bbdD9F9924f86Fe741ddECB4bD309A9</span><br><span class="line">   &gt; balance:             99.9967165</span><br><span class="line">   &gt; gas used:            164175 (0x2814f)</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.0032835 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:           0.0032835 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line">&gt; Total deployments:   1</span><br><span class="line">&gt; Final cost:          0.0032835 ETH</span><br></pre></td></tr></table></figure><p>输入test指令进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">truffle(develop)&gt; <span class="built_in">test</span></span><br><span class="line">Using network <span class="string">'develop'</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br></pre></td></tr></table></figure><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> truffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu环境下Loom SDK 的安装及使用</title>
      <link href="/hexoT.github.io/posts/38678.html"/>
      <url>/hexoT.github.io/posts/38678.html</url>
      
        <content type="html"><![CDATA[<p>写在前面的话，为何要使用Loom？</p><h2 id="Loom的介绍"><a href="#Loom的介绍" class="headerlink" title="Loom的介绍"></a>Loom的介绍</h2><p>Loom，下一代区块链平台。<br>官网地址：<a href="https://loomx.io/" target="_blank" rel="noopener">https://loomx.io/</a><br>github地址：<a href="https://github.com/loomnetwork" target="_blank" rel="noopener">https://github.com/loomnetwork</a><br>喜欢Loom是有原因的。它不像其它区块链项目，一上来就搞什么白皮书的，搞圈钱运动。Loom的团队从来都是脚踏实地的做区块链的事。<br>*Loom Dappchains采用的是DPOS共识。<br>*Loom Network基于以太坊开发了Loom Network侧链，且基于以太坊的ERC20协议发布Token，Loom币。。<br>*Loom SDK 打造你自己的区块链，选择你自己的共识机制，创建你自己的规则集，发布可运行在任何云平台的全包节点软件。有了 Loom, 你只需专注应用开发。<br>*DAppChains 是一个拥有所有特性的区块链，可运行在以太坊智能合约上。它们是一种先进的侧链，针对大规模数据优化，而非金融交易。每个 DApp 都运行在自己的区块链上，其数据是公开且可分叉的，恰如以太坊和区块链。<br>*Loom Network是一个针对游戏和社交的DApp链，发布SDK，开发者来编写应用。</p><h2 id="Loom的下载"><a href="#Loom的下载" class="headerlink" title="Loom的下载"></a>Loom的下载</h2><p>我使用的系统是Linux(Window 暂时不支持，可以选择ubuntu虚拟机)。<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://private.delegatecall.com/loom/linux/stable/loom</span><br></pre></td></tr></table></figure></p><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>ubuntu下的环境变量配置是这样的:<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /home/dexter/node-v12.16.3-linux-x64/bin/loom /usr/<span class="built_in">local</span>/bin/loom</span><br></pre></td></tr></table></figure><br>我们把上面下载后的执行文件放到ubuntu home目录的/node-v12.16.3-linux-x64/bin/下,我的home目录是 /home/dexter/,如下图已经把loom执行文件放/node-v12.16.3-linux-x64/bin/目录下:<br>！<a href="https://note.youdao.com/yws/public/resource/325f64800ec30c8191ad335ad339aafc/xmlnote/WEBRESOURCE4fb9dd787191f70b56523228a1fbe781/9" target="_blank" rel="noopener"></a><br>如此就完成loom的全局配置。</p><h2 id="开始使用loom命令"><a href="#开始使用loom命令" class="headerlink" title="开始使用loom命令"></a>开始使用loom命令</h2>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir loom-chain</span><br><span class="line">$ <span class="built_in">cd</span> loom-chain</span><br></pre></td></tr></table></figure><p>在ubuntu中创建loom-chain文件夹并在文件夹中打开命令行，如下：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ loom init</span><br></pre></td></tr></table></figure><br>！<a href="https://note.youdao.com/yws/public/resource/c8a3ebc7983c51b0354f71801559ab0b/xmlnote/WEBRESOURCEffd41093c425a1186f0fd26969fd6557/19" target="_blank" rel="noopener"></a></p><p>执行loom init初始化后生成文件如图。初始化命令会生成 genesis.json 和 chaindata 目录，genesis.json 是这条侧链的创世纪块配置，chaindata 目录用户保存区块数据。</p><h2 id="运行loom区块链"><a href="#运行loom区块链" class="headerlink" title="运行loom区块链"></a>运行loom区块链</h2><p>在loom-chain文件夹使用以下的命令可以启动刚刚初始化的 loom 侧链：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ loom run</span><br></pre></td></tr></table></figure><br>启动后的界面是这样：</p><p>！<a href="https://note.youdao.com/yws/public/resource/ef82b85c89089ba6d99639867c5d7480/xmlnote/WEBRESOURCE15661a3e9aa228abab7aeabd5b9deaa2/22" target="_blank" rel="noopener"></a></p><p>至此，完成ubuntu环境下Loom SDK 的安装及使用</p><p>如有问题可以加微信dexter8(烦请备注：DAPP)，或者！<a href="https://note.youdao.com/yws/public/resource/2c16c3a6073a1ac48d9de3e0b52d9b69/xmlnote/WEBRESOURCE144cfd2ca5170bc27cc833e7786a2f85/52" target="_blank" rel="noopener">知识星球</a>。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
